-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_ha is
generic (
    C_M_AXI_MST_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MST_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MST_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MST_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MST_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MST_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MST_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MST_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_SLV_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_SLV_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MST_USER_VALUE : INTEGER := 0;
    C_M_AXI_MST_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MST_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mst_AWVALID : OUT STD_LOGIC;
    m_axi_mst_AWREADY : IN STD_LOGIC;
    m_axi_mst_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MST_ADDR_WIDTH-1 downto 0);
    m_axi_mst_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MST_ID_WIDTH-1 downto 0);
    m_axi_mst_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mst_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mst_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mst_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mst_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mst_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mst_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mst_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mst_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MST_AWUSER_WIDTH-1 downto 0);
    m_axi_mst_WVALID : OUT STD_LOGIC;
    m_axi_mst_WREADY : IN STD_LOGIC;
    m_axi_mst_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MST_DATA_WIDTH-1 downto 0);
    m_axi_mst_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MST_DATA_WIDTH/8-1 downto 0);
    m_axi_mst_WLAST : OUT STD_LOGIC;
    m_axi_mst_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MST_ID_WIDTH-1 downto 0);
    m_axi_mst_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MST_WUSER_WIDTH-1 downto 0);
    m_axi_mst_ARVALID : OUT STD_LOGIC;
    m_axi_mst_ARREADY : IN STD_LOGIC;
    m_axi_mst_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MST_ADDR_WIDTH-1 downto 0);
    m_axi_mst_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MST_ID_WIDTH-1 downto 0);
    m_axi_mst_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mst_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mst_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mst_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mst_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mst_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mst_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mst_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mst_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MST_ARUSER_WIDTH-1 downto 0);
    m_axi_mst_RVALID : IN STD_LOGIC;
    m_axi_mst_RREADY : OUT STD_LOGIC;
    m_axi_mst_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MST_DATA_WIDTH-1 downto 0);
    m_axi_mst_RLAST : IN STD_LOGIC;
    m_axi_mst_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MST_ID_WIDTH-1 downto 0);
    m_axi_mst_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MST_RUSER_WIDTH-1 downto 0);
    m_axi_mst_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mst_BVALID : IN STD_LOGIC;
    m_axi_mst_BREADY : OUT STD_LOGIC;
    m_axi_mst_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mst_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MST_ID_WIDTH-1 downto 0);
    m_axi_mst_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MST_BUSER_WIDTH-1 downto 0);
    s_axi_slv_AWVALID : IN STD_LOGIC;
    s_axi_slv_AWREADY : OUT STD_LOGIC;
    s_axi_slv_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_SLV_ADDR_WIDTH-1 downto 0);
    s_axi_slv_WVALID : IN STD_LOGIC;
    s_axi_slv_WREADY : OUT STD_LOGIC;
    s_axi_slv_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_SLV_DATA_WIDTH-1 downto 0);
    s_axi_slv_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_SLV_DATA_WIDTH/8-1 downto 0);
    s_axi_slv_ARVALID : IN STD_LOGIC;
    s_axi_slv_ARREADY : OUT STD_LOGIC;
    s_axi_slv_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_SLV_ADDR_WIDTH-1 downto 0);
    s_axi_slv_RVALID : OUT STD_LOGIC;
    s_axi_slv_RREADY : IN STD_LOGIC;
    s_axi_slv_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_SLV_DATA_WIDTH-1 downto 0);
    s_axi_slv_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_slv_BVALID : OUT STD_LOGIC;
    s_axi_slv_BREADY : IN STD_LOGIC;
    s_axi_slv_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of aes_ha is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes_ha,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s15-ftgb196-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=1897,HLS_SYN_LUT=3925,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFF1 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111110001";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal iv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal iv_ce0 : STD_LOGIC;
    signal iv_we0 : STD_LOGIC;
    signal iv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_r : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal length_r_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal length_r_0_vld_reg : STD_LOGIC := '0';
    signal length_r_0_ack_out : STD_LOGIC;
    signal mst_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal mst_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln54_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mst_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal mst_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal mst_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal mst_AWVALID : STD_LOGIC;
    signal mst_AWREADY : STD_LOGIC;
    signal mst_WVALID : STD_LOGIC;
    signal mst_WREADY : STD_LOGIC;
    signal mst_ARVALID : STD_LOGIC;
    signal mst_ARREADY : STD_LOGIC;
    signal mst_RVALID : STD_LOGIC;
    signal mst_RREADY : STD_LOGIC;
    signal mst_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal mst_RLAST : STD_LOGIC;
    signal mst_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal mst_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mst_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mst_BVALID : STD_LOGIC;
    signal mst_BREADY : STD_LOGIC;
    signal mst_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mst_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal mst_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal out_read_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_read_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_read_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_KeyExpansion_fu_295_ap_ready : STD_LOGIC;
    signal grp_KeyExpansion_fu_295_ap_done : STD_LOGIC;
    signal p_cast9_fu_307_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_cast9_reg_517 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_cast7_fu_310_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_cast7_reg_522 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_1_fu_319_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_530 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln55_3_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_3_reg_535 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln54_3_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_397_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln55_fu_410_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln55_reg_553 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln21_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mst_addr_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_435_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_567 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state13 : BOOLEAN;
    signal mst_addr_read_reg_572 : STD_LOGIC_VECTOR (7 downto 0);
    signal mst_addr_1_reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_fu_466_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_586 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln54_2_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_477_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_596 : STD_LOGIC_VECTOR (31 downto 0);
    signal text_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal text_load_reg_601 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_fu_489_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_609 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal zext_ln55_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_reg_614 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln54_1_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_RoundKey_ce0 : STD_LOGIC;
    signal ctx_RoundKey_we0 : STD_LOGIC;
    signal ctx_RoundKey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_RoundKey_ce1 : STD_LOGIC;
    signal ctx_RoundKey_we1 : STD_LOGIC;
    signal ctx_RoundKey_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_Iv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ctx_Iv_ce0 : STD_LOGIC;
    signal ctx_Iv_we0 : STD_LOGIC;
    signal ctx_Iv_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_Iv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal text_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal text_ce0 : STD_LOGIC;
    signal text_we0 : STD_LOGIC;
    signal text_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_CTR_xcrypt_buffe_fu_286_ap_start : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_286_ap_done : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_286_ap_idle : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_286_ap_ready : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_286_ctx_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_CTR_xcrypt_buffe_fu_286_ctx_RoundKey_ce0 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_ce0 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_we0 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_ce0 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_we0 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_295_ap_start : STD_LOGIC;
    signal grp_KeyExpansion_fu_295_ap_idle : STD_LOGIC;
    signal grp_KeyExpansion_fu_295_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_295_RoundKey_ce0 : STD_LOGIC;
    signal grp_KeyExpansion_fu_295_RoundKey_we0 : STD_LOGIC;
    signal grp_KeyExpansion_fu_295_RoundKey_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_295_RoundKey_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_295_RoundKey_ce1 : STD_LOGIC;
    signal grp_KeyExpansion_fu_295_RoundKey_we1 : STD_LOGIC;
    signal grp_KeyExpansion_fu_295_RoundKey_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_295_Key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_KeyExpansion_fu_295_Key_ce0 : STD_LOGIC;
    signal i_0_i_i_reg_229 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_0_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_252 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_0_i1_reg_264 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_i4_reg_275 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_AES_CTR_xcrypt_buffe_fu_286_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state13_ignore_call0 : BOOLEAN;
    signal grp_KeyExpansion_fu_295_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln55_1_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_2_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln55_1_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln55_2_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln21_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln21_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_355_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_1_fu_342_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln21_1_fu_365_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_2_fu_371_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_fu_330_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_fu_381_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln21_1_fu_389_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln55_fu_414_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln55_1_fu_441_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component AES_CTR_xcrypt_buffe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_RoundKey_ce0 : OUT STD_LOGIC;
        ctx_RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_Iv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ctx_Iv_ce0 : OUT STD_LOGIC;
        ctx_Iv_we0 : OUT STD_LOGIC;
        ctx_Iv_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_Iv_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component KeyExpansion IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce0 : OUT STD_LOGIC;
        RoundKey_we0 : OUT STD_LOGIC;
        RoundKey_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce1 : OUT STD_LOGIC;
        RoundKey_we1 : OUT STD_LOGIC;
        RoundKey_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        Key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Key_ce0 : OUT STD_LOGIC;
        Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_ha_ctx_RoundKey IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_CTR_xcrypt_buffe_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_ha_slv_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        key_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        key_ce0 : IN STD_LOGIC;
        key_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        iv_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        iv_ce0 : IN STD_LOGIC;
        iv_we0 : IN STD_LOGIC;
        iv_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        iv_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component aes_ha_mst_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    aes_ha_slv_s_axi_U : component aes_ha_slv_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_SLV_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_SLV_DATA_WIDTH)
    port map (
        AWVALID => s_axi_slv_AWVALID,
        AWREADY => s_axi_slv_AWREADY,
        AWADDR => s_axi_slv_AWADDR,
        WVALID => s_axi_slv_WVALID,
        WREADY => s_axi_slv_WREADY,
        WDATA => s_axi_slv_WDATA,
        WSTRB => s_axi_slv_WSTRB,
        ARVALID => s_axi_slv_ARVALID,
        ARREADY => s_axi_slv_ARREADY,
        ARADDR => s_axi_slv_ARADDR,
        RVALID => s_axi_slv_RVALID,
        RREADY => s_axi_slv_RREADY,
        RDATA => s_axi_slv_RDATA,
        RRESP => s_axi_slv_RRESP,
        BVALID => s_axi_slv_BVALID,
        BREADY => s_axi_slv_BREADY,
        BRESP => s_axi_slv_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        key_address0 => grp_KeyExpansion_fu_295_Key_address0,
        key_ce0 => grp_KeyExpansion_fu_295_Key_ce0,
        key_q0 => key_q0,
        iv_address0 => iv_address0,
        iv_ce0 => iv_ce0,
        iv_we0 => iv_we0,
        iv_d0 => ctx_Iv_q0,
        iv_q0 => iv_q0,
        in_r => in_r,
        out_r => out_r,
        length_r => length_r);

    aes_ha_mst_m_axi_U : component aes_ha_mst_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MST_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MST_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MST_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MST_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MST_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MST_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MST_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MST_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MST_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MST_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MST_CACHE_VALUE)
    port map (
        AWVALID => m_axi_mst_AWVALID,
        AWREADY => m_axi_mst_AWREADY,
        AWADDR => m_axi_mst_AWADDR,
        AWID => m_axi_mst_AWID,
        AWLEN => m_axi_mst_AWLEN,
        AWSIZE => m_axi_mst_AWSIZE,
        AWBURST => m_axi_mst_AWBURST,
        AWLOCK => m_axi_mst_AWLOCK,
        AWCACHE => m_axi_mst_AWCACHE,
        AWPROT => m_axi_mst_AWPROT,
        AWQOS => m_axi_mst_AWQOS,
        AWREGION => m_axi_mst_AWREGION,
        AWUSER => m_axi_mst_AWUSER,
        WVALID => m_axi_mst_WVALID,
        WREADY => m_axi_mst_WREADY,
        WDATA => m_axi_mst_WDATA,
        WSTRB => m_axi_mst_WSTRB,
        WLAST => m_axi_mst_WLAST,
        WID => m_axi_mst_WID,
        WUSER => m_axi_mst_WUSER,
        ARVALID => m_axi_mst_ARVALID,
        ARREADY => m_axi_mst_ARREADY,
        ARADDR => m_axi_mst_ARADDR,
        ARID => m_axi_mst_ARID,
        ARLEN => m_axi_mst_ARLEN,
        ARSIZE => m_axi_mst_ARSIZE,
        ARBURST => m_axi_mst_ARBURST,
        ARLOCK => m_axi_mst_ARLOCK,
        ARCACHE => m_axi_mst_ARCACHE,
        ARPROT => m_axi_mst_ARPROT,
        ARQOS => m_axi_mst_ARQOS,
        ARREGION => m_axi_mst_ARREGION,
        ARUSER => m_axi_mst_ARUSER,
        RVALID => m_axi_mst_RVALID,
        RREADY => m_axi_mst_RREADY,
        RDATA => m_axi_mst_RDATA,
        RLAST => m_axi_mst_RLAST,
        RID => m_axi_mst_RID,
        RUSER => m_axi_mst_RUSER,
        RRESP => m_axi_mst_RRESP,
        BVALID => m_axi_mst_BVALID,
        BREADY => m_axi_mst_BREADY,
        BRESP => m_axi_mst_BRESP,
        BID => m_axi_mst_BID,
        BUSER => m_axi_mst_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => mst_ARVALID,
        I_ARREADY => mst_ARREADY,
        I_ARADDR => mst_addr_reg_558,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_10,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => mst_RVALID,
        I_RREADY => mst_RREADY,
        I_RDATA => mst_RDATA,
        I_RID => mst_RID,
        I_RUSER => mst_RUSER,
        I_RRESP => mst_RRESP,
        I_RLAST => mst_RLAST,
        I_AWVALID => mst_AWVALID,
        I_AWREADY => mst_AWREADY,
        I_AWADDR => mst_addr_1_reg_577,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_10,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => mst_WVALID,
        I_WREADY => mst_WREADY,
        I_WDATA => text_load_reg_601,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => mst_BVALID,
        I_BREADY => mst_BREADY,
        I_BRESP => mst_BRESP,
        I_BID => mst_BID,
        I_BUSER => mst_BUSER);

    ctx_RoundKey_U : component aes_ha_ctx_RoundKey
    generic map (
        DataWidth => 8,
        AddressRange => 176,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ctx_RoundKey_address0,
        ce0 => ctx_RoundKey_ce0,
        we0 => ctx_RoundKey_we0,
        d0 => grp_KeyExpansion_fu_295_RoundKey_d0,
        q0 => ctx_RoundKey_q0,
        address1 => grp_KeyExpansion_fu_295_RoundKey_address1,
        ce1 => ctx_RoundKey_ce1,
        we1 => ctx_RoundKey_we1,
        d1 => grp_KeyExpansion_fu_295_RoundKey_d1,
        q1 => ctx_RoundKey_q1);

    ctx_Iv_U : component AES_CTR_xcrypt_buffe_buffer
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ctx_Iv_address0,
        ce0 => ctx_Iv_ce0,
        we0 => ctx_Iv_we0,
        d0 => ctx_Iv_d0,
        q0 => ctx_Iv_q0);

    text_U : component AES_CTR_xcrypt_buffe_buffer
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => text_address0,
        ce0 => text_ce0,
        we0 => text_we0,
        d0 => text_d0,
        q0 => text_q0);

    grp_AES_CTR_xcrypt_buffe_fu_286 : component AES_CTR_xcrypt_buffe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AES_CTR_xcrypt_buffe_fu_286_ap_start,
        ap_done => grp_AES_CTR_xcrypt_buffe_fu_286_ap_done,
        ap_idle => grp_AES_CTR_xcrypt_buffe_fu_286_ap_idle,
        ap_ready => grp_AES_CTR_xcrypt_buffe_fu_286_ap_ready,
        ctx_RoundKey_address0 => grp_AES_CTR_xcrypt_buffe_fu_286_ctx_RoundKey_address0,
        ctx_RoundKey_ce0 => grp_AES_CTR_xcrypt_buffe_fu_286_ctx_RoundKey_ce0,
        ctx_RoundKey_q0 => ctx_RoundKey_q0,
        ctx_Iv_address0 => grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_address0,
        ctx_Iv_ce0 => grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_ce0,
        ctx_Iv_we0 => grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_we0,
        ctx_Iv_d0 => grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_d0,
        ctx_Iv_q0 => ctx_Iv_q0,
        buf_r_address0 => grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_address0,
        buf_r_ce0 => grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_ce0,
        buf_r_we0 => grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_we0,
        buf_r_d0 => grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_d0,
        buf_r_q0 => text_q0);

    grp_KeyExpansion_fu_295 : component KeyExpansion
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_KeyExpansion_fu_295_ap_start,
        ap_done => grp_KeyExpansion_fu_295_ap_done,
        ap_idle => grp_KeyExpansion_fu_295_ap_idle,
        ap_ready => grp_KeyExpansion_fu_295_ap_ready,
        RoundKey_address0 => grp_KeyExpansion_fu_295_RoundKey_address0,
        RoundKey_ce0 => grp_KeyExpansion_fu_295_RoundKey_ce0,
        RoundKey_we0 => grp_KeyExpansion_fu_295_RoundKey_we0,
        RoundKey_d0 => grp_KeyExpansion_fu_295_RoundKey_d0,
        RoundKey_q0 => ctx_RoundKey_q0,
        RoundKey_address1 => grp_KeyExpansion_fu_295_RoundKey_address1,
        RoundKey_ce1 => grp_KeyExpansion_fu_295_RoundKey_ce1,
        RoundKey_we1 => grp_KeyExpansion_fu_295_RoundKey_we1,
        RoundKey_d1 => grp_KeyExpansion_fu_295_RoundKey_d1,
        RoundKey_q1 => ctx_RoundKey_q1,
        Key_address0 => grp_KeyExpansion_fu_295_Key_address0,
        Key_ce0 => grp_KeyExpansion_fu_295_Key_ce0,
        Key_q0 => key_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_AES_CTR_xcrypt_buffe_fu_286_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_AES_CTR_xcrypt_buffe_fu_286_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((mst_RVALID = ap_const_logic_0) and (icmp_ln54_fu_429_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln54_fu_429_p2 = ap_const_lv1_1))) then 
                    grp_AES_CTR_xcrypt_buffe_fu_286_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AES_CTR_xcrypt_buffe_fu_286_ap_ready = ap_const_logic_1)) then 
                    grp_AES_CTR_xcrypt_buffe_fu_286_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeyExpansion_fu_295_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_KeyExpansion_fu_295_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_KeyExpansion_fu_295_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeyExpansion_fu_295_ap_ready = ap_const_logic_1)) then 
                    grp_KeyExpansion_fu_295_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i1_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mst_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_0_i1_reg_264 <= i_4_reg_586;
            elsif ((not(((grp_AES_CTR_xcrypt_buffe_fu_286_ap_done = ap_const_logic_0) or (mst_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_0_i1_reg_264 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i4_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_i4_reg_275 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_0_i4_reg_275 <= i_reg_609;
            end if; 
        end if;
    end process;

    i_0_i_i_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_i_i_reg_229 <= i_1_reg_530;
            elsif (((grp_KeyExpansion_fu_295_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_i_reg_229 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_0_i_reg_252 <= i_2_reg_567;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_0_i_reg_252 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_3_fu_313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_240 <= ap_const_lv32_0;
            elsif (((mst_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                i_0_reg_240 <= i_3_reg_596;
            end if; 
        end if;
    end process;

    length_r_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_530 <= i_1_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((mst_RVALID = ap_const_logic_0) and (icmp_ln54_fu_429_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                i_2_reg_567 <= i_2_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_2_fu_460_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                i_3_reg_596 <= i_3_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_4_reg_586 <= i_4_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                i_reg_609 <= i_fu_489_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                in_read_reg_505 <= in_r;
                out_read_reg_500 <= out_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_r_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_r_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (length_r_0_vld_reg = ap_const_logic_1)))) then
                length_r_0_data_reg <= length_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_KeyExpansion_fu_295_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                length_read_reg_510 <= length_r_0_data_reg;
                p_cast7_reg_522 <= p_cast7_fu_310_p1;
                p_cast9_reg_517 <= p_cast9_fu_307_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((mst_RVALID = ap_const_logic_0) and (icmp_ln54_fu_429_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln54_fu_429_p2 = ap_const_lv1_1))) then
                mst_addr_1_reg_577 <= sext_ln55_2_fu_445_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((mst_RVALID = ap_const_logic_0) and (icmp_ln54_fu_429_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln54_fu_429_p2 = ap_const_lv1_0))) then
                mst_addr_read_reg_572 <= mst_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_405_p2 = ap_const_lv1_0))) then
                mst_addr_reg_558 <= sext_ln55_1_fu_419_p1(32 - 1 downto 0);
                sext_ln55_reg_553 <= sext_ln55_fu_410_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                text_load_reg_601 <= text_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_3_fu_313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_3_reg_545(31 downto 4) <= tmp_3_fu_397_p3(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln54_3_fu_313_p2 = ap_const_lv1_0))) then
                    zext_ln55_3_reg_535(4 downto 0) <= zext_ln55_3_fu_325_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln54_1_fu_483_p2 = ap_const_lv1_0))) then
                    zext_ln55_reg_614(4 downto 0) <= zext_ln55_fu_495_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln55_3_reg_535(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_3_reg_545(3 downto 0) <= "0000";
    zext_ln55_reg_614(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state13, icmp_ln54_fu_429_p2, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state22, mst_AWREADY, mst_WREADY, mst_ARREADY, mst_RVALID, mst_BVALID, ap_CS_fsm_state2, grp_KeyExpansion_fu_295_ap_done, ap_CS_fsm_state3, icmp_ln54_3_fu_313_p2, ap_CS_fsm_state5, icmp_ln21_fu_405_p2, ap_CS_fsm_state16, icmp_ln54_2_fu_460_p2, ap_CS_fsm_state23, icmp_ln54_1_fu_483_p2, grp_AES_CTR_xcrypt_buffe_fu_286_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_KeyExpansion_fu_295_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln54_3_fu_313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln21_fu_405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((mst_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if ((not(((mst_RVALID = ap_const_logic_0) and (icmp_ln54_fu_429_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln54_fu_429_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif ((not(((mst_RVALID = ap_const_logic_0) and (icmp_ln54_fu_429_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln54_fu_429_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if ((not(((grp_AES_CTR_xcrypt_buffe_fu_286_ap_done = ap_const_logic_0) or (mst_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln54_2_fu_460_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((mst_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((mst_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((icmp_ln54_1_fu_483_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln21_fu_337_p2 <= std_logic_vector(unsigned(length_read_reg_510) + unsigned(ap_const_lv32_F));
    add_ln55_1_fu_441_p2 <= std_logic_vector(signed(p_cast9_reg_517) + signed(sext_ln55_reg_553));
    add_ln55_fu_414_p2 <= std_logic_vector(signed(sext_ln55_fu_410_p1) + signed(p_cast7_reg_522));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state13_assign_proc : process(icmp_ln54_fu_429_p2, mst_RVALID)
    begin
                ap_block_state13 <= ((mst_RVALID = ap_const_logic_0) and (icmp_ln54_fu_429_p2 = ap_const_lv1_0));
    end process;


    ap_block_state13_ignore_call0_assign_proc : process(icmp_ln54_fu_429_p2, mst_RVALID)
    begin
                ap_block_state13_ignore_call0 <= ((mst_RVALID = ap_const_logic_0) and (icmp_ln54_fu_429_p2 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ctx_Iv_address0_assign_proc : process(ap_CS_fsm_state15, zext_ln55_3_reg_535, ap_CS_fsm_state23, zext_ln55_fu_495_p1, grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_address0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ctx_Iv_address0 <= zext_ln55_fu_495_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_Iv_address0 <= zext_ln55_3_reg_535(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ctx_Iv_address0 <= grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_address0;
        else 
            ctx_Iv_address0 <= "XXXX";
        end if; 
    end process;


    ctx_Iv_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state23, grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_ce0, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ctx_Iv_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ctx_Iv_ce0 <= grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_ce0;
        else 
            ctx_Iv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_Iv_d0_assign_proc : process(iv_q0, ap_CS_fsm_state15, grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_d0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_Iv_d0 <= iv_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ctx_Iv_d0 <= grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_d0;
        else 
            ctx_Iv_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_Iv_we0_assign_proc : process(ap_CS_fsm_state15, grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_Iv_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ctx_Iv_we0 <= grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_we0;
        else 
            ctx_Iv_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state2, grp_AES_CTR_xcrypt_buffe_fu_286_ctx_RoundKey_address0, grp_KeyExpansion_fu_295_RoundKey_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_RoundKey_address0 <= grp_KeyExpansion_fu_295_RoundKey_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ctx_RoundKey_address0 <= grp_AES_CTR_xcrypt_buffe_fu_286_ctx_RoundKey_address0;
        else 
            ctx_RoundKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_RoundKey_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state2, grp_AES_CTR_xcrypt_buffe_fu_286_ctx_RoundKey_ce0, grp_KeyExpansion_fu_295_RoundKey_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_RoundKey_ce0 <= grp_KeyExpansion_fu_295_RoundKey_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ctx_RoundKey_ce0 <= grp_AES_CTR_xcrypt_buffe_fu_286_ctx_RoundKey_ce0;
        else 
            ctx_RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_ce1_assign_proc : process(ap_CS_fsm_state2, grp_KeyExpansion_fu_295_RoundKey_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_RoundKey_ce1 <= grp_KeyExpansion_fu_295_RoundKey_ce1;
        else 
            ctx_RoundKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_we0_assign_proc : process(ap_CS_fsm_state2, grp_KeyExpansion_fu_295_RoundKey_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_RoundKey_we0 <= grp_KeyExpansion_fu_295_RoundKey_we0;
        else 
            ctx_RoundKey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_we1_assign_proc : process(ap_CS_fsm_state2, grp_KeyExpansion_fu_295_RoundKey_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_RoundKey_we1 <= grp_KeyExpansion_fu_295_RoundKey_we1;
        else 
            ctx_RoundKey_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_AES_CTR_xcrypt_buffe_fu_286_ap_start <= grp_AES_CTR_xcrypt_buffe_fu_286_ap_start_reg;
    grp_KeyExpansion_fu_295_ap_start <= grp_KeyExpansion_fu_295_ap_start_reg;
    i_1_fu_319_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_229) + unsigned(ap_const_lv5_1));
    i_2_fu_435_p2 <= std_logic_vector(unsigned(i_0_i_reg_252) + unsigned(ap_const_lv5_1));
    i_3_fu_477_p2 <= std_logic_vector(signed(i_0_reg_240) + signed(ap_const_lv32_10));
    i_4_fu_466_p2 <= std_logic_vector(unsigned(i_0_i1_reg_264) + unsigned(ap_const_lv5_1));
    i_fu_489_p2 <= std_logic_vector(unsigned(i_0_i4_reg_275) + unsigned(ap_const_lv5_1));
    icmp_ln21_fu_405_p2 <= "1" when (i_0_reg_240 = tmp_3_reg_545) else "0";
    icmp_ln54_1_fu_483_p2 <= "1" when (i_0_i4_reg_275 = ap_const_lv5_10) else "0";
    icmp_ln54_2_fu_460_p2 <= "1" when (i_0_i1_reg_264 = ap_const_lv5_10) else "0";
    icmp_ln54_3_fu_313_p2 <= "1" when (i_0_i_i_reg_229 = ap_const_lv5_10) else "0";
    icmp_ln54_fu_429_p2 <= "1" when (i_0_i_reg_252 = ap_const_lv5_10) else "0";

    iv_address0_assign_proc : process(ap_CS_fsm_state3, zext_ln55_3_fu_325_p1, zext_ln55_reg_614, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            iv_address0 <= zext_ln55_reg_614(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            iv_address0 <= zext_ln55_3_fu_325_p1(4 - 1 downto 0);
        else 
            iv_address0 <= "XXXX";
        end if; 
    end process;


    iv_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            iv_ce0 <= ap_const_logic_1;
        else 
            iv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iv_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            iv_we0 <= ap_const_logic_1;
        else 
            iv_we0 <= ap_const_logic_0;
        end if; 
    end process;


    length_r_0_ack_out_assign_proc : process(ap_CS_fsm_state2, grp_KeyExpansion_fu_295_ap_done, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((grp_KeyExpansion_fu_295_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            length_r_0_ack_out <= ap_const_logic_1;
        else 
            length_r_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    mst_ARVALID_assign_proc : process(ap_CS_fsm_state6, mst_ARREADY)
    begin
        if (((mst_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            mst_ARVALID <= ap_const_logic_1;
        else 
            mst_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    mst_AWVALID_assign_proc : process(ap_CS_fsm_state15, mst_AWREADY, grp_AES_CTR_xcrypt_buffe_fu_286_ap_done)
    begin
        if ((not(((grp_AES_CTR_xcrypt_buffe_fu_286_ap_done = ap_const_logic_0) or (mst_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            mst_AWVALID <= ap_const_logic_1;
        else 
            mst_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    mst_BREADY_assign_proc : process(ap_CS_fsm_state22, mst_BVALID)
    begin
        if (((mst_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            mst_BREADY <= ap_const_logic_1;
        else 
            mst_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    mst_RREADY_assign_proc : process(ap_CS_fsm_state13, icmp_ln54_fu_429_p2, mst_RVALID)
    begin
        if ((not(((mst_RVALID = ap_const_logic_0) and (icmp_ln54_fu_429_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln54_fu_429_p2 = ap_const_lv1_0))) then 
            mst_RREADY <= ap_const_logic_1;
        else 
            mst_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    mst_WVALID_assign_proc : process(ap_CS_fsm_state18, mst_WREADY)
    begin
        if (((mst_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            mst_WVALID <= ap_const_logic_1;
        else 
            mst_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mst_blk_n_AR_assign_proc : process(m_axi_mst_ARREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mst_blk_n_AR <= m_axi_mst_ARREADY;
        else 
            mst_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mst_blk_n_AW_assign_proc : process(m_axi_mst_AWREADY, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            mst_blk_n_AW <= m_axi_mst_AWREADY;
        else 
            mst_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mst_blk_n_B_assign_proc : process(m_axi_mst_BVALID, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            mst_blk_n_B <= m_axi_mst_BVALID;
        else 
            mst_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    mst_blk_n_R_assign_proc : process(m_axi_mst_RVALID, ap_CS_fsm_state13, icmp_ln54_fu_429_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln54_fu_429_p2 = ap_const_lv1_0))) then 
            mst_blk_n_R <= m_axi_mst_RVALID;
        else 
            mst_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    mst_blk_n_W_assign_proc : process(m_axi_mst_WREADY, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            mst_blk_n_W <= m_axi_mst_WREADY;
        else 
            mst_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

        p_cast7_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_read_reg_505),33));

        p_cast9_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(out_read_reg_500),33));

    p_lshr_fu_355_p4 <= sub_ln21_fu_350_p2(31 downto 4);
    select_ln21_1_fu_389_p3 <= 
        ap_const_lv28_0 when (tmp_fu_330_p3(0) = '1') else 
        select_ln21_fu_381_p3;
    select_ln21_fu_381_p3 <= 
        sub_ln21_1_fu_365_p2 when (tmp_1_fu_342_p3(0) = '1') else 
        tmp_2_fu_371_p4;
        sext_ln55_1_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln55_fu_414_p2),64));

        sext_ln55_2_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln55_1_fu_441_p2),64));

        sext_ln55_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_reg_240),33));

    sub_ln21_1_fu_365_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(p_lshr_fu_355_p4));
    sub_ln21_fu_350_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFF1) - signed(length_read_reg_510));

    text_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_address0, ap_CS_fsm_state14, zext_ln55_1_fu_455_p1, zext_ln55_2_fu_472_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            text_address0 <= zext_ln55_2_fu_472_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            text_address0 <= zext_ln55_1_fu_455_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            text_address0 <= grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_address0;
        else 
            text_address0 <= "XXXX";
        end if; 
    end process;


    text_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_ce0, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            text_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            text_ce0 <= grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_ce0;
        else 
            text_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    text_d0_assign_proc : process(ap_CS_fsm_state15, mst_addr_read_reg_572, grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_d0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            text_d0 <= mst_addr_read_reg_572;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            text_d0 <= grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_d0;
        else 
            text_d0 <= "XXXXXXXX";
        end if; 
    end process;


    text_we0_assign_proc : process(ap_CS_fsm_state15, grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            text_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            text_we0 <= grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_we0;
        else 
            text_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_342_p3 <= add_ln21_fu_337_p2(31 downto 31);
    tmp_2_fu_371_p4 <= add_ln21_fu_337_p2(31 downto 4);
    tmp_3_fu_397_p3 <= (select_ln21_1_fu_389_p3 & ap_const_lv4_0);
    tmp_fu_330_p3 <= length_read_reg_510(31 downto 31);
    zext_ln55_1_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_252),64));
    zext_ln55_2_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i1_reg_264),64));
    zext_ln55_3_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_229),64));
    zext_ln55_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i4_reg_275),64));
end behav;
