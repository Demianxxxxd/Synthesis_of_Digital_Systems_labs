// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _aes_ha_HH_
#define _aes_ha_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "AES_CTR_xcrypt_buffe.h"
#include "KeyExpansion.h"
#include "aes_ha_ctx_RoundKey.h"
#include "AES_CTR_xcrypt_buffe_buffer.h"
#include "aes_ha_slv_s_axi.h"
#include "aes_ha_mst_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_MST_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_MST_ID_WIDTH = 1,
         unsigned int C_M_AXI_MST_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_MST_DATA_WIDTH = 32,
         unsigned int C_M_AXI_MST_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_MST_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_MST_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_MST_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_SLV_ADDR_WIDTH = 7,
         unsigned int C_S_AXI_SLV_DATA_WIDTH = 32>
struct aes_ha : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_mst_AWVALID;
    sc_in< sc_logic > m_axi_mst_AWREADY;
    sc_out< sc_uint<C_M_AXI_MST_ADDR_WIDTH> > m_axi_mst_AWADDR;
    sc_out< sc_uint<C_M_AXI_MST_ID_WIDTH> > m_axi_mst_AWID;
    sc_out< sc_lv<8> > m_axi_mst_AWLEN;
    sc_out< sc_lv<3> > m_axi_mst_AWSIZE;
    sc_out< sc_lv<2> > m_axi_mst_AWBURST;
    sc_out< sc_lv<2> > m_axi_mst_AWLOCK;
    sc_out< sc_lv<4> > m_axi_mst_AWCACHE;
    sc_out< sc_lv<3> > m_axi_mst_AWPROT;
    sc_out< sc_lv<4> > m_axi_mst_AWQOS;
    sc_out< sc_lv<4> > m_axi_mst_AWREGION;
    sc_out< sc_uint<C_M_AXI_MST_AWUSER_WIDTH> > m_axi_mst_AWUSER;
    sc_out< sc_logic > m_axi_mst_WVALID;
    sc_in< sc_logic > m_axi_mst_WREADY;
    sc_out< sc_uint<C_M_AXI_MST_DATA_WIDTH> > m_axi_mst_WDATA;
    sc_out< sc_uint<C_M_AXI_MST_DATA_WIDTH/8> > m_axi_mst_WSTRB;
    sc_out< sc_logic > m_axi_mst_WLAST;
    sc_out< sc_uint<C_M_AXI_MST_ID_WIDTH> > m_axi_mst_WID;
    sc_out< sc_uint<C_M_AXI_MST_WUSER_WIDTH> > m_axi_mst_WUSER;
    sc_out< sc_logic > m_axi_mst_ARVALID;
    sc_in< sc_logic > m_axi_mst_ARREADY;
    sc_out< sc_uint<C_M_AXI_MST_ADDR_WIDTH> > m_axi_mst_ARADDR;
    sc_out< sc_uint<C_M_AXI_MST_ID_WIDTH> > m_axi_mst_ARID;
    sc_out< sc_lv<8> > m_axi_mst_ARLEN;
    sc_out< sc_lv<3> > m_axi_mst_ARSIZE;
    sc_out< sc_lv<2> > m_axi_mst_ARBURST;
    sc_out< sc_lv<2> > m_axi_mst_ARLOCK;
    sc_out< sc_lv<4> > m_axi_mst_ARCACHE;
    sc_out< sc_lv<3> > m_axi_mst_ARPROT;
    sc_out< sc_lv<4> > m_axi_mst_ARQOS;
    sc_out< sc_lv<4> > m_axi_mst_ARREGION;
    sc_out< sc_uint<C_M_AXI_MST_ARUSER_WIDTH> > m_axi_mst_ARUSER;
    sc_in< sc_logic > m_axi_mst_RVALID;
    sc_out< sc_logic > m_axi_mst_RREADY;
    sc_in< sc_uint<C_M_AXI_MST_DATA_WIDTH> > m_axi_mst_RDATA;
    sc_in< sc_logic > m_axi_mst_RLAST;
    sc_in< sc_uint<C_M_AXI_MST_ID_WIDTH> > m_axi_mst_RID;
    sc_in< sc_uint<C_M_AXI_MST_RUSER_WIDTH> > m_axi_mst_RUSER;
    sc_in< sc_lv<2> > m_axi_mst_RRESP;
    sc_in< sc_logic > m_axi_mst_BVALID;
    sc_out< sc_logic > m_axi_mst_BREADY;
    sc_in< sc_lv<2> > m_axi_mst_BRESP;
    sc_in< sc_uint<C_M_AXI_MST_ID_WIDTH> > m_axi_mst_BID;
    sc_in< sc_uint<C_M_AXI_MST_BUSER_WIDTH> > m_axi_mst_BUSER;
    sc_in< sc_logic > s_axi_slv_AWVALID;
    sc_out< sc_logic > s_axi_slv_AWREADY;
    sc_in< sc_uint<C_S_AXI_SLV_ADDR_WIDTH> > s_axi_slv_AWADDR;
    sc_in< sc_logic > s_axi_slv_WVALID;
    sc_out< sc_logic > s_axi_slv_WREADY;
    sc_in< sc_uint<C_S_AXI_SLV_DATA_WIDTH> > s_axi_slv_WDATA;
    sc_in< sc_uint<C_S_AXI_SLV_DATA_WIDTH/8> > s_axi_slv_WSTRB;
    sc_in< sc_logic > s_axi_slv_ARVALID;
    sc_out< sc_logic > s_axi_slv_ARREADY;
    sc_in< sc_uint<C_S_AXI_SLV_ADDR_WIDTH> > s_axi_slv_ARADDR;
    sc_out< sc_logic > s_axi_slv_RVALID;
    sc_in< sc_logic > s_axi_slv_RREADY;
    sc_out< sc_uint<C_S_AXI_SLV_DATA_WIDTH> > s_axi_slv_RDATA;
    sc_out< sc_lv<2> > s_axi_slv_RRESP;
    sc_out< sc_logic > s_axi_slv_BVALID;
    sc_in< sc_logic > s_axi_slv_BREADY;
    sc_out< sc_lv<2> > s_axi_slv_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<1> > ap_var_for_const7;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const5;


    // Module declarations
    aes_ha(sc_module_name name);
    SC_HAS_PROCESS(aes_ha);

    ~aes_ha();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    aes_ha_slv_s_axi<C_S_AXI_SLV_ADDR_WIDTH,C_S_AXI_SLV_DATA_WIDTH>* aes_ha_slv_s_axi_U;
    aes_ha_mst_m_axi<0,8,32,5,16,16,16,16,C_M_AXI_MST_ID_WIDTH,C_M_AXI_MST_ADDR_WIDTH,C_M_AXI_MST_DATA_WIDTH,C_M_AXI_MST_AWUSER_WIDTH,C_M_AXI_MST_ARUSER_WIDTH,C_M_AXI_MST_WUSER_WIDTH,C_M_AXI_MST_RUSER_WIDTH,C_M_AXI_MST_BUSER_WIDTH,C_M_AXI_MST_USER_VALUE,C_M_AXI_MST_PROT_VALUE,C_M_AXI_MST_CACHE_VALUE>* aes_ha_mst_m_axi_U;
    aes_ha_ctx_RoundKey* ctx_RoundKey_U;
    AES_CTR_xcrypt_buffe_buffer* ctx_Iv_U;
    AES_CTR_xcrypt_buffe_buffer* text_U;
    AES_CTR_xcrypt_buffe* grp_AES_CTR_xcrypt_buffe_fu_286;
    KeyExpansion* grp_KeyExpansion_fu_295;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<25> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<8> > key_q0;
    sc_signal< sc_lv<4> > iv_address0;
    sc_signal< sc_logic > iv_ce0;
    sc_signal< sc_logic > iv_we0;
    sc_signal< sc_lv<8> > iv_q0;
    sc_signal< sc_lv<32> > in_r;
    sc_signal< sc_lv<32> > out_r;
    sc_signal< sc_lv<32> > length_r;
    sc_signal< sc_lv<32> > length_r_0_data_reg;
    sc_signal< sc_logic > length_r_0_vld_reg;
    sc_signal< sc_logic > length_r_0_ack_out;
    sc_signal< sc_logic > mst_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > mst_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<1> > icmp_ln54_fu_429_p2;
    sc_signal< sc_logic > mst_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > mst_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_state18;
    sc_signal< sc_logic > mst_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state22;
    sc_signal< sc_logic > mst_AWVALID;
    sc_signal< sc_logic > mst_AWREADY;
    sc_signal< sc_logic > mst_WVALID;
    sc_signal< sc_logic > mst_WREADY;
    sc_signal< sc_logic > mst_ARVALID;
    sc_signal< sc_logic > mst_ARREADY;
    sc_signal< sc_logic > mst_RVALID;
    sc_signal< sc_logic > mst_RREADY;
    sc_signal< sc_lv<8> > mst_RDATA;
    sc_signal< sc_logic > mst_RLAST;
    sc_signal< sc_lv<1> > mst_RID;
    sc_signal< sc_lv<1> > mst_RUSER;
    sc_signal< sc_lv<2> > mst_RRESP;
    sc_signal< sc_logic > mst_BVALID;
    sc_signal< sc_logic > mst_BREADY;
    sc_signal< sc_lv<2> > mst_BRESP;
    sc_signal< sc_lv<1> > mst_BID;
    sc_signal< sc_lv<1> > mst_BUSER;
    sc_signal< sc_lv<32> > out_read_reg_500;
    sc_signal< sc_lv<32> > in_read_reg_505;
    sc_signal< sc_lv<32> > length_read_reg_510;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > grp_KeyExpansion_fu_295_ap_ready;
    sc_signal< sc_logic > grp_KeyExpansion_fu_295_ap_done;
    sc_signal< sc_lv<33> > p_cast9_fu_307_p1;
    sc_signal< sc_lv<33> > p_cast9_reg_517;
    sc_signal< sc_lv<33> > p_cast7_fu_310_p1;
    sc_signal< sc_lv<33> > p_cast7_reg_522;
    sc_signal< sc_lv<5> > i_1_fu_319_p2;
    sc_signal< sc_lv<5> > i_1_reg_530;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > zext_ln55_3_fu_325_p1;
    sc_signal< sc_lv<64> > zext_ln55_3_reg_535;
    sc_signal< sc_lv<1> > icmp_ln54_3_fu_313_p2;
    sc_signal< sc_lv<32> > tmp_3_fu_397_p3;
    sc_signal< sc_lv<32> > tmp_3_reg_545;
    sc_signal< sc_lv<33> > sext_ln55_fu_410_p1;
    sc_signal< sc_lv<33> > sext_ln55_reg_553;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln21_fu_405_p2;
    sc_signal< sc_lv<32> > mst_addr_reg_558;
    sc_signal< sc_lv<5> > i_2_fu_435_p2;
    sc_signal< sc_lv<5> > i_2_reg_567;
    sc_signal< bool > ap_block_state13;
    sc_signal< sc_lv<8> > mst_addr_read_reg_572;
    sc_signal< sc_lv<32> > mst_addr_1_reg_577;
    sc_signal< sc_lv<5> > i_4_fu_466_p2;
    sc_signal< sc_lv<5> > i_4_reg_586;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_lv<1> > icmp_ln54_2_fu_460_p2;
    sc_signal< sc_lv<32> > i_3_fu_477_p2;
    sc_signal< sc_lv<32> > i_3_reg_596;
    sc_signal< sc_lv<8> > text_q0;
    sc_signal< sc_lv<8> > text_load_reg_601;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_lv<5> > i_fu_489_p2;
    sc_signal< sc_lv<5> > i_reg_609;
    sc_signal< sc_logic > ap_CS_fsm_state23;
    sc_signal< sc_lv<64> > zext_ln55_fu_495_p1;
    sc_signal< sc_lv<64> > zext_ln55_reg_614;
    sc_signal< sc_lv<1> > icmp_ln54_1_fu_483_p2;
    sc_signal< sc_lv<8> > ctx_RoundKey_address0;
    sc_signal< sc_logic > ctx_RoundKey_ce0;
    sc_signal< sc_logic > ctx_RoundKey_we0;
    sc_signal< sc_lv<8> > ctx_RoundKey_q0;
    sc_signal< sc_logic > ctx_RoundKey_ce1;
    sc_signal< sc_logic > ctx_RoundKey_we1;
    sc_signal< sc_lv<8> > ctx_RoundKey_q1;
    sc_signal< sc_lv<4> > ctx_Iv_address0;
    sc_signal< sc_logic > ctx_Iv_ce0;
    sc_signal< sc_logic > ctx_Iv_we0;
    sc_signal< sc_lv<8> > ctx_Iv_d0;
    sc_signal< sc_lv<8> > ctx_Iv_q0;
    sc_signal< sc_lv<4> > text_address0;
    sc_signal< sc_logic > text_ce0;
    sc_signal< sc_logic > text_we0;
    sc_signal< sc_lv<8> > text_d0;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_286_ap_start;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_286_ap_done;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_286_ap_idle;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_286_ap_ready;
    sc_signal< sc_lv<8> > grp_AES_CTR_xcrypt_buffe_fu_286_ctx_RoundKey_address0;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_286_ctx_RoundKey_ce0;
    sc_signal< sc_lv<4> > grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_address0;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_ce0;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_we0;
    sc_signal< sc_lv<8> > grp_AES_CTR_xcrypt_buffe_fu_286_ctx_Iv_d0;
    sc_signal< sc_lv<4> > grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_address0;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_ce0;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_we0;
    sc_signal< sc_lv<8> > grp_AES_CTR_xcrypt_buffe_fu_286_buf_r_d0;
    sc_signal< sc_logic > grp_KeyExpansion_fu_295_ap_start;
    sc_signal< sc_logic > grp_KeyExpansion_fu_295_ap_idle;
    sc_signal< sc_lv<8> > grp_KeyExpansion_fu_295_RoundKey_address0;
    sc_signal< sc_logic > grp_KeyExpansion_fu_295_RoundKey_ce0;
    sc_signal< sc_logic > grp_KeyExpansion_fu_295_RoundKey_we0;
    sc_signal< sc_lv<8> > grp_KeyExpansion_fu_295_RoundKey_d0;
    sc_signal< sc_lv<8> > grp_KeyExpansion_fu_295_RoundKey_address1;
    sc_signal< sc_logic > grp_KeyExpansion_fu_295_RoundKey_ce1;
    sc_signal< sc_logic > grp_KeyExpansion_fu_295_RoundKey_we1;
    sc_signal< sc_lv<8> > grp_KeyExpansion_fu_295_RoundKey_d1;
    sc_signal< sc_lv<4> > grp_KeyExpansion_fu_295_Key_address0;
    sc_signal< sc_logic > grp_KeyExpansion_fu_295_Key_ce0;
    sc_signal< sc_lv<5> > i_0_i_i_reg_229;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > i_0_reg_240;
    sc_signal< sc_lv<5> > i_0_i_reg_252;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<5> > i_0_i1_reg_264;
    sc_signal< sc_lv<5> > i_0_i4_reg_275;
    sc_signal< sc_logic > ap_CS_fsm_state24;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_286_ap_start_reg;
    sc_signal< bool > ap_block_state13_ignore_call0;
    sc_signal< sc_logic > grp_KeyExpansion_fu_295_ap_start_reg;
    sc_signal< sc_lv<64> > zext_ln55_1_fu_455_p1;
    sc_signal< sc_lv<64> > zext_ln55_2_fu_472_p1;
    sc_signal< sc_lv<64> > sext_ln55_1_fu_419_p1;
    sc_signal< sc_lv<64> > sext_ln55_2_fu_445_p1;
    sc_signal< sc_lv<32> > add_ln21_fu_337_p2;
    sc_signal< sc_lv<32> > sub_ln21_fu_350_p2;
    sc_signal< sc_lv<28> > p_lshr_fu_355_p4;
    sc_signal< sc_lv<1> > tmp_1_fu_342_p3;
    sc_signal< sc_lv<28> > sub_ln21_1_fu_365_p2;
    sc_signal< sc_lv<28> > tmp_2_fu_371_p4;
    sc_signal< sc_lv<1> > tmp_fu_330_p3;
    sc_signal< sc_lv<28> > select_ln21_fu_381_p3;
    sc_signal< sc_lv<28> > select_ln21_1_fu_389_p3;
    sc_signal< sc_lv<33> > add_ln55_fu_414_p2;
    sc_signal< sc_lv<33> > add_ln55_1_fu_441_p2;
    sc_signal< sc_logic > ap_CS_fsm_state25;
    sc_signal< sc_lv<25> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<25> ap_ST_fsm_state1;
    static const sc_lv<25> ap_ST_fsm_state2;
    static const sc_lv<25> ap_ST_fsm_state3;
    static const sc_lv<25> ap_ST_fsm_state4;
    static const sc_lv<25> ap_ST_fsm_state5;
    static const sc_lv<25> ap_ST_fsm_state6;
    static const sc_lv<25> ap_ST_fsm_state7;
    static const sc_lv<25> ap_ST_fsm_state8;
    static const sc_lv<25> ap_ST_fsm_state9;
    static const sc_lv<25> ap_ST_fsm_state10;
    static const sc_lv<25> ap_ST_fsm_state11;
    static const sc_lv<25> ap_ST_fsm_state12;
    static const sc_lv<25> ap_ST_fsm_state13;
    static const sc_lv<25> ap_ST_fsm_state14;
    static const sc_lv<25> ap_ST_fsm_state15;
    static const sc_lv<25> ap_ST_fsm_state16;
    static const sc_lv<25> ap_ST_fsm_state17;
    static const sc_lv<25> ap_ST_fsm_state18;
    static const sc_lv<25> ap_ST_fsm_state19;
    static const sc_lv<25> ap_ST_fsm_state20;
    static const sc_lv<25> ap_ST_fsm_state21;
    static const sc_lv<25> ap_ST_fsm_state22;
    static const sc_lv<25> ap_ST_fsm_state23;
    static const sc_lv<25> ap_ST_fsm_state24;
    static const sc_lv<25> ap_ST_fsm_state25;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_15;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_MST_USER_VALUE;
    static const int C_M_AXI_MST_PROT_VALUE;
    static const int C_M_AXI_MST_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_FFFFFFF1;
    static const sc_lv<28> ap_const_lv28_0;
    static const sc_lv<32> ap_const_lv32_18;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_clk_no_reset_();
    void thread_add_ln21_fu_337_p2();
    void thread_add_ln55_1_fu_441_p2();
    void thread_add_ln55_fu_414_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state18();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state22();
    void thread_ap_CS_fsm_state23();
    void thread_ap_CS_fsm_state24();
    void thread_ap_CS_fsm_state25();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_state13();
    void thread_ap_block_state13_ignore_call0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ctx_Iv_address0();
    void thread_ctx_Iv_ce0();
    void thread_ctx_Iv_d0();
    void thread_ctx_Iv_we0();
    void thread_ctx_RoundKey_address0();
    void thread_ctx_RoundKey_ce0();
    void thread_ctx_RoundKey_ce1();
    void thread_ctx_RoundKey_we0();
    void thread_ctx_RoundKey_we1();
    void thread_grp_AES_CTR_xcrypt_buffe_fu_286_ap_start();
    void thread_grp_KeyExpansion_fu_295_ap_start();
    void thread_i_1_fu_319_p2();
    void thread_i_2_fu_435_p2();
    void thread_i_3_fu_477_p2();
    void thread_i_4_fu_466_p2();
    void thread_i_fu_489_p2();
    void thread_icmp_ln21_fu_405_p2();
    void thread_icmp_ln54_1_fu_483_p2();
    void thread_icmp_ln54_2_fu_460_p2();
    void thread_icmp_ln54_3_fu_313_p2();
    void thread_icmp_ln54_fu_429_p2();
    void thread_iv_address0();
    void thread_iv_ce0();
    void thread_iv_we0();
    void thread_length_r_0_ack_out();
    void thread_mst_ARVALID();
    void thread_mst_AWVALID();
    void thread_mst_BREADY();
    void thread_mst_RREADY();
    void thread_mst_WVALID();
    void thread_mst_blk_n_AR();
    void thread_mst_blk_n_AW();
    void thread_mst_blk_n_B();
    void thread_mst_blk_n_R();
    void thread_mst_blk_n_W();
    void thread_p_cast7_fu_310_p1();
    void thread_p_cast9_fu_307_p1();
    void thread_p_lshr_fu_355_p4();
    void thread_select_ln21_1_fu_389_p3();
    void thread_select_ln21_fu_381_p3();
    void thread_sext_ln55_1_fu_419_p1();
    void thread_sext_ln55_2_fu_445_p1();
    void thread_sext_ln55_fu_410_p1();
    void thread_sub_ln21_1_fu_365_p2();
    void thread_sub_ln21_fu_350_p2();
    void thread_text_address0();
    void thread_text_ce0();
    void thread_text_d0();
    void thread_text_we0();
    void thread_tmp_1_fu_342_p3();
    void thread_tmp_2_fu_371_p4();
    void thread_tmp_3_fu_397_p3();
    void thread_tmp_fu_330_p3();
    void thread_zext_ln55_1_fu_455_p1();
    void thread_zext_ln55_2_fu_472_p1();
    void thread_zext_ln55_3_fu_325_p1();
    void thread_zext_ln55_fu_495_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
