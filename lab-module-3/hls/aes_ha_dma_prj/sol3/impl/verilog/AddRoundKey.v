// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AddRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        round,
        state_0_0_read,
        state_0_1_read,
        state_0_2_read,
        state_0_3_read,
        state_1_0_read,
        state_1_1_read,
        state_1_2_read,
        state_1_3_read,
        state_2_0_read,
        state_2_1_read,
        state_2_2_read,
        state_2_3_read,
        state_3_0_read,
        state_3_1_read,
        state_3_2_read,
        state_3_3_read,
        RoundKey_address0,
        RoundKey_ce0,
        RoundKey_q0,
        RoundKey_address1,
        RoundKey_ce1,
        RoundKey_q1,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] round;
input  [7:0] state_0_0_read;
input  [7:0] state_0_1_read;
input  [7:0] state_0_2_read;
input  [7:0] state_0_3_read;
input  [7:0] state_1_0_read;
input  [7:0] state_1_1_read;
input  [7:0] state_1_2_read;
input  [7:0] state_1_3_read;
input  [7:0] state_2_0_read;
input  [7:0] state_2_1_read;
input  [7:0] state_2_2_read;
input  [7:0] state_2_3_read;
input  [7:0] state_3_0_read;
input  [7:0] state_3_1_read;
input  [7:0] state_3_2_read;
input  [7:0] state_3_3_read;
output  [7:0] RoundKey_address0;
output   RoundKey_ce0;
input  [7:0] RoundKey_q0;
output  [7:0] RoundKey_address1;
output   RoundKey_ce1;
input  [7:0] RoundKey_q1;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] RoundKey_address0;
reg RoundKey_ce0;
reg[7:0] RoundKey_address1;
reg RoundKey_ce1;
reg[7:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;
reg[7:0] ap_return_3;
reg[7:0] ap_return_4;
reg[7:0] ap_return_5;
reg[7:0] ap_return_6;
reg[7:0] ap_return_7;
reg[7:0] ap_return_8;
reg[7:0] ap_return_9;
reg[7:0] ap_return_10;
reg[7:0] ap_return_11;
reg[7:0] ap_return_12;
reg[7:0] ap_return_13;
reg[7:0] ap_return_14;
reg[7:0] ap_return_15;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] shl_ln_fu_321_p3;
reg   [7:0] shl_ln_reg_663;
reg   [7:0] RoundKey_load_reg_691;
wire    ap_CS_fsm_state2;
reg   [7:0] RoundKey_load_1_reg_696;
reg   [7:0] RoundKey_load_2_reg_711;
wire    ap_CS_fsm_state3;
reg   [7:0] RoundKey_load_3_reg_716;
reg   [7:0] RoundKey_load_4_reg_731;
wire    ap_CS_fsm_state4;
reg   [7:0] RoundKey_load_5_reg_736;
reg   [7:0] RoundKey_load_6_reg_751;
wire    ap_CS_fsm_state5;
reg   [7:0] RoundKey_load_7_reg_756;
reg   [7:0] RoundKey_load_8_reg_771;
wire    ap_CS_fsm_state6;
reg   [7:0] RoundKey_load_9_reg_776;
reg   [7:0] RoundKey_load_10_reg_791;
wire    ap_CS_fsm_state7;
reg   [7:0] RoundKey_load_11_reg_796;
reg   [7:0] RoundKey_load_12_reg_811;
wire    ap_CS_fsm_state8;
reg   [7:0] RoundKey_load_13_reg_816;
wire   [63:0] zext_ln274_fu_329_p1;
wire   [63:0] zext_ln274_1_fu_340_p1;
wire   [63:0] zext_ln274_2_fu_350_p1;
wire   [63:0] zext_ln274_3_fu_360_p1;
wire   [63:0] zext_ln274_4_fu_370_p1;
wire   [63:0] zext_ln274_5_fu_380_p1;
wire   [63:0] zext_ln274_6_fu_390_p1;
wire   [63:0] zext_ln274_7_fu_400_p1;
wire   [63:0] zext_ln274_8_fu_410_p1;
wire   [63:0] zext_ln274_9_fu_420_p1;
wire   [63:0] zext_ln274_10_fu_430_p1;
wire   [63:0] zext_ln274_11_fu_440_p1;
wire   [63:0] zext_ln274_12_fu_450_p1;
wire   [63:0] zext_ln274_13_fu_460_p1;
wire   [63:0] zext_ln274_14_fu_470_p1;
wire   [63:0] zext_ln274_15_fu_480_p1;
wire    ap_CS_fsm_state9;
wire   [3:0] trunc_ln274_fu_317_p1;
wire   [7:0] or_ln274_fu_334_p2;
wire   [7:0] or_ln274_1_fu_345_p2;
wire   [7:0] or_ln274_2_fu_355_p2;
wire   [7:0] or_ln274_3_fu_365_p2;
wire   [7:0] or_ln274_4_fu_375_p2;
wire   [7:0] or_ln274_5_fu_385_p2;
wire   [7:0] or_ln274_6_fu_395_p2;
wire   [7:0] or_ln274_7_fu_405_p2;
wire   [7:0] or_ln274_8_fu_415_p2;
wire   [7:0] or_ln274_9_fu_425_p2;
wire   [7:0] or_ln274_10_fu_435_p2;
wire   [7:0] or_ln274_11_fu_445_p2;
wire   [7:0] or_ln274_12_fu_455_p2;
wire   [7:0] or_ln274_13_fu_465_p2;
wire   [7:0] or_ln274_14_fu_475_p2;
wire   [7:0] xor_ln274_fu_485_p2;
wire   [7:0] xor_ln274_1_fu_490_p2;
wire   [7:0] xor_ln274_2_fu_495_p2;
wire   [7:0] xor_ln274_3_fu_500_p2;
wire   [7:0] xor_ln274_4_fu_505_p2;
wire   [7:0] xor_ln274_5_fu_510_p2;
wire   [7:0] xor_ln274_6_fu_515_p2;
wire   [7:0] xor_ln274_7_fu_520_p2;
wire   [7:0] xor_ln274_8_fu_525_p2;
wire   [7:0] xor_ln274_9_fu_530_p2;
wire   [7:0] xor_ln274_10_fu_535_p2;
wire   [7:0] xor_ln274_11_fu_540_p2;
wire   [7:0] xor_ln274_12_fu_545_p2;
wire   [7:0] xor_ln274_13_fu_550_p2;
wire   [7:0] xor_ln274_14_fu_555_p2;
wire   [7:0] xor_ln274_15_fu_561_p2;
reg   [7:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [7:0] ap_return_3_preg;
reg   [7:0] ap_return_4_preg;
reg   [7:0] ap_return_5_preg;
reg   [7:0] ap_return_6_preg;
reg   [7:0] ap_return_7_preg;
reg   [7:0] ap_return_8_preg;
reg   [7:0] ap_return_9_preg;
reg   [7:0] ap_return_10_preg;
reg   [7:0] ap_return_11_preg;
reg   [7:0] ap_return_12_preg;
reg   [7:0] ap_return_13_preg;
reg   [7:0] ap_return_14_preg;
reg   [7:0] ap_return_15_preg;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_return_0_preg = 8'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 8'd0;
#0 ap_return_4_preg = 8'd0;
#0 ap_return_5_preg = 8'd0;
#0 ap_return_6_preg = 8'd0;
#0 ap_return_7_preg = 8'd0;
#0 ap_return_8_preg = 8'd0;
#0 ap_return_9_preg = 8'd0;
#0 ap_return_10_preg = 8'd0;
#0 ap_return_11_preg = 8'd0;
#0 ap_return_12_preg = 8'd0;
#0 ap_return_13_preg = 8'd0;
#0 ap_return_14_preg = 8'd0;
#0 ap_return_15_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_0_preg <= xor_ln274_fu_485_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_10_preg <= xor_ln274_10_fu_535_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_11_preg <= xor_ln274_11_fu_540_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_12_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_12_preg <= xor_ln274_12_fu_545_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_13_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_13_preg <= xor_ln274_13_fu_550_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_14_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_14_preg <= xor_ln274_14_fu_555_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_15_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_15_preg <= xor_ln274_15_fu_561_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_1_preg <= xor_ln274_1_fu_490_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_2_preg <= xor_ln274_2_fu_495_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_3_preg <= xor_ln274_3_fu_500_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_4_preg <= xor_ln274_4_fu_505_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_5_preg <= xor_ln274_5_fu_510_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_6_preg <= xor_ln274_6_fu_515_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_7_preg <= xor_ln274_7_fu_520_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_8_preg <= xor_ln274_8_fu_525_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_9_preg <= xor_ln274_9_fu_530_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_load_10_reg_791 <= RoundKey_q0;
        RoundKey_load_11_reg_796 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_load_12_reg_811 <= RoundKey_q0;
        RoundKey_load_13_reg_816 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_load_1_reg_696 <= RoundKey_q1;
        RoundKey_load_reg_691 <= RoundKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_load_2_reg_711 <= RoundKey_q0;
        RoundKey_load_3_reg_716 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_load_4_reg_731 <= RoundKey_q0;
        RoundKey_load_5_reg_736 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        RoundKey_load_6_reg_751 <= RoundKey_q0;
        RoundKey_load_7_reg_756 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_load_8_reg_771 <= RoundKey_q0;
        RoundKey_load_9_reg_776 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        shl_ln_reg_663[7 : 4] <= shl_ln_fu_321_p3[7 : 4];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address0 = zext_ln274_14_fu_470_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_address0 = zext_ln274_12_fu_450_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_address0 = zext_ln274_10_fu_430_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        RoundKey_address0 = zext_ln274_8_fu_410_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address0 = zext_ln274_6_fu_390_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_address0 = zext_ln274_4_fu_370_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_address0 = zext_ln274_2_fu_350_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        RoundKey_address0 = zext_ln274_fu_329_p1;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address1 = zext_ln274_15_fu_480_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_address1 = zext_ln274_13_fu_460_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_address1 = zext_ln274_11_fu_440_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        RoundKey_address1 = zext_ln274_9_fu_420_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address1 = zext_ln274_7_fu_400_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_address1 = zext_ln274_5_fu_380_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_address1 = zext_ln274_3_fu_360_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        RoundKey_address1 = zext_ln274_1_fu_340_p1;
    end else begin
        RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        RoundKey_ce0 = 1'b1;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        RoundKey_ce1 = 1'b1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_0 = xor_ln274_fu_485_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_1 = xor_ln274_1_fu_490_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_10 = xor_ln274_10_fu_535_p2;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_11 = xor_ln274_11_fu_540_p2;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_12 = xor_ln274_12_fu_545_p2;
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_13 = xor_ln274_13_fu_550_p2;
    end else begin
        ap_return_13 = ap_return_13_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_14 = xor_ln274_14_fu_555_p2;
    end else begin
        ap_return_14 = ap_return_14_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_15 = xor_ln274_15_fu_561_p2;
    end else begin
        ap_return_15 = ap_return_15_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_2 = xor_ln274_2_fu_495_p2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_3 = xor_ln274_3_fu_500_p2;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_4 = xor_ln274_4_fu_505_p2;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_5 = xor_ln274_5_fu_510_p2;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_6 = xor_ln274_6_fu_515_p2;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_7 = xor_ln274_7_fu_520_p2;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_8 = xor_ln274_8_fu_525_p2;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_9 = xor_ln274_9_fu_530_p2;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign or_ln274_10_fu_435_p2 = (shl_ln_reg_663 | 8'd11);

assign or_ln274_11_fu_445_p2 = (shl_ln_reg_663 | 8'd12);

assign or_ln274_12_fu_455_p2 = (shl_ln_reg_663 | 8'd13);

assign or_ln274_13_fu_465_p2 = (shl_ln_reg_663 | 8'd14);

assign or_ln274_14_fu_475_p2 = (shl_ln_reg_663 | 8'd15);

assign or_ln274_1_fu_345_p2 = (shl_ln_reg_663 | 8'd2);

assign or_ln274_2_fu_355_p2 = (shl_ln_reg_663 | 8'd3);

assign or_ln274_3_fu_365_p2 = (shl_ln_reg_663 | 8'd4);

assign or_ln274_4_fu_375_p2 = (shl_ln_reg_663 | 8'd5);

assign or_ln274_5_fu_385_p2 = (shl_ln_reg_663 | 8'd6);

assign or_ln274_6_fu_395_p2 = (shl_ln_reg_663 | 8'd7);

assign or_ln274_7_fu_405_p2 = (shl_ln_reg_663 | 8'd8);

assign or_ln274_8_fu_415_p2 = (shl_ln_reg_663 | 8'd9);

assign or_ln274_9_fu_425_p2 = (shl_ln_reg_663 | 8'd10);

assign or_ln274_fu_334_p2 = (shl_ln_fu_321_p3 | 8'd1);

assign shl_ln_fu_321_p3 = {{trunc_ln274_fu_317_p1}, {4'd0}};

assign trunc_ln274_fu_317_p1 = round[3:0];

assign xor_ln274_10_fu_535_p2 = (state_2_2_read ^ RoundKey_load_10_reg_791);

assign xor_ln274_11_fu_540_p2 = (state_2_3_read ^ RoundKey_load_11_reg_796);

assign xor_ln274_12_fu_545_p2 = (state_3_0_read ^ RoundKey_load_12_reg_811);

assign xor_ln274_13_fu_550_p2 = (state_3_1_read ^ RoundKey_load_13_reg_816);

assign xor_ln274_14_fu_555_p2 = (state_3_2_read ^ RoundKey_q0);

assign xor_ln274_15_fu_561_p2 = (state_3_3_read ^ RoundKey_q1);

assign xor_ln274_1_fu_490_p2 = (state_0_1_read ^ RoundKey_load_1_reg_696);

assign xor_ln274_2_fu_495_p2 = (state_0_2_read ^ RoundKey_load_2_reg_711);

assign xor_ln274_3_fu_500_p2 = (state_0_3_read ^ RoundKey_load_3_reg_716);

assign xor_ln274_4_fu_505_p2 = (state_1_0_read ^ RoundKey_load_4_reg_731);

assign xor_ln274_5_fu_510_p2 = (state_1_1_read ^ RoundKey_load_5_reg_736);

assign xor_ln274_6_fu_515_p2 = (state_1_2_read ^ RoundKey_load_6_reg_751);

assign xor_ln274_7_fu_520_p2 = (state_1_3_read ^ RoundKey_load_7_reg_756);

assign xor_ln274_8_fu_525_p2 = (state_2_0_read ^ RoundKey_load_8_reg_771);

assign xor_ln274_9_fu_530_p2 = (state_2_1_read ^ RoundKey_load_9_reg_776);

assign xor_ln274_fu_485_p2 = (state_0_0_read ^ RoundKey_load_reg_691);

assign zext_ln274_10_fu_430_p1 = or_ln274_9_fu_425_p2;

assign zext_ln274_11_fu_440_p1 = or_ln274_10_fu_435_p2;

assign zext_ln274_12_fu_450_p1 = or_ln274_11_fu_445_p2;

assign zext_ln274_13_fu_460_p1 = or_ln274_12_fu_455_p2;

assign zext_ln274_14_fu_470_p1 = or_ln274_13_fu_465_p2;

assign zext_ln274_15_fu_480_p1 = or_ln274_14_fu_475_p2;

assign zext_ln274_1_fu_340_p1 = or_ln274_fu_334_p2;

assign zext_ln274_2_fu_350_p1 = or_ln274_1_fu_345_p2;

assign zext_ln274_3_fu_360_p1 = or_ln274_2_fu_355_p2;

assign zext_ln274_4_fu_370_p1 = or_ln274_3_fu_365_p2;

assign zext_ln274_5_fu_380_p1 = or_ln274_4_fu_375_p2;

assign zext_ln274_6_fu_390_p1 = or_ln274_5_fu_385_p2;

assign zext_ln274_7_fu_400_p1 = or_ln274_6_fu_395_p2;

assign zext_ln274_8_fu_410_p1 = or_ln274_7_fu_405_p2;

assign zext_ln274_9_fu_420_p1 = or_ln274_8_fu_415_p2;

assign zext_ln274_fu_329_p1 = shl_ln_fu_321_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_663[3:0] <= 4'b0000;
end

endmodule //AddRoundKey
