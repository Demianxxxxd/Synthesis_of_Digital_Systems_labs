// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes_ha,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s15-ftgb196-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=0,HLS_SYN_FF=3447,HLS_SYN_LUT=7887,HLS_VERSION=2019_1}" *)

module aes_ha (
        ap_clk,
        ap_rst_n,
        m_axi_mst_AWVALID,
        m_axi_mst_AWREADY,
        m_axi_mst_AWADDR,
        m_axi_mst_AWID,
        m_axi_mst_AWLEN,
        m_axi_mst_AWSIZE,
        m_axi_mst_AWBURST,
        m_axi_mst_AWLOCK,
        m_axi_mst_AWCACHE,
        m_axi_mst_AWPROT,
        m_axi_mst_AWQOS,
        m_axi_mst_AWREGION,
        m_axi_mst_AWUSER,
        m_axi_mst_WVALID,
        m_axi_mst_WREADY,
        m_axi_mst_WDATA,
        m_axi_mst_WSTRB,
        m_axi_mst_WLAST,
        m_axi_mst_WID,
        m_axi_mst_WUSER,
        m_axi_mst_ARVALID,
        m_axi_mst_ARREADY,
        m_axi_mst_ARADDR,
        m_axi_mst_ARID,
        m_axi_mst_ARLEN,
        m_axi_mst_ARSIZE,
        m_axi_mst_ARBURST,
        m_axi_mst_ARLOCK,
        m_axi_mst_ARCACHE,
        m_axi_mst_ARPROT,
        m_axi_mst_ARQOS,
        m_axi_mst_ARREGION,
        m_axi_mst_ARUSER,
        m_axi_mst_RVALID,
        m_axi_mst_RREADY,
        m_axi_mst_RDATA,
        m_axi_mst_RLAST,
        m_axi_mst_RID,
        m_axi_mst_RUSER,
        m_axi_mst_RRESP,
        m_axi_mst_BVALID,
        m_axi_mst_BREADY,
        m_axi_mst_BRESP,
        m_axi_mst_BID,
        m_axi_mst_BUSER,
        s_axi_slv_AWVALID,
        s_axi_slv_AWREADY,
        s_axi_slv_AWADDR,
        s_axi_slv_WVALID,
        s_axi_slv_WREADY,
        s_axi_slv_WDATA,
        s_axi_slv_WSTRB,
        s_axi_slv_ARVALID,
        s_axi_slv_ARREADY,
        s_axi_slv_ARADDR,
        s_axi_slv_RVALID,
        s_axi_slv_RREADY,
        s_axi_slv_RDATA,
        s_axi_slv_RRESP,
        s_axi_slv_BVALID,
        s_axi_slv_BREADY,
        s_axi_slv_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;
parameter    C_S_AXI_SLV_DATA_WIDTH = 32;
parameter    C_S_AXI_SLV_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MST_ID_WIDTH = 1;
parameter    C_M_AXI_MST_ADDR_WIDTH = 32;
parameter    C_M_AXI_MST_DATA_WIDTH = 32;
parameter    C_M_AXI_MST_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MST_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MST_WUSER_WIDTH = 1;
parameter    C_M_AXI_MST_RUSER_WIDTH = 1;
parameter    C_M_AXI_MST_BUSER_WIDTH = 1;
parameter    C_M_AXI_MST_USER_VALUE = 0;
parameter    C_M_AXI_MST_PROT_VALUE = 0;
parameter    C_M_AXI_MST_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_SLV_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MST_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mst_AWVALID;
input   m_axi_mst_AWREADY;
output  [C_M_AXI_MST_ADDR_WIDTH - 1:0] m_axi_mst_AWADDR;
output  [C_M_AXI_MST_ID_WIDTH - 1:0] m_axi_mst_AWID;
output  [7:0] m_axi_mst_AWLEN;
output  [2:0] m_axi_mst_AWSIZE;
output  [1:0] m_axi_mst_AWBURST;
output  [1:0] m_axi_mst_AWLOCK;
output  [3:0] m_axi_mst_AWCACHE;
output  [2:0] m_axi_mst_AWPROT;
output  [3:0] m_axi_mst_AWQOS;
output  [3:0] m_axi_mst_AWREGION;
output  [C_M_AXI_MST_AWUSER_WIDTH - 1:0] m_axi_mst_AWUSER;
output   m_axi_mst_WVALID;
input   m_axi_mst_WREADY;
output  [C_M_AXI_MST_DATA_WIDTH - 1:0] m_axi_mst_WDATA;
output  [C_M_AXI_MST_WSTRB_WIDTH - 1:0] m_axi_mst_WSTRB;
output   m_axi_mst_WLAST;
output  [C_M_AXI_MST_ID_WIDTH - 1:0] m_axi_mst_WID;
output  [C_M_AXI_MST_WUSER_WIDTH - 1:0] m_axi_mst_WUSER;
output   m_axi_mst_ARVALID;
input   m_axi_mst_ARREADY;
output  [C_M_AXI_MST_ADDR_WIDTH - 1:0] m_axi_mst_ARADDR;
output  [C_M_AXI_MST_ID_WIDTH - 1:0] m_axi_mst_ARID;
output  [7:0] m_axi_mst_ARLEN;
output  [2:0] m_axi_mst_ARSIZE;
output  [1:0] m_axi_mst_ARBURST;
output  [1:0] m_axi_mst_ARLOCK;
output  [3:0] m_axi_mst_ARCACHE;
output  [2:0] m_axi_mst_ARPROT;
output  [3:0] m_axi_mst_ARQOS;
output  [3:0] m_axi_mst_ARREGION;
output  [C_M_AXI_MST_ARUSER_WIDTH - 1:0] m_axi_mst_ARUSER;
input   m_axi_mst_RVALID;
output   m_axi_mst_RREADY;
input  [C_M_AXI_MST_DATA_WIDTH - 1:0] m_axi_mst_RDATA;
input   m_axi_mst_RLAST;
input  [C_M_AXI_MST_ID_WIDTH - 1:0] m_axi_mst_RID;
input  [C_M_AXI_MST_RUSER_WIDTH - 1:0] m_axi_mst_RUSER;
input  [1:0] m_axi_mst_RRESP;
input   m_axi_mst_BVALID;
output   m_axi_mst_BREADY;
input  [1:0] m_axi_mst_BRESP;
input  [C_M_AXI_MST_ID_WIDTH - 1:0] m_axi_mst_BID;
input  [C_M_AXI_MST_BUSER_WIDTH - 1:0] m_axi_mst_BUSER;
input   s_axi_slv_AWVALID;
output   s_axi_slv_AWREADY;
input  [C_S_AXI_SLV_ADDR_WIDTH - 1:0] s_axi_slv_AWADDR;
input   s_axi_slv_WVALID;
output   s_axi_slv_WREADY;
input  [C_S_AXI_SLV_DATA_WIDTH - 1:0] s_axi_slv_WDATA;
input  [C_S_AXI_SLV_WSTRB_WIDTH - 1:0] s_axi_slv_WSTRB;
input   s_axi_slv_ARVALID;
output   s_axi_slv_ARREADY;
input  [C_S_AXI_SLV_ADDR_WIDTH - 1:0] s_axi_slv_ARADDR;
output   s_axi_slv_RVALID;
input   s_axi_slv_RREADY;
output  [C_S_AXI_SLV_DATA_WIDTH - 1:0] s_axi_slv_RDATA;
output  [1:0] s_axi_slv_RRESP;
output   s_axi_slv_BVALID;
input   s_axi_slv_BREADY;
output  [1:0] s_axi_slv_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] key_q0;
reg   [3:0] iv_address0;
reg    iv_ce0;
reg    iv_we0;
wire   [7:0] iv_q0;
wire   [31:0] in_r;
wire   [31:0] out_r;
wire   [31:0] length_r;
reg   [31:0] length_r_0_data_reg;
reg    length_r_0_vld_reg;
reg    length_r_0_ack_out;
reg    mst_blk_n_AR;
wire    ap_CS_fsm_state6;
reg    mst_blk_n_R;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln54_fu_427_p2;
reg    mst_blk_n_AW;
wire    ap_CS_fsm_state15;
reg    mst_blk_n_W;
wire    ap_CS_fsm_state18;
reg    mst_blk_n_B;
wire    ap_CS_fsm_state22;
reg    mst_AWVALID;
wire    mst_AWREADY;
reg    mst_WVALID;
wire    mst_WREADY;
reg    mst_ARVALID;
wire    mst_ARREADY;
wire    mst_RVALID;
reg    mst_RREADY;
wire   [7:0] mst_RDATA;
wire    mst_RLAST;
wire   [0:0] mst_RID;
wire   [0:0] mst_RUSER;
wire   [1:0] mst_RRESP;
wire    mst_BVALID;
reg    mst_BREADY;
wire   [1:0] mst_BRESP;
wire   [0:0] mst_BID;
wire   [0:0] mst_BUSER;
reg   [31:0] out_read_reg_498;
reg   [31:0] in_read_reg_503;
reg   [31:0] length_read_reg_508;
wire    ap_CS_fsm_state2;
wire    grp_KeyExpansion_fu_286_ap_ready;
wire    grp_KeyExpansion_fu_286_ap_done;
wire  signed [32:0] p_cast9_fu_305_p1;
reg  signed [32:0] p_cast9_reg_515;
wire  signed [32:0] p_cast7_fu_308_p1;
reg  signed [32:0] p_cast7_reg_520;
wire   [4:0] i_1_fu_317_p2;
reg   [4:0] i_1_reg_528;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln55_3_fu_323_p1;
reg   [63:0] zext_ln55_3_reg_533;
wire   [0:0] icmp_ln54_3_fu_311_p2;
wire   [31:0] tmp_3_fu_395_p3;
reg   [31:0] tmp_3_reg_543;
wire  signed [32:0] sext_ln55_fu_408_p1;
reg  signed [32:0] sext_ln55_reg_551;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln21_fu_403_p2;
reg   [31:0] mst_addr_reg_556;
wire   [4:0] i_2_fu_433_p2;
reg   [4:0] i_2_reg_565;
reg    ap_block_state13;
reg   [7:0] mst_addr_read_reg_570;
reg   [31:0] mst_addr_1_reg_575;
wire   [4:0] i_4_fu_464_p2;
reg   [4:0] i_4_reg_584;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln54_2_fu_458_p2;
wire   [31:0] i_3_fu_475_p2;
reg   [31:0] i_3_reg_594;
wire   [7:0] text_q0;
reg   [7:0] text_load_reg_599;
wire    ap_CS_fsm_state17;
wire   [4:0] i_fu_487_p2;
reg   [4:0] i_reg_607;
wire    ap_CS_fsm_state23;
wire   [63:0] zext_ln55_fu_493_p1;
reg   [63:0] zext_ln55_reg_612;
wire   [0:0] icmp_ln54_1_fu_481_p2;
reg   [7:0] ctx_RoundKey_address0;
reg    ctx_RoundKey_ce0;
reg    ctx_RoundKey_we0;
wire   [7:0] ctx_RoundKey_q0;
reg   [7:0] ctx_RoundKey_address1;
reg    ctx_RoundKey_ce1;
reg    ctx_RoundKey_we1;
wire   [7:0] ctx_RoundKey_q1;
reg   [3:0] ctx_Iv_address0;
reg    ctx_Iv_ce0;
reg    ctx_Iv_we0;
reg   [7:0] ctx_Iv_d0;
wire   [7:0] ctx_Iv_q0;
reg    ctx_Iv_ce1;
reg    ctx_Iv_we1;
wire   [7:0] ctx_Iv_q1;
reg   [3:0] text_address0;
reg    text_ce0;
reg    text_we0;
reg   [7:0] text_d0;
wire    grp_KeyExpansion_fu_286_ap_start;
wire    grp_KeyExpansion_fu_286_ap_idle;
wire   [7:0] grp_KeyExpansion_fu_286_RoundKey_address0;
wire    grp_KeyExpansion_fu_286_RoundKey_ce0;
wire    grp_KeyExpansion_fu_286_RoundKey_we0;
wire   [7:0] grp_KeyExpansion_fu_286_RoundKey_d0;
wire   [7:0] grp_KeyExpansion_fu_286_RoundKey_address1;
wire    grp_KeyExpansion_fu_286_RoundKey_ce1;
wire    grp_KeyExpansion_fu_286_RoundKey_we1;
wire   [7:0] grp_KeyExpansion_fu_286_RoundKey_d1;
wire   [3:0] grp_KeyExpansion_fu_286_Key_address0;
wire    grp_KeyExpansion_fu_286_Key_ce0;
wire    grp_AES_CTR_xcrypt_buffe_fu_296_ap_start;
wire    grp_AES_CTR_xcrypt_buffe_fu_296_ap_done;
wire    grp_AES_CTR_xcrypt_buffe_fu_296_ap_idle;
wire    grp_AES_CTR_xcrypt_buffe_fu_296_ap_ready;
wire   [7:0] grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address0;
wire    grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce0;
wire   [7:0] grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address1;
wire    grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce1;
wire   [3:0] grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_address0;
wire    grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce0;
wire    grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we0;
wire   [7:0] grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_d0;
wire   [3:0] grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_address1;
wire    grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce1;
wire    grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we1;
wire   [7:0] grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_d1;
wire   [3:0] grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_address0;
wire    grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_ce0;
wire    grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_we0;
wire   [7:0] grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_d0;
reg   [4:0] i_0_i_i_reg_229;
wire    ap_CS_fsm_state4;
reg  signed [31:0] i_0_reg_240;
reg   [4:0] i_0_i_reg_252;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state14;
reg   [4:0] i_0_i1_reg_264;
reg   [4:0] i_0_i4_reg_275;
wire    ap_CS_fsm_state24;
reg    grp_KeyExpansion_fu_286_ap_start_reg;
reg    grp_AES_CTR_xcrypt_buffe_fu_296_ap_start_reg;
reg    ap_block_state13_ignore_call0;
wire   [63:0] zext_ln55_1_fu_453_p1;
wire   [63:0] zext_ln55_2_fu_470_p1;
wire  signed [63:0] sext_ln55_1_fu_417_p1;
wire  signed [63:0] sext_ln55_2_fu_443_p1;
wire   [31:0] add_ln21_fu_335_p2;
wire   [31:0] sub_ln21_fu_348_p2;
wire   [27:0] p_lshr_fu_353_p4;
wire   [0:0] tmp_1_fu_340_p3;
wire   [27:0] sub_ln21_1_fu_363_p2;
wire   [27:0] tmp_2_fu_369_p4;
wire   [0:0] tmp_fu_328_p3;
wire   [27:0] select_ln21_fu_379_p3;
wire   [27:0] select_ln21_1_fu_387_p3;
wire   [32:0] add_ln55_fu_412_p2;
wire   [32:0] add_ln55_1_fu_439_p2;
wire    ap_CS_fsm_state25;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 length_r_0_data_reg = 32'd0;
#0 length_r_0_vld_reg = 1'b0;
#0 grp_KeyExpansion_fu_286_ap_start_reg = 1'b0;
#0 grp_AES_CTR_xcrypt_buffe_fu_296_ap_start_reg = 1'b0;
end

aes_ha_slv_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_SLV_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_SLV_DATA_WIDTH ))
aes_ha_slv_s_axi_U(
    .AWVALID(s_axi_slv_AWVALID),
    .AWREADY(s_axi_slv_AWREADY),
    .AWADDR(s_axi_slv_AWADDR),
    .WVALID(s_axi_slv_WVALID),
    .WREADY(s_axi_slv_WREADY),
    .WDATA(s_axi_slv_WDATA),
    .WSTRB(s_axi_slv_WSTRB),
    .ARVALID(s_axi_slv_ARVALID),
    .ARREADY(s_axi_slv_ARREADY),
    .ARADDR(s_axi_slv_ARADDR),
    .RVALID(s_axi_slv_RVALID),
    .RREADY(s_axi_slv_RREADY),
    .RDATA(s_axi_slv_RDATA),
    .RRESP(s_axi_slv_RRESP),
    .BVALID(s_axi_slv_BVALID),
    .BREADY(s_axi_slv_BREADY),
    .BRESP(s_axi_slv_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .key_address0(grp_KeyExpansion_fu_286_Key_address0),
    .key_ce0(grp_KeyExpansion_fu_286_Key_ce0),
    .key_q0(key_q0),
    .iv_address0(iv_address0),
    .iv_ce0(iv_ce0),
    .iv_we0(iv_we0),
    .iv_d0(ctx_Iv_q0),
    .iv_q0(iv_q0),
    .in_r(in_r),
    .out_r(out_r),
    .length_r(length_r)
);

aes_ha_mst_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MST_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MST_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MST_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MST_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MST_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MST_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MST_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MST_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MST_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MST_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MST_CACHE_VALUE ))
aes_ha_mst_m_axi_U(
    .AWVALID(m_axi_mst_AWVALID),
    .AWREADY(m_axi_mst_AWREADY),
    .AWADDR(m_axi_mst_AWADDR),
    .AWID(m_axi_mst_AWID),
    .AWLEN(m_axi_mst_AWLEN),
    .AWSIZE(m_axi_mst_AWSIZE),
    .AWBURST(m_axi_mst_AWBURST),
    .AWLOCK(m_axi_mst_AWLOCK),
    .AWCACHE(m_axi_mst_AWCACHE),
    .AWPROT(m_axi_mst_AWPROT),
    .AWQOS(m_axi_mst_AWQOS),
    .AWREGION(m_axi_mst_AWREGION),
    .AWUSER(m_axi_mst_AWUSER),
    .WVALID(m_axi_mst_WVALID),
    .WREADY(m_axi_mst_WREADY),
    .WDATA(m_axi_mst_WDATA),
    .WSTRB(m_axi_mst_WSTRB),
    .WLAST(m_axi_mst_WLAST),
    .WID(m_axi_mst_WID),
    .WUSER(m_axi_mst_WUSER),
    .ARVALID(m_axi_mst_ARVALID),
    .ARREADY(m_axi_mst_ARREADY),
    .ARADDR(m_axi_mst_ARADDR),
    .ARID(m_axi_mst_ARID),
    .ARLEN(m_axi_mst_ARLEN),
    .ARSIZE(m_axi_mst_ARSIZE),
    .ARBURST(m_axi_mst_ARBURST),
    .ARLOCK(m_axi_mst_ARLOCK),
    .ARCACHE(m_axi_mst_ARCACHE),
    .ARPROT(m_axi_mst_ARPROT),
    .ARQOS(m_axi_mst_ARQOS),
    .ARREGION(m_axi_mst_ARREGION),
    .ARUSER(m_axi_mst_ARUSER),
    .RVALID(m_axi_mst_RVALID),
    .RREADY(m_axi_mst_RREADY),
    .RDATA(m_axi_mst_RDATA),
    .RLAST(m_axi_mst_RLAST),
    .RID(m_axi_mst_RID),
    .RUSER(m_axi_mst_RUSER),
    .RRESP(m_axi_mst_RRESP),
    .BVALID(m_axi_mst_BVALID),
    .BREADY(m_axi_mst_BREADY),
    .BRESP(m_axi_mst_BRESP),
    .BID(m_axi_mst_BID),
    .BUSER(m_axi_mst_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(mst_ARVALID),
    .I_ARREADY(mst_ARREADY),
    .I_ARADDR(mst_addr_reg_556),
    .I_ARID(1'd0),
    .I_ARLEN(32'd16),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(mst_RVALID),
    .I_RREADY(mst_RREADY),
    .I_RDATA(mst_RDATA),
    .I_RID(mst_RID),
    .I_RUSER(mst_RUSER),
    .I_RRESP(mst_RRESP),
    .I_RLAST(mst_RLAST),
    .I_AWVALID(mst_AWVALID),
    .I_AWREADY(mst_AWREADY),
    .I_AWADDR(mst_addr_1_reg_575),
    .I_AWID(1'd0),
    .I_AWLEN(32'd16),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(mst_WVALID),
    .I_WREADY(mst_WREADY),
    .I_WDATA(text_load_reg_599),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(mst_BVALID),
    .I_BREADY(mst_BREADY),
    .I_BRESP(mst_BRESP),
    .I_BID(mst_BID),
    .I_BUSER(mst_BUSER)
);

aes_ha_ctx_RoundKey #(
    .DataWidth( 8 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
ctx_RoundKey_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ctx_RoundKey_address0),
    .ce0(ctx_RoundKey_ce0),
    .we0(ctx_RoundKey_we0),
    .d0(grp_KeyExpansion_fu_286_RoundKey_d0),
    .q0(ctx_RoundKey_q0),
    .address1(ctx_RoundKey_address1),
    .ce1(ctx_RoundKey_ce1),
    .we1(ctx_RoundKey_we1),
    .d1(grp_KeyExpansion_fu_286_RoundKey_d1),
    .q1(ctx_RoundKey_q1)
);

AES_CTR_xcrypt_buffe_buffer #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
ctx_Iv_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ctx_Iv_address0),
    .ce0(ctx_Iv_ce0),
    .we0(ctx_Iv_we0),
    .d0(ctx_Iv_d0),
    .q0(ctx_Iv_q0),
    .address1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_address1),
    .ce1(ctx_Iv_ce1),
    .we1(ctx_Iv_we1),
    .d1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_d1),
    .q1(ctx_Iv_q1)
);

aes_ha_text #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
text_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(text_address0),
    .ce0(text_ce0),
    .we0(text_we0),
    .d0(text_d0),
    .q0(text_q0)
);

KeyExpansion grp_KeyExpansion_fu_286(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_KeyExpansion_fu_286_ap_start),
    .ap_done(grp_KeyExpansion_fu_286_ap_done),
    .ap_idle(grp_KeyExpansion_fu_286_ap_idle),
    .ap_ready(grp_KeyExpansion_fu_286_ap_ready),
    .RoundKey_address0(grp_KeyExpansion_fu_286_RoundKey_address0),
    .RoundKey_ce0(grp_KeyExpansion_fu_286_RoundKey_ce0),
    .RoundKey_we0(grp_KeyExpansion_fu_286_RoundKey_we0),
    .RoundKey_d0(grp_KeyExpansion_fu_286_RoundKey_d0),
    .RoundKey_address1(grp_KeyExpansion_fu_286_RoundKey_address1),
    .RoundKey_ce1(grp_KeyExpansion_fu_286_RoundKey_ce1),
    .RoundKey_we1(grp_KeyExpansion_fu_286_RoundKey_we1),
    .RoundKey_d1(grp_KeyExpansion_fu_286_RoundKey_d1),
    .Key_address0(grp_KeyExpansion_fu_286_Key_address0),
    .Key_ce0(grp_KeyExpansion_fu_286_Key_ce0),
    .Key_q0(key_q0)
);

AES_CTR_xcrypt_buffe grp_AES_CTR_xcrypt_buffe_fu_296(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_AES_CTR_xcrypt_buffe_fu_296_ap_start),
    .ap_done(grp_AES_CTR_xcrypt_buffe_fu_296_ap_done),
    .ap_idle(grp_AES_CTR_xcrypt_buffe_fu_296_ap_idle),
    .ap_ready(grp_AES_CTR_xcrypt_buffe_fu_296_ap_ready),
    .ctx_RoundKey_address0(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address0),
    .ctx_RoundKey_ce0(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce0),
    .ctx_RoundKey_q0(ctx_RoundKey_q0),
    .ctx_RoundKey_address1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address1),
    .ctx_RoundKey_ce1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce1),
    .ctx_RoundKey_q1(ctx_RoundKey_q1),
    .ctx_Iv_address0(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_address0),
    .ctx_Iv_ce0(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce0),
    .ctx_Iv_we0(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we0),
    .ctx_Iv_d0(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_d0),
    .ctx_Iv_q0(ctx_Iv_q0),
    .ctx_Iv_address1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_address1),
    .ctx_Iv_ce1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce1),
    .ctx_Iv_we1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we1),
    .ctx_Iv_d1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_d1),
    .ctx_Iv_q1(ctx_Iv_q1),
    .buf_r_address0(grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_address0),
    .buf_r_ce0(grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_ce0),
    .buf_r_we0(grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_we0),
    .buf_r_d0(grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_d0),
    .buf_r_q0(text_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_AES_CTR_xcrypt_buffe_fu_296_ap_start_reg <= 1'b0;
    end else begin
        if ((~((mst_RVALID == 1'b0) & (icmp_ln54_fu_427_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln54_fu_427_p2 == 1'd1))) begin
            grp_AES_CTR_xcrypt_buffe_fu_296_ap_start_reg <= 1'b1;
        end else if ((grp_AES_CTR_xcrypt_buffe_fu_296_ap_ready == 1'b1)) begin
            grp_AES_CTR_xcrypt_buffe_fu_296_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_KeyExpansion_fu_286_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_KeyExpansion_fu_286_ap_start_reg <= 1'b1;
        end else if ((grp_KeyExpansion_fu_286_ap_ready == 1'b1)) begin
            grp_KeyExpansion_fu_286_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((mst_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        i_0_i1_reg_264 <= i_4_reg_584;
    end else if ((~((grp_AES_CTR_xcrypt_buffe_fu_296_ap_done == 1'b0) | (mst_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
        i_0_i1_reg_264 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_403_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_i4_reg_275 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        i_0_i4_reg_275 <= i_reg_607;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i_i_reg_229 <= i_1_reg_528;
    end else if (((grp_KeyExpansion_fu_286_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_i_reg_229 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_0_i_reg_252 <= i_2_reg_565;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i_0_i_reg_252 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_3_fu_311_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_240 <= 32'd0;
    end else if (((mst_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        i_0_reg_240 <= i_3_reg_594;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_528 <= i_1_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((mst_RVALID == 1'b0) & (icmp_ln54_fu_427_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13))) begin
        i_2_reg_565 <= i_2_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_2_fu_458_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        i_3_reg_594 <= i_3_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_4_reg_584 <= i_4_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_reg_607 <= i_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_read_reg_503 <= in_r;
        out_read_reg_498 <= out_r;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_r_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_r_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (length_r_0_vld_reg == 1'b1)))) begin
        length_r_0_data_reg <= length_r;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_KeyExpansion_fu_286_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        length_read_reg_508 <= length_r_0_data_reg;
        p_cast7_reg_520 <= p_cast7_fu_308_p1;
        p_cast9_reg_515 <= p_cast9_fu_305_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((mst_RVALID == 1'b0) & (icmp_ln54_fu_427_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln54_fu_427_p2 == 1'd1))) begin
        mst_addr_1_reg_575 <= sext_ln55_2_fu_443_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((mst_RVALID == 1'b0) & (icmp_ln54_fu_427_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln54_fu_427_p2 == 1'd0))) begin
        mst_addr_read_reg_570 <= mst_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_403_p2 == 1'd0))) begin
        mst_addr_reg_556 <= sext_ln55_1_fu_417_p1;
        sext_ln55_reg_551 <= sext_ln55_fu_408_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        text_load_reg_599 <= text_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_3_fu_311_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_3_reg_543[31 : 4] <= tmp_3_fu_395_p3[31 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln54_3_fu_311_p2 == 1'd0))) begin
        zext_ln55_3_reg_533[4 : 0] <= zext_ln55_3_fu_323_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln54_1_fu_481_p2 == 1'd0))) begin
        zext_ln55_reg_612[4 : 0] <= zext_ln55_fu_493_p1[4 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ctx_Iv_address0 = zext_ln55_fu_493_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_Iv_address0 = zext_ln55_3_reg_533;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        ctx_Iv_address0 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_address0;
    end else begin
        ctx_Iv_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state23))) begin
        ctx_Iv_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        ctx_Iv_ce0 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce0;
    end else begin
        ctx_Iv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ctx_Iv_ce1 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce1;
    end else begin
        ctx_Iv_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_Iv_d0 = iv_q0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        ctx_Iv_d0 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_d0;
    end else begin
        ctx_Iv_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_Iv_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        ctx_Iv_we0 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we0;
    end else begin
        ctx_Iv_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ctx_Iv_we1 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we1;
    end else begin
        ctx_Iv_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ctx_RoundKey_address0 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_address0 = grp_KeyExpansion_fu_286_RoundKey_address0;
    end else begin
        ctx_RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ctx_RoundKey_address1 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_address1 = grp_KeyExpansion_fu_286_RoundKey_address1;
    end else begin
        ctx_RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ctx_RoundKey_ce0 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_ce0 = grp_KeyExpansion_fu_286_RoundKey_ce0;
    end else begin
        ctx_RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ctx_RoundKey_ce1 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_ce1 = grp_KeyExpansion_fu_286_RoundKey_ce1;
    end else begin
        ctx_RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_we0 = grp_KeyExpansion_fu_286_RoundKey_we0;
    end else begin
        ctx_RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_we1 = grp_KeyExpansion_fu_286_RoundKey_we1;
    end else begin
        ctx_RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        iv_address0 = zext_ln55_reg_612;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        iv_address0 = zext_ln55_3_fu_323_p1;
    end else begin
        iv_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state3))) begin
        iv_ce0 = 1'b1;
    end else begin
        iv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        iv_we0 = 1'b1;
    end else begin
        iv_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((grp_KeyExpansion_fu_286_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        length_r_0_ack_out = 1'b1;
    end else begin
        length_r_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((mst_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        mst_ARVALID = 1'b1;
    end else begin
        mst_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((grp_AES_CTR_xcrypt_buffe_fu_296_ap_done == 1'b0) | (mst_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
        mst_AWVALID = 1'b1;
    end else begin
        mst_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((mst_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        mst_BREADY = 1'b1;
    end else begin
        mst_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((mst_RVALID == 1'b0) & (icmp_ln54_fu_427_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln54_fu_427_p2 == 1'd0))) begin
        mst_RREADY = 1'b1;
    end else begin
        mst_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((mst_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        mst_WVALID = 1'b1;
    end else begin
        mst_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mst_blk_n_AR = m_axi_mst_ARREADY;
    end else begin
        mst_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        mst_blk_n_AW = m_axi_mst_AWREADY;
    end else begin
        mst_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        mst_blk_n_B = m_axi_mst_BVALID;
    end else begin
        mst_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln54_fu_427_p2 == 1'd0))) begin
        mst_blk_n_R = m_axi_mst_RVALID;
    end else begin
        mst_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        mst_blk_n_W = m_axi_mst_WREADY;
    end else begin
        mst_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        text_address0 = zext_ln55_2_fu_470_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        text_address0 = zext_ln55_1_fu_453_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        text_address0 = grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_address0;
    end else begin
        text_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16))) begin
        text_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        text_ce0 = grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_ce0;
    end else begin
        text_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        text_d0 = mst_addr_read_reg_570;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        text_d0 = grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_d0;
    end else begin
        text_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        text_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        text_we0 = grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_we0;
    end else begin
        text_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_KeyExpansion_fu_286_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln54_3_fu_311_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln21_fu_403_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((mst_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if ((~((mst_RVALID == 1'b0) & (icmp_ln54_fu_427_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln54_fu_427_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if ((~((mst_RVALID == 1'b0) & (icmp_ln54_fu_427_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln54_fu_427_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state15 : begin
            if ((~((grp_AES_CTR_xcrypt_buffe_fu_296_ap_done == 1'b0) | (mst_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln54_2_fu_458_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((mst_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((mst_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln54_1_fu_481_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_fu_335_p2 = (length_read_reg_508 + 32'd15);

assign add_ln55_1_fu_439_p2 = ($signed(p_cast9_reg_515) + $signed(sext_ln55_reg_551));

assign add_ln55_fu_412_p2 = ($signed(sext_ln55_fu_408_p1) + $signed(p_cast7_reg_520));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state13 = ((mst_RVALID == 1'b0) & (icmp_ln54_fu_427_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state13_ignore_call0 = ((mst_RVALID == 1'b0) & (icmp_ln54_fu_427_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_AES_CTR_xcrypt_buffe_fu_296_ap_start = grp_AES_CTR_xcrypt_buffe_fu_296_ap_start_reg;

assign grp_KeyExpansion_fu_286_ap_start = grp_KeyExpansion_fu_286_ap_start_reg;

assign i_1_fu_317_p2 = (i_0_i_i_reg_229 + 5'd1);

assign i_2_fu_433_p2 = (i_0_i_reg_252 + 5'd1);

assign i_3_fu_475_p2 = ($signed(i_0_reg_240) + $signed(32'd16));

assign i_4_fu_464_p2 = (i_0_i1_reg_264 + 5'd1);

assign i_fu_487_p2 = (i_0_i4_reg_275 + 5'd1);

assign icmp_ln21_fu_403_p2 = ((i_0_reg_240 == tmp_3_reg_543) ? 1'b1 : 1'b0);

assign icmp_ln54_1_fu_481_p2 = ((i_0_i4_reg_275 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln54_2_fu_458_p2 = ((i_0_i1_reg_264 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln54_3_fu_311_p2 = ((i_0_i_i_reg_229 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_427_p2 = ((i_0_i_reg_252 == 5'd16) ? 1'b1 : 1'b0);

assign p_cast7_fu_308_p1 = $signed(in_read_reg_503);

assign p_cast9_fu_305_p1 = $signed(out_read_reg_498);

assign p_lshr_fu_353_p4 = {{sub_ln21_fu_348_p2[31:4]}};

assign select_ln21_1_fu_387_p3 = ((tmp_fu_328_p3[0:0] === 1'b1) ? 28'd0 : select_ln21_fu_379_p3);

assign select_ln21_fu_379_p3 = ((tmp_1_fu_340_p3[0:0] === 1'b1) ? sub_ln21_1_fu_363_p2 : tmp_2_fu_369_p4);

assign sext_ln55_1_fu_417_p1 = $signed(add_ln55_fu_412_p2);

assign sext_ln55_2_fu_443_p1 = $signed(add_ln55_1_fu_439_p2);

assign sext_ln55_fu_408_p1 = i_0_reg_240;

assign sub_ln21_1_fu_363_p2 = (28'd0 - p_lshr_fu_353_p4);

assign sub_ln21_fu_348_p2 = ($signed(32'd4294967281) - $signed(length_read_reg_508));

assign tmp_1_fu_340_p3 = add_ln21_fu_335_p2[32'd31];

assign tmp_2_fu_369_p4 = {{add_ln21_fu_335_p2[31:4]}};

assign tmp_3_fu_395_p3 = {{select_ln21_1_fu_387_p3}, {4'd0}};

assign tmp_fu_328_p3 = length_read_reg_508[32'd31];

assign zext_ln55_1_fu_453_p1 = i_0_i_reg_252;

assign zext_ln55_2_fu_470_p1 = i_0_i1_reg_264;

assign zext_ln55_3_fu_323_p1 = i_0_i_i_reg_229;

assign zext_ln55_fu_493_p1 = i_0_i4_reg_275;

always @ (posedge ap_clk) begin
    zext_ln55_3_reg_533[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_3_reg_543[3:0] <= 4'b0000;
    zext_ln55_reg_612[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //aes_ha
