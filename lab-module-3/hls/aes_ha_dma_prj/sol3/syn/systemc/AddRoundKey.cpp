// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AddRoundKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AddRoundKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AddRoundKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> AddRoundKey::ap_ST_fsm_state1 = "1";
const sc_lv<9> AddRoundKey::ap_ST_fsm_state2 = "10";
const sc_lv<9> AddRoundKey::ap_ST_fsm_state3 = "100";
const sc_lv<9> AddRoundKey::ap_ST_fsm_state4 = "1000";
const sc_lv<9> AddRoundKey::ap_ST_fsm_state5 = "10000";
const sc_lv<9> AddRoundKey::ap_ST_fsm_state6 = "100000";
const sc_lv<9> AddRoundKey::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> AddRoundKey::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> AddRoundKey::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> AddRoundKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> AddRoundKey::ap_const_lv32_1 = "1";
const sc_lv<32> AddRoundKey::ap_const_lv32_2 = "10";
const sc_lv<32> AddRoundKey::ap_const_lv32_3 = "11";
const sc_lv<32> AddRoundKey::ap_const_lv32_4 = "100";
const sc_lv<32> AddRoundKey::ap_const_lv32_5 = "101";
const sc_lv<32> AddRoundKey::ap_const_lv32_6 = "110";
const sc_lv<32> AddRoundKey::ap_const_lv32_7 = "111";
const sc_lv<32> AddRoundKey::ap_const_lv32_8 = "1000";
const sc_lv<4> AddRoundKey::ap_const_lv4_0 = "0000";
const sc_lv<8> AddRoundKey::ap_const_lv8_1 = "1";
const sc_lv<8> AddRoundKey::ap_const_lv8_2 = "10";
const sc_lv<8> AddRoundKey::ap_const_lv8_3 = "11";
const sc_lv<8> AddRoundKey::ap_const_lv8_4 = "100";
const sc_lv<8> AddRoundKey::ap_const_lv8_5 = "101";
const sc_lv<8> AddRoundKey::ap_const_lv8_6 = "110";
const sc_lv<8> AddRoundKey::ap_const_lv8_7 = "111";
const sc_lv<8> AddRoundKey::ap_const_lv8_8 = "1000";
const sc_lv<8> AddRoundKey::ap_const_lv8_9 = "1001";
const sc_lv<8> AddRoundKey::ap_const_lv8_A = "1010";
const sc_lv<8> AddRoundKey::ap_const_lv8_B = "1011";
const sc_lv<8> AddRoundKey::ap_const_lv8_C = "1100";
const sc_lv<8> AddRoundKey::ap_const_lv8_D = "1101";
const sc_lv<8> AddRoundKey::ap_const_lv8_E = "1110";
const sc_lv<8> AddRoundKey::ap_const_lv8_F = "1111";
const sc_lv<8> AddRoundKey::ap_const_lv8_0 = "00000000";
const bool AddRoundKey::ap_const_boolean_1 = true;

AddRoundKey::AddRoundKey(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_RoundKey_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln274_fu_329_p1 );
    sensitive << ( zext_ln274_2_fu_350_p1 );
    sensitive << ( zext_ln274_4_fu_370_p1 );
    sensitive << ( zext_ln274_6_fu_390_p1 );
    sensitive << ( zext_ln274_8_fu_410_p1 );
    sensitive << ( zext_ln274_10_fu_430_p1 );
    sensitive << ( zext_ln274_12_fu_450_p1 );
    sensitive << ( zext_ln274_14_fu_470_p1 );

    SC_METHOD(thread_RoundKey_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln274_1_fu_340_p1 );
    sensitive << ( zext_ln274_3_fu_360_p1 );
    sensitive << ( zext_ln274_5_fu_380_p1 );
    sensitive << ( zext_ln274_7_fu_400_p1 );
    sensitive << ( zext_ln274_9_fu_420_p1 );
    sensitive << ( zext_ln274_11_fu_440_p1 );
    sensitive << ( zext_ln274_13_fu_460_p1 );
    sensitive << ( zext_ln274_15_fu_480_p1 );

    SC_METHOD(thread_RoundKey_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_RoundKey_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_fu_485_p2 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_1_fu_490_p2 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_10_fu_535_p2 );
    sensitive << ( ap_return_10_preg );

    SC_METHOD(thread_ap_return_11);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_11_fu_540_p2 );
    sensitive << ( ap_return_11_preg );

    SC_METHOD(thread_ap_return_12);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_12_fu_545_p2 );
    sensitive << ( ap_return_12_preg );

    SC_METHOD(thread_ap_return_13);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_13_fu_550_p2 );
    sensitive << ( ap_return_13_preg );

    SC_METHOD(thread_ap_return_14);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_14_fu_555_p2 );
    sensitive << ( ap_return_14_preg );

    SC_METHOD(thread_ap_return_15);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_15_fu_561_p2 );
    sensitive << ( ap_return_15_preg );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_2_fu_495_p2 );
    sensitive << ( ap_return_2_preg );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_3_fu_500_p2 );
    sensitive << ( ap_return_3_preg );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_4_fu_505_p2 );
    sensitive << ( ap_return_4_preg );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_5_fu_510_p2 );
    sensitive << ( ap_return_5_preg );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_6_fu_515_p2 );
    sensitive << ( ap_return_6_preg );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_7_fu_520_p2 );
    sensitive << ( ap_return_7_preg );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_8_fu_525_p2 );
    sensitive << ( ap_return_8_preg );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( xor_ln274_9_fu_530_p2 );
    sensitive << ( ap_return_9_preg );

    SC_METHOD(thread_or_ln274_10_fu_435_p2);
    sensitive << ( shl_ln_reg_663 );

    SC_METHOD(thread_or_ln274_11_fu_445_p2);
    sensitive << ( shl_ln_reg_663 );

    SC_METHOD(thread_or_ln274_12_fu_455_p2);
    sensitive << ( shl_ln_reg_663 );

    SC_METHOD(thread_or_ln274_13_fu_465_p2);
    sensitive << ( shl_ln_reg_663 );

    SC_METHOD(thread_or_ln274_14_fu_475_p2);
    sensitive << ( shl_ln_reg_663 );

    SC_METHOD(thread_or_ln274_1_fu_345_p2);
    sensitive << ( shl_ln_reg_663 );

    SC_METHOD(thread_or_ln274_2_fu_355_p2);
    sensitive << ( shl_ln_reg_663 );

    SC_METHOD(thread_or_ln274_3_fu_365_p2);
    sensitive << ( shl_ln_reg_663 );

    SC_METHOD(thread_or_ln274_4_fu_375_p2);
    sensitive << ( shl_ln_reg_663 );

    SC_METHOD(thread_or_ln274_5_fu_385_p2);
    sensitive << ( shl_ln_reg_663 );

    SC_METHOD(thread_or_ln274_6_fu_395_p2);
    sensitive << ( shl_ln_reg_663 );

    SC_METHOD(thread_or_ln274_7_fu_405_p2);
    sensitive << ( shl_ln_reg_663 );

    SC_METHOD(thread_or_ln274_8_fu_415_p2);
    sensitive << ( shl_ln_reg_663 );

    SC_METHOD(thread_or_ln274_9_fu_425_p2);
    sensitive << ( shl_ln_reg_663 );

    SC_METHOD(thread_or_ln274_fu_334_p2);
    sensitive << ( shl_ln_fu_321_p3 );

    SC_METHOD(thread_shl_ln_fu_321_p3);
    sensitive << ( trunc_ln274_fu_317_p1 );

    SC_METHOD(thread_trunc_ln274_fu_317_p1);
    sensitive << ( round );

    SC_METHOD(thread_xor_ln274_10_fu_535_p2);
    sensitive << ( state_2_2_read );
    sensitive << ( RoundKey_load_10_reg_791 );

    SC_METHOD(thread_xor_ln274_11_fu_540_p2);
    sensitive << ( state_2_3_read );
    sensitive << ( RoundKey_load_11_reg_796 );

    SC_METHOD(thread_xor_ln274_12_fu_545_p2);
    sensitive << ( state_3_0_read );
    sensitive << ( RoundKey_load_12_reg_811 );

    SC_METHOD(thread_xor_ln274_13_fu_550_p2);
    sensitive << ( state_3_1_read );
    sensitive << ( RoundKey_load_13_reg_816 );

    SC_METHOD(thread_xor_ln274_14_fu_555_p2);
    sensitive << ( state_3_2_read );
    sensitive << ( RoundKey_q0 );

    SC_METHOD(thread_xor_ln274_15_fu_561_p2);
    sensitive << ( state_3_3_read );
    sensitive << ( RoundKey_q1 );

    SC_METHOD(thread_xor_ln274_1_fu_490_p2);
    sensitive << ( state_0_1_read );
    sensitive << ( RoundKey_load_1_reg_696 );

    SC_METHOD(thread_xor_ln274_2_fu_495_p2);
    sensitive << ( state_0_2_read );
    sensitive << ( RoundKey_load_2_reg_711 );

    SC_METHOD(thread_xor_ln274_3_fu_500_p2);
    sensitive << ( state_0_3_read );
    sensitive << ( RoundKey_load_3_reg_716 );

    SC_METHOD(thread_xor_ln274_4_fu_505_p2);
    sensitive << ( state_1_0_read );
    sensitive << ( RoundKey_load_4_reg_731 );

    SC_METHOD(thread_xor_ln274_5_fu_510_p2);
    sensitive << ( state_1_1_read );
    sensitive << ( RoundKey_load_5_reg_736 );

    SC_METHOD(thread_xor_ln274_6_fu_515_p2);
    sensitive << ( state_1_2_read );
    sensitive << ( RoundKey_load_6_reg_751 );

    SC_METHOD(thread_xor_ln274_7_fu_520_p2);
    sensitive << ( state_1_3_read );
    sensitive << ( RoundKey_load_7_reg_756 );

    SC_METHOD(thread_xor_ln274_8_fu_525_p2);
    sensitive << ( state_2_0_read );
    sensitive << ( RoundKey_load_8_reg_771 );

    SC_METHOD(thread_xor_ln274_9_fu_530_p2);
    sensitive << ( state_2_1_read );
    sensitive << ( RoundKey_load_9_reg_776 );

    SC_METHOD(thread_xor_ln274_fu_485_p2);
    sensitive << ( state_0_0_read );
    sensitive << ( RoundKey_load_reg_691 );

    SC_METHOD(thread_zext_ln274_10_fu_430_p1);
    sensitive << ( or_ln274_9_fu_425_p2 );

    SC_METHOD(thread_zext_ln274_11_fu_440_p1);
    sensitive << ( or_ln274_10_fu_435_p2 );

    SC_METHOD(thread_zext_ln274_12_fu_450_p1);
    sensitive << ( or_ln274_11_fu_445_p2 );

    SC_METHOD(thread_zext_ln274_13_fu_460_p1);
    sensitive << ( or_ln274_12_fu_455_p2 );

    SC_METHOD(thread_zext_ln274_14_fu_470_p1);
    sensitive << ( or_ln274_13_fu_465_p2 );

    SC_METHOD(thread_zext_ln274_15_fu_480_p1);
    sensitive << ( or_ln274_14_fu_475_p2 );

    SC_METHOD(thread_zext_ln274_1_fu_340_p1);
    sensitive << ( or_ln274_fu_334_p2 );

    SC_METHOD(thread_zext_ln274_2_fu_350_p1);
    sensitive << ( or_ln274_1_fu_345_p2 );

    SC_METHOD(thread_zext_ln274_3_fu_360_p1);
    sensitive << ( or_ln274_2_fu_355_p2 );

    SC_METHOD(thread_zext_ln274_4_fu_370_p1);
    sensitive << ( or_ln274_3_fu_365_p2 );

    SC_METHOD(thread_zext_ln274_5_fu_380_p1);
    sensitive << ( or_ln274_4_fu_375_p2 );

    SC_METHOD(thread_zext_ln274_6_fu_390_p1);
    sensitive << ( or_ln274_5_fu_385_p2 );

    SC_METHOD(thread_zext_ln274_7_fu_400_p1);
    sensitive << ( or_ln274_6_fu_395_p2 );

    SC_METHOD(thread_zext_ln274_8_fu_410_p1);
    sensitive << ( or_ln274_7_fu_405_p2 );

    SC_METHOD(thread_zext_ln274_9_fu_420_p1);
    sensitive << ( or_ln274_8_fu_415_p2 );

    SC_METHOD(thread_zext_ln274_fu_329_p1);
    sensitive << ( shl_ln_fu_321_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "000000001";
    ap_return_0_preg = "00000000";
    ap_return_1_preg = "00000000";
    ap_return_2_preg = "00000000";
    ap_return_3_preg = "00000000";
    ap_return_4_preg = "00000000";
    ap_return_5_preg = "00000000";
    ap_return_6_preg = "00000000";
    ap_return_7_preg = "00000000";
    ap_return_8_preg = "00000000";
    ap_return_9_preg = "00000000";
    ap_return_10_preg = "00000000";
    ap_return_11_preg = "00000000";
    ap_return_12_preg = "00000000";
    ap_return_13_preg = "00000000";
    ap_return_14_preg = "00000000";
    ap_return_15_preg = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AddRoundKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, round, "(port)round");
    sc_trace(mVcdFile, state_0_0_read, "(port)state_0_0_read");
    sc_trace(mVcdFile, state_0_1_read, "(port)state_0_1_read");
    sc_trace(mVcdFile, state_0_2_read, "(port)state_0_2_read");
    sc_trace(mVcdFile, state_0_3_read, "(port)state_0_3_read");
    sc_trace(mVcdFile, state_1_0_read, "(port)state_1_0_read");
    sc_trace(mVcdFile, state_1_1_read, "(port)state_1_1_read");
    sc_trace(mVcdFile, state_1_2_read, "(port)state_1_2_read");
    sc_trace(mVcdFile, state_1_3_read, "(port)state_1_3_read");
    sc_trace(mVcdFile, state_2_0_read, "(port)state_2_0_read");
    sc_trace(mVcdFile, state_2_1_read, "(port)state_2_1_read");
    sc_trace(mVcdFile, state_2_2_read, "(port)state_2_2_read");
    sc_trace(mVcdFile, state_2_3_read, "(port)state_2_3_read");
    sc_trace(mVcdFile, state_3_0_read, "(port)state_3_0_read");
    sc_trace(mVcdFile, state_3_1_read, "(port)state_3_1_read");
    sc_trace(mVcdFile, state_3_2_read, "(port)state_3_2_read");
    sc_trace(mVcdFile, state_3_3_read, "(port)state_3_3_read");
    sc_trace(mVcdFile, RoundKey_address0, "(port)RoundKey_address0");
    sc_trace(mVcdFile, RoundKey_ce0, "(port)RoundKey_ce0");
    sc_trace(mVcdFile, RoundKey_q0, "(port)RoundKey_q0");
    sc_trace(mVcdFile, RoundKey_address1, "(port)RoundKey_address1");
    sc_trace(mVcdFile, RoundKey_ce1, "(port)RoundKey_ce1");
    sc_trace(mVcdFile, RoundKey_q1, "(port)RoundKey_q1");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
    sc_trace(mVcdFile, ap_return_11, "(port)ap_return_11");
    sc_trace(mVcdFile, ap_return_12, "(port)ap_return_12");
    sc_trace(mVcdFile, ap_return_13, "(port)ap_return_13");
    sc_trace(mVcdFile, ap_return_14, "(port)ap_return_14");
    sc_trace(mVcdFile, ap_return_15, "(port)ap_return_15");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, shl_ln_fu_321_p3, "shl_ln_fu_321_p3");
    sc_trace(mVcdFile, shl_ln_reg_663, "shl_ln_reg_663");
    sc_trace(mVcdFile, RoundKey_load_reg_691, "RoundKey_load_reg_691");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, RoundKey_load_1_reg_696, "RoundKey_load_1_reg_696");
    sc_trace(mVcdFile, RoundKey_load_2_reg_711, "RoundKey_load_2_reg_711");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, RoundKey_load_3_reg_716, "RoundKey_load_3_reg_716");
    sc_trace(mVcdFile, RoundKey_load_4_reg_731, "RoundKey_load_4_reg_731");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, RoundKey_load_5_reg_736, "RoundKey_load_5_reg_736");
    sc_trace(mVcdFile, RoundKey_load_6_reg_751, "RoundKey_load_6_reg_751");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, RoundKey_load_7_reg_756, "RoundKey_load_7_reg_756");
    sc_trace(mVcdFile, RoundKey_load_8_reg_771, "RoundKey_load_8_reg_771");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, RoundKey_load_9_reg_776, "RoundKey_load_9_reg_776");
    sc_trace(mVcdFile, RoundKey_load_10_reg_791, "RoundKey_load_10_reg_791");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, RoundKey_load_11_reg_796, "RoundKey_load_11_reg_796");
    sc_trace(mVcdFile, RoundKey_load_12_reg_811, "RoundKey_load_12_reg_811");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, RoundKey_load_13_reg_816, "RoundKey_load_13_reg_816");
    sc_trace(mVcdFile, zext_ln274_fu_329_p1, "zext_ln274_fu_329_p1");
    sc_trace(mVcdFile, zext_ln274_1_fu_340_p1, "zext_ln274_1_fu_340_p1");
    sc_trace(mVcdFile, zext_ln274_2_fu_350_p1, "zext_ln274_2_fu_350_p1");
    sc_trace(mVcdFile, zext_ln274_3_fu_360_p1, "zext_ln274_3_fu_360_p1");
    sc_trace(mVcdFile, zext_ln274_4_fu_370_p1, "zext_ln274_4_fu_370_p1");
    sc_trace(mVcdFile, zext_ln274_5_fu_380_p1, "zext_ln274_5_fu_380_p1");
    sc_trace(mVcdFile, zext_ln274_6_fu_390_p1, "zext_ln274_6_fu_390_p1");
    sc_trace(mVcdFile, zext_ln274_7_fu_400_p1, "zext_ln274_7_fu_400_p1");
    sc_trace(mVcdFile, zext_ln274_8_fu_410_p1, "zext_ln274_8_fu_410_p1");
    sc_trace(mVcdFile, zext_ln274_9_fu_420_p1, "zext_ln274_9_fu_420_p1");
    sc_trace(mVcdFile, zext_ln274_10_fu_430_p1, "zext_ln274_10_fu_430_p1");
    sc_trace(mVcdFile, zext_ln274_11_fu_440_p1, "zext_ln274_11_fu_440_p1");
    sc_trace(mVcdFile, zext_ln274_12_fu_450_p1, "zext_ln274_12_fu_450_p1");
    sc_trace(mVcdFile, zext_ln274_13_fu_460_p1, "zext_ln274_13_fu_460_p1");
    sc_trace(mVcdFile, zext_ln274_14_fu_470_p1, "zext_ln274_14_fu_470_p1");
    sc_trace(mVcdFile, zext_ln274_15_fu_480_p1, "zext_ln274_15_fu_480_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, trunc_ln274_fu_317_p1, "trunc_ln274_fu_317_p1");
    sc_trace(mVcdFile, or_ln274_fu_334_p2, "or_ln274_fu_334_p2");
    sc_trace(mVcdFile, or_ln274_1_fu_345_p2, "or_ln274_1_fu_345_p2");
    sc_trace(mVcdFile, or_ln274_2_fu_355_p2, "or_ln274_2_fu_355_p2");
    sc_trace(mVcdFile, or_ln274_3_fu_365_p2, "or_ln274_3_fu_365_p2");
    sc_trace(mVcdFile, or_ln274_4_fu_375_p2, "or_ln274_4_fu_375_p2");
    sc_trace(mVcdFile, or_ln274_5_fu_385_p2, "or_ln274_5_fu_385_p2");
    sc_trace(mVcdFile, or_ln274_6_fu_395_p2, "or_ln274_6_fu_395_p2");
    sc_trace(mVcdFile, or_ln274_7_fu_405_p2, "or_ln274_7_fu_405_p2");
    sc_trace(mVcdFile, or_ln274_8_fu_415_p2, "or_ln274_8_fu_415_p2");
    sc_trace(mVcdFile, or_ln274_9_fu_425_p2, "or_ln274_9_fu_425_p2");
    sc_trace(mVcdFile, or_ln274_10_fu_435_p2, "or_ln274_10_fu_435_p2");
    sc_trace(mVcdFile, or_ln274_11_fu_445_p2, "or_ln274_11_fu_445_p2");
    sc_trace(mVcdFile, or_ln274_12_fu_455_p2, "or_ln274_12_fu_455_p2");
    sc_trace(mVcdFile, or_ln274_13_fu_465_p2, "or_ln274_13_fu_465_p2");
    sc_trace(mVcdFile, or_ln274_14_fu_475_p2, "or_ln274_14_fu_475_p2");
    sc_trace(mVcdFile, xor_ln274_fu_485_p2, "xor_ln274_fu_485_p2");
    sc_trace(mVcdFile, xor_ln274_1_fu_490_p2, "xor_ln274_1_fu_490_p2");
    sc_trace(mVcdFile, xor_ln274_2_fu_495_p2, "xor_ln274_2_fu_495_p2");
    sc_trace(mVcdFile, xor_ln274_3_fu_500_p2, "xor_ln274_3_fu_500_p2");
    sc_trace(mVcdFile, xor_ln274_4_fu_505_p2, "xor_ln274_4_fu_505_p2");
    sc_trace(mVcdFile, xor_ln274_5_fu_510_p2, "xor_ln274_5_fu_510_p2");
    sc_trace(mVcdFile, xor_ln274_6_fu_515_p2, "xor_ln274_6_fu_515_p2");
    sc_trace(mVcdFile, xor_ln274_7_fu_520_p2, "xor_ln274_7_fu_520_p2");
    sc_trace(mVcdFile, xor_ln274_8_fu_525_p2, "xor_ln274_8_fu_525_p2");
    sc_trace(mVcdFile, xor_ln274_9_fu_530_p2, "xor_ln274_9_fu_530_p2");
    sc_trace(mVcdFile, xor_ln274_10_fu_535_p2, "xor_ln274_10_fu_535_p2");
    sc_trace(mVcdFile, xor_ln274_11_fu_540_p2, "xor_ln274_11_fu_540_p2");
    sc_trace(mVcdFile, xor_ln274_12_fu_545_p2, "xor_ln274_12_fu_545_p2");
    sc_trace(mVcdFile, xor_ln274_13_fu_550_p2, "xor_ln274_13_fu_550_p2");
    sc_trace(mVcdFile, xor_ln274_14_fu_555_p2, "xor_ln274_14_fu_555_p2");
    sc_trace(mVcdFile, xor_ln274_15_fu_561_p2, "xor_ln274_15_fu_561_p2");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_return_2_preg, "ap_return_2_preg");
    sc_trace(mVcdFile, ap_return_3_preg, "ap_return_3_preg");
    sc_trace(mVcdFile, ap_return_4_preg, "ap_return_4_preg");
    sc_trace(mVcdFile, ap_return_5_preg, "ap_return_5_preg");
    sc_trace(mVcdFile, ap_return_6_preg, "ap_return_6_preg");
    sc_trace(mVcdFile, ap_return_7_preg, "ap_return_7_preg");
    sc_trace(mVcdFile, ap_return_8_preg, "ap_return_8_preg");
    sc_trace(mVcdFile, ap_return_9_preg, "ap_return_9_preg");
    sc_trace(mVcdFile, ap_return_10_preg, "ap_return_10_preg");
    sc_trace(mVcdFile, ap_return_11_preg, "ap_return_11_preg");
    sc_trace(mVcdFile, ap_return_12_preg, "ap_return_12_preg");
    sc_trace(mVcdFile, ap_return_13_preg, "ap_return_13_preg");
    sc_trace(mVcdFile, ap_return_14_preg, "ap_return_14_preg");
    sc_trace(mVcdFile, ap_return_15_preg, "ap_return_15_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

AddRoundKey::~AddRoundKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void AddRoundKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_0_preg = xor_ln274_fu_485_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_10_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_10_preg = xor_ln274_10_fu_535_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_11_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_11_preg = xor_ln274_11_fu_540_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_12_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_12_preg = xor_ln274_12_fu_545_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_13_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_13_preg = xor_ln274_13_fu_550_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_14_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_14_preg = xor_ln274_14_fu_555_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_15_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_15_preg = xor_ln274_15_fu_561_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_1_preg = xor_ln274_1_fu_490_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_2_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_2_preg = xor_ln274_2_fu_495_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_3_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_3_preg = xor_ln274_3_fu_500_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_4_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_4_preg = xor_ln274_4_fu_505_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_5_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_5_preg = xor_ln274_5_fu_510_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_6_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_6_preg = xor_ln274_6_fu_515_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_7_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_7_preg = xor_ln274_7_fu_520_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_8_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_8_preg = xor_ln274_8_fu_525_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_9_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_9_preg = xor_ln274_9_fu_530_p2.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        RoundKey_load_10_reg_791 = RoundKey_q0.read();
        RoundKey_load_11_reg_796 = RoundKey_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        RoundKey_load_12_reg_811 = RoundKey_q0.read();
        RoundKey_load_13_reg_816 = RoundKey_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_load_1_reg_696 = RoundKey_q1.read();
        RoundKey_load_reg_691 = RoundKey_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_load_2_reg_711 = RoundKey_q0.read();
        RoundKey_load_3_reg_716 = RoundKey_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_load_4_reg_731 = RoundKey_q0.read();
        RoundKey_load_5_reg_736 = RoundKey_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_load_6_reg_751 = RoundKey_q0.read();
        RoundKey_load_7_reg_756 = RoundKey_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        RoundKey_load_8_reg_771 = RoundKey_q0.read();
        RoundKey_load_9_reg_776 = RoundKey_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        shl_ln_reg_663 = shl_ln_fu_321_p3.read();
    }
}

void AddRoundKey::thread_RoundKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln274_14_fu_470_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln274_12_fu_450_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln274_10_fu_430_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln274_8_fu_410_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln274_6_fu_390_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln274_4_fu_370_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln274_2_fu_350_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_address0 =  (sc_lv<8>) (zext_ln274_fu_329_p1.read());
    } else {
        RoundKey_address0 = "XXXXXXXX";
    }
}

void AddRoundKey::thread_RoundKey_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln274_15_fu_480_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln274_13_fu_460_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln274_11_fu_440_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln274_9_fu_420_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln274_7_fu_400_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln274_5_fu_380_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln274_3_fu_360_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        RoundKey_address1 =  (sc_lv<8>) (zext_ln274_1_fu_340_p1.read());
    } else {
        RoundKey_address1 = "XXXXXXXX";
    }
}

void AddRoundKey::thread_RoundKey_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_ce0 = ap_const_logic_1;
    } else {
        RoundKey_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_RoundKey_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        RoundKey_ce1 = ap_const_logic_1;
    } else {
        RoundKey_ce1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AddRoundKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AddRoundKey::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AddRoundKey::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void AddRoundKey::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void AddRoundKey::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void AddRoundKey::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void AddRoundKey::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void AddRoundKey::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void AddRoundKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_0 = xor_ln274_fu_485_p2.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void AddRoundKey::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_1 = xor_ln274_1_fu_490_p2.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void AddRoundKey::thread_ap_return_10() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_10 = xor_ln274_10_fu_535_p2.read();
    } else {
        ap_return_10 = ap_return_10_preg.read();
    }
}

void AddRoundKey::thread_ap_return_11() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_11 = xor_ln274_11_fu_540_p2.read();
    } else {
        ap_return_11 = ap_return_11_preg.read();
    }
}

void AddRoundKey::thread_ap_return_12() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_12 = xor_ln274_12_fu_545_p2.read();
    } else {
        ap_return_12 = ap_return_12_preg.read();
    }
}

void AddRoundKey::thread_ap_return_13() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_13 = xor_ln274_13_fu_550_p2.read();
    } else {
        ap_return_13 = ap_return_13_preg.read();
    }
}

void AddRoundKey::thread_ap_return_14() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_14 = xor_ln274_14_fu_555_p2.read();
    } else {
        ap_return_14 = ap_return_14_preg.read();
    }
}

void AddRoundKey::thread_ap_return_15() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_15 = xor_ln274_15_fu_561_p2.read();
    } else {
        ap_return_15 = ap_return_15_preg.read();
    }
}

void AddRoundKey::thread_ap_return_2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_2 = xor_ln274_2_fu_495_p2.read();
    } else {
        ap_return_2 = ap_return_2_preg.read();
    }
}

void AddRoundKey::thread_ap_return_3() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_3 = xor_ln274_3_fu_500_p2.read();
    } else {
        ap_return_3 = ap_return_3_preg.read();
    }
}

void AddRoundKey::thread_ap_return_4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_4 = xor_ln274_4_fu_505_p2.read();
    } else {
        ap_return_4 = ap_return_4_preg.read();
    }
}

void AddRoundKey::thread_ap_return_5() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_5 = xor_ln274_5_fu_510_p2.read();
    } else {
        ap_return_5 = ap_return_5_preg.read();
    }
}

void AddRoundKey::thread_ap_return_6() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_6 = xor_ln274_6_fu_515_p2.read();
    } else {
        ap_return_6 = ap_return_6_preg.read();
    }
}

void AddRoundKey::thread_ap_return_7() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_7 = xor_ln274_7_fu_520_p2.read();
    } else {
        ap_return_7 = ap_return_7_preg.read();
    }
}

void AddRoundKey::thread_ap_return_8() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_8 = xor_ln274_8_fu_525_p2.read();
    } else {
        ap_return_8 = ap_return_8_preg.read();
    }
}

void AddRoundKey::thread_ap_return_9() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_9 = xor_ln274_9_fu_530_p2.read();
    } else {
        ap_return_9 = ap_return_9_preg.read();
    }
}

void AddRoundKey::thread_or_ln274_10_fu_435_p2() {
    or_ln274_10_fu_435_p2 = (shl_ln_reg_663.read() | ap_const_lv8_B);
}

void AddRoundKey::thread_or_ln274_11_fu_445_p2() {
    or_ln274_11_fu_445_p2 = (shl_ln_reg_663.read() | ap_const_lv8_C);
}

void AddRoundKey::thread_or_ln274_12_fu_455_p2() {
    or_ln274_12_fu_455_p2 = (shl_ln_reg_663.read() | ap_const_lv8_D);
}

void AddRoundKey::thread_or_ln274_13_fu_465_p2() {
    or_ln274_13_fu_465_p2 = (shl_ln_reg_663.read() | ap_const_lv8_E);
}

void AddRoundKey::thread_or_ln274_14_fu_475_p2() {
    or_ln274_14_fu_475_p2 = (shl_ln_reg_663.read() | ap_const_lv8_F);
}

void AddRoundKey::thread_or_ln274_1_fu_345_p2() {
    or_ln274_1_fu_345_p2 = (shl_ln_reg_663.read() | ap_const_lv8_2);
}

void AddRoundKey::thread_or_ln274_2_fu_355_p2() {
    or_ln274_2_fu_355_p2 = (shl_ln_reg_663.read() | ap_const_lv8_3);
}

void AddRoundKey::thread_or_ln274_3_fu_365_p2() {
    or_ln274_3_fu_365_p2 = (shl_ln_reg_663.read() | ap_const_lv8_4);
}

void AddRoundKey::thread_or_ln274_4_fu_375_p2() {
    or_ln274_4_fu_375_p2 = (shl_ln_reg_663.read() | ap_const_lv8_5);
}

void AddRoundKey::thread_or_ln274_5_fu_385_p2() {
    or_ln274_5_fu_385_p2 = (shl_ln_reg_663.read() | ap_const_lv8_6);
}

void AddRoundKey::thread_or_ln274_6_fu_395_p2() {
    or_ln274_6_fu_395_p2 = (shl_ln_reg_663.read() | ap_const_lv8_7);
}

void AddRoundKey::thread_or_ln274_7_fu_405_p2() {
    or_ln274_7_fu_405_p2 = (shl_ln_reg_663.read() | ap_const_lv8_8);
}

void AddRoundKey::thread_or_ln274_8_fu_415_p2() {
    or_ln274_8_fu_415_p2 = (shl_ln_reg_663.read() | ap_const_lv8_9);
}

void AddRoundKey::thread_or_ln274_9_fu_425_p2() {
    or_ln274_9_fu_425_p2 = (shl_ln_reg_663.read() | ap_const_lv8_A);
}

void AddRoundKey::thread_or_ln274_fu_334_p2() {
    or_ln274_fu_334_p2 = (shl_ln_fu_321_p3.read() | ap_const_lv8_1);
}

void AddRoundKey::thread_shl_ln_fu_321_p3() {
    shl_ln_fu_321_p3 = esl_concat<4,4>(trunc_ln274_fu_317_p1.read(), ap_const_lv4_0);
}

void AddRoundKey::thread_trunc_ln274_fu_317_p1() {
    trunc_ln274_fu_317_p1 = round.read().range(4-1, 0);
}

void AddRoundKey::thread_xor_ln274_10_fu_535_p2() {
    xor_ln274_10_fu_535_p2 = (RoundKey_load_10_reg_791.read() ^ state_2_2_read.read());
}

void AddRoundKey::thread_xor_ln274_11_fu_540_p2() {
    xor_ln274_11_fu_540_p2 = (RoundKey_load_11_reg_796.read() ^ state_2_3_read.read());
}

void AddRoundKey::thread_xor_ln274_12_fu_545_p2() {
    xor_ln274_12_fu_545_p2 = (RoundKey_load_12_reg_811.read() ^ state_3_0_read.read());
}

void AddRoundKey::thread_xor_ln274_13_fu_550_p2() {
    xor_ln274_13_fu_550_p2 = (RoundKey_load_13_reg_816.read() ^ state_3_1_read.read());
}

void AddRoundKey::thread_xor_ln274_14_fu_555_p2() {
    xor_ln274_14_fu_555_p2 = (RoundKey_q0.read() ^ state_3_2_read.read());
}

void AddRoundKey::thread_xor_ln274_15_fu_561_p2() {
    xor_ln274_15_fu_561_p2 = (RoundKey_q1.read() ^ state_3_3_read.read());
}

void AddRoundKey::thread_xor_ln274_1_fu_490_p2() {
    xor_ln274_1_fu_490_p2 = (RoundKey_load_1_reg_696.read() ^ state_0_1_read.read());
}

void AddRoundKey::thread_xor_ln274_2_fu_495_p2() {
    xor_ln274_2_fu_495_p2 = (RoundKey_load_2_reg_711.read() ^ state_0_2_read.read());
}

void AddRoundKey::thread_xor_ln274_3_fu_500_p2() {
    xor_ln274_3_fu_500_p2 = (RoundKey_load_3_reg_716.read() ^ state_0_3_read.read());
}

void AddRoundKey::thread_xor_ln274_4_fu_505_p2() {
    xor_ln274_4_fu_505_p2 = (RoundKey_load_4_reg_731.read() ^ state_1_0_read.read());
}

void AddRoundKey::thread_xor_ln274_5_fu_510_p2() {
    xor_ln274_5_fu_510_p2 = (RoundKey_load_5_reg_736.read() ^ state_1_1_read.read());
}

void AddRoundKey::thread_xor_ln274_6_fu_515_p2() {
    xor_ln274_6_fu_515_p2 = (RoundKey_load_6_reg_751.read() ^ state_1_2_read.read());
}

void AddRoundKey::thread_xor_ln274_7_fu_520_p2() {
    xor_ln274_7_fu_520_p2 = (RoundKey_load_7_reg_756.read() ^ state_1_3_read.read());
}

void AddRoundKey::thread_xor_ln274_8_fu_525_p2() {
    xor_ln274_8_fu_525_p2 = (RoundKey_load_8_reg_771.read() ^ state_2_0_read.read());
}

void AddRoundKey::thread_xor_ln274_9_fu_530_p2() {
    xor_ln274_9_fu_530_p2 = (RoundKey_load_9_reg_776.read() ^ state_2_1_read.read());
}

void AddRoundKey::thread_xor_ln274_fu_485_p2() {
    xor_ln274_fu_485_p2 = (RoundKey_load_reg_691.read() ^ state_0_0_read.read());
}

void AddRoundKey::thread_zext_ln274_10_fu_430_p1() {
    zext_ln274_10_fu_430_p1 = esl_zext<64,8>(or_ln274_9_fu_425_p2.read());
}

void AddRoundKey::thread_zext_ln274_11_fu_440_p1() {
    zext_ln274_11_fu_440_p1 = esl_zext<64,8>(or_ln274_10_fu_435_p2.read());
}

void AddRoundKey::thread_zext_ln274_12_fu_450_p1() {
    zext_ln274_12_fu_450_p1 = esl_zext<64,8>(or_ln274_11_fu_445_p2.read());
}

void AddRoundKey::thread_zext_ln274_13_fu_460_p1() {
    zext_ln274_13_fu_460_p1 = esl_zext<64,8>(or_ln274_12_fu_455_p2.read());
}

void AddRoundKey::thread_zext_ln274_14_fu_470_p1() {
    zext_ln274_14_fu_470_p1 = esl_zext<64,8>(or_ln274_13_fu_465_p2.read());
}

void AddRoundKey::thread_zext_ln274_15_fu_480_p1() {
    zext_ln274_15_fu_480_p1 = esl_zext<64,8>(or_ln274_14_fu_475_p2.read());
}

void AddRoundKey::thread_zext_ln274_1_fu_340_p1() {
    zext_ln274_1_fu_340_p1 = esl_zext<64,8>(or_ln274_fu_334_p2.read());
}

void AddRoundKey::thread_zext_ln274_2_fu_350_p1() {
    zext_ln274_2_fu_350_p1 = esl_zext<64,8>(or_ln274_1_fu_345_p2.read());
}

void AddRoundKey::thread_zext_ln274_3_fu_360_p1() {
    zext_ln274_3_fu_360_p1 = esl_zext<64,8>(or_ln274_2_fu_355_p2.read());
}

void AddRoundKey::thread_zext_ln274_4_fu_370_p1() {
    zext_ln274_4_fu_370_p1 = esl_zext<64,8>(or_ln274_3_fu_365_p2.read());
}

void AddRoundKey::thread_zext_ln274_5_fu_380_p1() {
    zext_ln274_5_fu_380_p1 = esl_zext<64,8>(or_ln274_4_fu_375_p2.read());
}

void AddRoundKey::thread_zext_ln274_6_fu_390_p1() {
    zext_ln274_6_fu_390_p1 = esl_zext<64,8>(or_ln274_5_fu_385_p2.read());
}

void AddRoundKey::thread_zext_ln274_7_fu_400_p1() {
    zext_ln274_7_fu_400_p1 = esl_zext<64,8>(or_ln274_6_fu_395_p2.read());
}

void AddRoundKey::thread_zext_ln274_8_fu_410_p1() {
    zext_ln274_8_fu_410_p1 = esl_zext<64,8>(or_ln274_7_fu_405_p2.read());
}

void AddRoundKey::thread_zext_ln274_9_fu_420_p1() {
    zext_ln274_9_fu_420_p1 = esl_zext<64,8>(or_ln274_8_fu_415_p2.read());
}

void AddRoundKey::thread_zext_ln274_fu_329_p1() {
    zext_ln274_fu_329_p1 = esl_zext<64,8>(shl_ln_fu_321_p3.read());
}

void AddRoundKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

}

