// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AES_CTR_xcrypt_buffe.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AES_CTR_xcrypt_buffe::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AES_CTR_xcrypt_buffe::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state1 = "1";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state2 = "10";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state3 = "100";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state4 = "1000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state5 = "10000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state6 = "100000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state7 = "1000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state8 = "10000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state9 = "100000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state10 = "1000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state11 = "10000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state12 = "100000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<42> AES_CTR_xcrypt_buffe::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_1 = "1";
const sc_lv<1> AES_CTR_xcrypt_buffe::ap_const_lv1_0 = "0";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_2 = "10";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_4 = "100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_5 = "101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_6 = "110";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_7 = "111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_8 = "1000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_9 = "1001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_A = "1010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_B = "1011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_C = "1100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_D = "1101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_E = "1110";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_F = "1111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_10 = "10000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_11 = "10001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_18 = "11000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_19 = "11001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_1A = "11010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_1B = "11011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_1C = "11100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_1D = "11101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_1E = "11110";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_1F = "11111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_20 = "100000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_21 = "100001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_22 = "100010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_23 = "100011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_24 = "100100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_25 = "100101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_26 = "100110";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_27 = "100111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_28 = "101000";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_0 = "00000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_29 = "101001";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_3 = "11";
const sc_lv<1> AES_CTR_xcrypt_buffe::ap_const_lv1_1 = "1";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_1 = "1";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_F = "1111";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_E = "1110";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_D = "1101";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_C = "1100";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_B = "1011";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_A = "1010";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_9 = "1001";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_8 = "1000";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_7 = "111";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_6 = "110";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_5 = "101";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_4 = "100";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_3 = "11";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_2 = "10";
const sc_lv<4> AES_CTR_xcrypt_buffe::ap_const_lv4_0 = "0000";
const sc_lv<6> AES_CTR_xcrypt_buffe::ap_const_lv6_0 = "000000";
const sc_lv<6> AES_CTR_xcrypt_buffe::ap_const_lv6_A = "1010";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_1 = "1";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_2 = "10";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_3 = "11";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_4 = "100";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_5 = "101";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_6 = "110";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_7 = "111";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_8 = "1000";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_9 = "1001";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_A = "1010";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_B = "1011";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_C = "1100";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_D = "1101";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_E = "1110";
const sc_lv<64> AES_CTR_xcrypt_buffe::ap_const_lv64_F = "1111";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_17 = "10111";
const sc_lv<8> AES_CTR_xcrypt_buffe::ap_const_lv8_0 = "00000000";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_12 = "10010";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_13 = "10011";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_14 = "10100";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_15 = "10101";
const sc_lv<32> AES_CTR_xcrypt_buffe::ap_const_lv32_16 = "10110";
const sc_lv<8> AES_CTR_xcrypt_buffe::ap_const_lv8_FF = "11111111";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_10 = "10000";
const sc_lv<5> AES_CTR_xcrypt_buffe::ap_const_lv5_1 = "1";
const sc_lv<8> AES_CTR_xcrypt_buffe::ap_const_lv8_1 = "1";
const bool AES_CTR_xcrypt_buffe::ap_const_boolean_1 = true;

AES_CTR_xcrypt_buffe::AES_CTR_xcrypt_buffe(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new AES_CTR_xcrypt_buffe_sbox("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    sbox_U->address1(sbox_address1);
    sbox_U->ce1(sbox_ce1);
    sbox_U->q1(sbox_q1);
    sbox_U->address2(sbox_address2);
    sbox_U->ce2(sbox_ce2);
    sbox_U->q2(sbox_q2);
    sbox_U->address3(sbox_address3);
    sbox_U->ce3(sbox_ce3);
    sbox_U->q3(sbox_q3);
    sbox_U->address4(sbox_address4);
    sbox_U->ce4(sbox_ce4);
    sbox_U->q4(sbox_q4);
    sbox_U->address5(sbox_address5);
    sbox_U->ce5(sbox_ce5);
    sbox_U->q5(sbox_q5);
    sbox_U->address6(sbox_address6);
    sbox_U->ce6(sbox_ce6);
    sbox_U->q6(sbox_q6);
    sbox_U->address7(sbox_address7);
    sbox_U->ce7(sbox_ce7);
    sbox_U->q7(sbox_q7);
    sbox_U->address8(sbox_address8);
    sbox_U->ce8(sbox_ce8);
    sbox_U->q8(sbox_q8);
    sbox_U->address9(sbox_address9);
    sbox_U->ce9(sbox_ce9);
    sbox_U->q9(sbox_q9);
    sbox_U->address10(sbox_address10);
    sbox_U->ce10(sbox_ce10);
    sbox_U->q10(sbox_q10);
    sbox_U->address11(sbox_address11);
    sbox_U->ce11(sbox_ce11);
    sbox_U->q11(sbox_q11);
    sbox_U->address12(sbox_address12);
    sbox_U->ce12(sbox_ce12);
    sbox_U->q12(sbox_q12);
    sbox_U->address13(sbox_address13);
    sbox_U->ce13(sbox_ce13);
    sbox_U->q13(sbox_q13);
    sbox_U->address14(sbox_address14);
    sbox_U->ce14(sbox_ce14);
    sbox_U->q14(sbox_q14);
    sbox_U->address15(sbox_address15);
    sbox_U->ce15(sbox_ce15);
    sbox_U->q15(sbox_q15);
    buffer_U = new AES_CTR_xcrypt_buffe_buffer("buffer_U");
    buffer_U->clk(ap_clk);
    buffer_U->reset(ap_rst);
    buffer_U->address0(buffer_address0);
    buffer_U->ce0(buffer_ce0);
    buffer_U->we0(buffer_we0);
    buffer_U->d0(buffer_d0);
    buffer_U->q0(buffer_q0);
    buffer_U->address1(buffer_address1);
    buffer_U->ce1(buffer_ce1);
    buffer_U->we1(buffer_we1);
    buffer_U->d1(buffer_d1);
    buffer_U->q1(buffer_q1);
    call_ret4_MixColumns_fu_935 = new MixColumns("call_ret4_MixColumns_fu_935");
    call_ret4_MixColumns_fu_935->ap_ready(call_ret4_MixColumns_fu_935_ap_ready);
    call_ret4_MixColumns_fu_935->state_0_0_read(x_0_0_3_reg_1769);
    call_ret4_MixColumns_fu_935->state_0_1_read(x_0_1_4_reg_1799);
    call_ret4_MixColumns_fu_935->state_0_2_read(x_0_2_4_reg_1829);
    call_ret4_MixColumns_fu_935->state_0_3_read(x_0_3_4_reg_1859);
    call_ret4_MixColumns_fu_935->state_1_0_read(x_1_0_3_reg_1775);
    call_ret4_MixColumns_fu_935->state_1_1_read(x_1_1_4_reg_1805);
    call_ret4_MixColumns_fu_935->state_1_2_read(x_1_2_4_reg_1835);
    call_ret4_MixColumns_fu_935->state_1_3_read(x_1_3_4_reg_1841);
    call_ret4_MixColumns_fu_935->state_2_0_read(x_2_0_3_reg_1781);
    call_ret4_MixColumns_fu_935->state_2_1_read(x_2_1_4_reg_1811);
    call_ret4_MixColumns_fu_935->state_2_2_read(x_2_2_4_reg_1817);
    call_ret4_MixColumns_fu_935->state_2_3_read(x_2_3_4_reg_1847);
    call_ret4_MixColumns_fu_935->state_3_0_read(x_3_0_3_reg_1787);
    call_ret4_MixColumns_fu_935->state_3_1_read(x_3_1_4_reg_1793);
    call_ret4_MixColumns_fu_935->state_3_2_read(x_3_2_4_reg_1823);
    call_ret4_MixColumns_fu_935->state_3_3_read(x_3_3_4_reg_1853);
    call_ret4_MixColumns_fu_935->ap_return_0(call_ret4_MixColumns_fu_935_ap_return_0);
    call_ret4_MixColumns_fu_935->ap_return_1(call_ret4_MixColumns_fu_935_ap_return_1);
    call_ret4_MixColumns_fu_935->ap_return_2(call_ret4_MixColumns_fu_935_ap_return_2);
    call_ret4_MixColumns_fu_935->ap_return_3(call_ret4_MixColumns_fu_935_ap_return_3);
    call_ret4_MixColumns_fu_935->ap_return_4(call_ret4_MixColumns_fu_935_ap_return_4);
    call_ret4_MixColumns_fu_935->ap_return_5(call_ret4_MixColumns_fu_935_ap_return_5);
    call_ret4_MixColumns_fu_935->ap_return_6(call_ret4_MixColumns_fu_935_ap_return_6);
    call_ret4_MixColumns_fu_935->ap_return_7(call_ret4_MixColumns_fu_935_ap_return_7);
    call_ret4_MixColumns_fu_935->ap_return_8(call_ret4_MixColumns_fu_935_ap_return_8);
    call_ret4_MixColumns_fu_935->ap_return_9(call_ret4_MixColumns_fu_935_ap_return_9);
    call_ret4_MixColumns_fu_935->ap_return_10(call_ret4_MixColumns_fu_935_ap_return_10);
    call_ret4_MixColumns_fu_935->ap_return_11(call_ret4_MixColumns_fu_935_ap_return_11);
    call_ret4_MixColumns_fu_935->ap_return_12(call_ret4_MixColumns_fu_935_ap_return_12);
    call_ret4_MixColumns_fu_935->ap_return_13(call_ret4_MixColumns_fu_935_ap_return_13);
    call_ret4_MixColumns_fu_935->ap_return_14(call_ret4_MixColumns_fu_935_ap_return_14);
    call_ret4_MixColumns_fu_935->ap_return_15(call_ret4_MixColumns_fu_935_ap_return_15);
    grp_AddRoundKey_fu_955 = new AddRoundKey("grp_AddRoundKey_fu_955");
    grp_AddRoundKey_fu_955->ap_clk(ap_clk);
    grp_AddRoundKey_fu_955->ap_rst(ap_rst);
    grp_AddRoundKey_fu_955->ap_start(grp_AddRoundKey_fu_955_ap_start);
    grp_AddRoundKey_fu_955->ap_done(grp_AddRoundKey_fu_955_ap_done);
    grp_AddRoundKey_fu_955->ap_idle(grp_AddRoundKey_fu_955_ap_idle);
    grp_AddRoundKey_fu_955->ap_ready(grp_AddRoundKey_fu_955_ap_ready);
    grp_AddRoundKey_fu_955->round(grp_AddRoundKey_fu_955_round);
    grp_AddRoundKey_fu_955->state_0_0_read(grp_AddRoundKey_fu_955_state_0_0_read);
    grp_AddRoundKey_fu_955->state_0_1_read(grp_AddRoundKey_fu_955_state_0_1_read);
    grp_AddRoundKey_fu_955->state_0_2_read(grp_AddRoundKey_fu_955_state_0_2_read);
    grp_AddRoundKey_fu_955->state_0_3_read(grp_AddRoundKey_fu_955_state_0_3_read);
    grp_AddRoundKey_fu_955->state_1_0_read(grp_AddRoundKey_fu_955_state_1_0_read);
    grp_AddRoundKey_fu_955->state_1_1_read(grp_AddRoundKey_fu_955_state_1_1_read);
    grp_AddRoundKey_fu_955->state_1_2_read(grp_AddRoundKey_fu_955_state_1_2_read);
    grp_AddRoundKey_fu_955->state_1_3_read(grp_AddRoundKey_fu_955_state_1_3_read);
    grp_AddRoundKey_fu_955->state_2_0_read(grp_AddRoundKey_fu_955_state_2_0_read);
    grp_AddRoundKey_fu_955->state_2_1_read(grp_AddRoundKey_fu_955_state_2_1_read);
    grp_AddRoundKey_fu_955->state_2_2_read(grp_AddRoundKey_fu_955_state_2_2_read);
    grp_AddRoundKey_fu_955->state_2_3_read(grp_AddRoundKey_fu_955_state_2_3_read);
    grp_AddRoundKey_fu_955->state_3_0_read(grp_AddRoundKey_fu_955_state_3_0_read);
    grp_AddRoundKey_fu_955->state_3_1_read(grp_AddRoundKey_fu_955_state_3_1_read);
    grp_AddRoundKey_fu_955->state_3_2_read(grp_AddRoundKey_fu_955_state_3_2_read);
    grp_AddRoundKey_fu_955->state_3_3_read(grp_AddRoundKey_fu_955_state_3_3_read);
    grp_AddRoundKey_fu_955->RoundKey_address0(grp_AddRoundKey_fu_955_RoundKey_address0);
    grp_AddRoundKey_fu_955->RoundKey_ce0(grp_AddRoundKey_fu_955_RoundKey_ce0);
    grp_AddRoundKey_fu_955->RoundKey_q0(ctx_RoundKey_q0);
    grp_AddRoundKey_fu_955->RoundKey_address1(grp_AddRoundKey_fu_955_RoundKey_address1);
    grp_AddRoundKey_fu_955->RoundKey_ce1(grp_AddRoundKey_fu_955_RoundKey_ce1);
    grp_AddRoundKey_fu_955->RoundKey_q1(ctx_RoundKey_q1);
    grp_AddRoundKey_fu_955->ap_return_0(grp_AddRoundKey_fu_955_ap_return_0);
    grp_AddRoundKey_fu_955->ap_return_1(grp_AddRoundKey_fu_955_ap_return_1);
    grp_AddRoundKey_fu_955->ap_return_2(grp_AddRoundKey_fu_955_ap_return_2);
    grp_AddRoundKey_fu_955->ap_return_3(grp_AddRoundKey_fu_955_ap_return_3);
    grp_AddRoundKey_fu_955->ap_return_4(grp_AddRoundKey_fu_955_ap_return_4);
    grp_AddRoundKey_fu_955->ap_return_5(grp_AddRoundKey_fu_955_ap_return_5);
    grp_AddRoundKey_fu_955->ap_return_6(grp_AddRoundKey_fu_955_ap_return_6);
    grp_AddRoundKey_fu_955->ap_return_7(grp_AddRoundKey_fu_955_ap_return_7);
    grp_AddRoundKey_fu_955->ap_return_8(grp_AddRoundKey_fu_955_ap_return_8);
    grp_AddRoundKey_fu_955->ap_return_9(grp_AddRoundKey_fu_955_ap_return_9);
    grp_AddRoundKey_fu_955->ap_return_10(grp_AddRoundKey_fu_955_ap_return_10);
    grp_AddRoundKey_fu_955->ap_return_11(grp_AddRoundKey_fu_955_ap_return_11);
    grp_AddRoundKey_fu_955->ap_return_12(grp_AddRoundKey_fu_955_ap_return_12);
    grp_AddRoundKey_fu_955->ap_return_13(grp_AddRoundKey_fu_955_ap_return_13);
    grp_AddRoundKey_fu_955->ap_return_14(grp_AddRoundKey_fu_955_ap_return_14);
    grp_AddRoundKey_fu_955->ap_return_15(grp_AddRoundKey_fu_955_ap_return_15);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln591_fu_1293_p2);
    sensitive << ( ctx_Iv_load_1_lcssa_reg_818 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln574_fu_1070_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_bi_2_phi_fu_927_p4);
    sensitive << ( icmp_ln575_reg_1507 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( bi_2_reg_924 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln574_fu_1070_p2 );

    SC_METHOD(thread_bi_fu_1310_p2);
    sensitive << ( ap_phi_mux_bi_2_phi_fu_927_p4 );

    SC_METHOD(thread_buf_r_address0);
    sensitive << ( buf_addr_reg_2252 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( zext_ln597_fu_1300_p1 );

    SC_METHOD(thread_buf_r_ce0);
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_buf_r_d0);
    sensitive << ( buf_r_q0 );
    sensitive << ( buffer_q1 );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_buf_r_we0);
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_buffer_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln55_reg_1519 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_buffer_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( sext_ln597_fu_1305_p1 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_buffer_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_AddRoundKey_fu_955_ap_done );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_buffer_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_AddRoundKey_fu_955_ap_done );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_buffer_d0);
    sensitive << ( ctx_Iv_q0 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( x_0_3_6_reg_2043 );
    sensitive << ( x_1_1_6_reg_2053 );
    sensitive << ( x_1_3_6_reg_2063 );
    sensitive << ( x_2_1_6_reg_2073 );
    sensitive << ( x_2_3_6_reg_2083 );
    sensitive << ( x_3_1_6_reg_2093 );
    sensitive << ( x_3_3_6_reg_2103 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( grp_AddRoundKey_fu_955_ap_return_1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_buffer_d1);
    sensitive << ( x_0_2_6_reg_2038 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( x_1_0_5_reg_2048 );
    sensitive << ( x_1_2_6_reg_2058 );
    sensitive << ( x_2_0_5_reg_2068 );
    sensitive << ( x_2_2_6_reg_2078 );
    sensitive << ( x_3_0_5_reg_2088 );
    sensitive << ( x_3_2_6_reg_2098 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( grp_AddRoundKey_fu_955_ap_return_0 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_buffer_we0);
    sensitive << ( grp_AddRoundKey_fu_955_ap_done );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_buffer_we1);
    sensitive << ( grp_AddRoundKey_fu_955_ap_done );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_ctx_Iv_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln55_fu_1100_p1 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_ctx_Iv_address1);
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( zext_ln587_fu_1288_p1 );

    SC_METHOD(thread_ctx_Iv_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_ctx_Iv_ce1);
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_ctx_Iv_d0);
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_ctx_Iv_d1);
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( add_ln591_fu_1293_p2 );

    SC_METHOD(thread_ctx_Iv_we0);
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( grp_fu_1064_p2 );

    SC_METHOD(thread_ctx_Iv_we1);
    sensitive << ( icmp_ln575_reg_1507 );
    sensitive << ( grp_fu_1064_p2 );
    sensitive << ( icmp_ln587_reg_2113 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( icmp_ln587_1_fu_1282_p2 );
    sensitive << ( icmp_ln587_1_reg_2122 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( icmp_ln587_2_reg_2131 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( icmp_ln587_3_reg_2140 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( icmp_ln587_4_reg_2149 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( icmp_ln587_5_reg_2158 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( icmp_ln587_6_reg_2167 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( icmp_ln587_7_reg_2176 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( icmp_ln587_8_reg_2185 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( icmp_ln587_9_reg_2194 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( icmp_ln587_10_reg_2203 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( icmp_ln587_11_reg_2212 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( icmp_ln587_12_reg_2221 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( icmp_ln587_13_reg_2230 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( icmp_ln587_14_reg_2239 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( icmp_ln587_15_reg_2248 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_ctx_RoundKey_address0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_AddRoundKey_fu_955_RoundKey_address0 );

    SC_METHOD(thread_ctx_RoundKey_address1);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_AddRoundKey_fu_955_RoundKey_address1 );

    SC_METHOD(thread_ctx_RoundKey_ce0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_AddRoundKey_fu_955_RoundKey_ce0 );

    SC_METHOD(thread_ctx_RoundKey_ce1);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_AddRoundKey_fu_955_RoundKey_ce1 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_ap_start);
    sensitive << ( grp_AddRoundKey_fu_955_ap_start_reg );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_round);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( zext_ln448_reg_1948 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_0_0_read);
    sensitive << ( x_0_0_2_reg_1529 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_0_0_3_reg_1769 );
    sensitive << ( x_0_0_reg_1868 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_0_1_read);
    sensitive << ( x_0_1_2_reg_1534 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_0_1_4_reg_1799 );
    sensitive << ( x_0_1_reg_1873 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_0_2_read);
    sensitive << ( x_0_2_2_reg_1539 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_0_2_4_reg_1829 );
    sensitive << ( x_0_2_reg_1878 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_0_3_read);
    sensitive << ( x_0_3_2_reg_1544 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_0_3_4_reg_1859 );
    sensitive << ( x_0_3_reg_1883 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_1_0_read);
    sensitive << ( x_1_0_2_reg_1549 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_1_0_3_reg_1775 );
    sensitive << ( x_1_0_reg_1888 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_1_1_read);
    sensitive << ( x_1_1_2_reg_1554 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_1_1_4_reg_1805 );
    sensitive << ( x_1_1_reg_1893 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_1_2_read);
    sensitive << ( x_1_2_2_reg_1559 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_1_2_4_reg_1835 );
    sensitive << ( x_1_2_reg_1898 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_1_3_read);
    sensitive << ( x_1_3_2_reg_1564 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_1_3_4_reg_1841 );
    sensitive << ( x_1_3_reg_1903 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_2_0_read);
    sensitive << ( x_2_0_2_reg_1569 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_2_0_3_reg_1781 );
    sensitive << ( x_2_0_reg_1908 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_2_1_read);
    sensitive << ( x_2_1_2_reg_1574 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_2_1_4_reg_1811 );
    sensitive << ( x_2_1_reg_1913 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_2_2_read);
    sensitive << ( x_2_2_2_reg_1579 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_2_2_4_reg_1817 );
    sensitive << ( x_2_2_reg_1918 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_2_3_read);
    sensitive << ( x_2_3_2_reg_1584 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_2_3_4_reg_1847 );
    sensitive << ( x_2_3_reg_1923 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_3_0_read);
    sensitive << ( x_3_0_2_reg_1589 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_3_0_3_reg_1787 );
    sensitive << ( x_3_0_reg_1928 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_3_1_read);
    sensitive << ( x_3_1_2_reg_1594 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_3_1_4_reg_1793 );
    sensitive << ( x_3_1_reg_1933 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_3_2_read);
    sensitive << ( x_3_2_2_reg_1599 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_3_2_4_reg_1823 );
    sensitive << ( x_3_2_reg_1938 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_AddRoundKey_fu_955_state_3_3_read);
    sensitive << ( x_3_3_2_reg_1604 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( x_3_3_4_reg_1853 );
    sensitive << ( x_3_3_reg_1943 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_fu_1064_p2);
    sensitive << ( ctx_Iv_q0 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_i_5_fu_1076_p2);
    sensitive << ( i_0_reg_627 );

    SC_METHOD(thread_i_fu_1094_p2);
    sensitive << ( i_0_i_reg_651 );

    SC_METHOD(thread_icmp_ln444_fu_1185_p2);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( round_0_i_reg_806 );

    SC_METHOD(thread_icmp_ln54_fu_1088_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_0_i_reg_651 );

    SC_METHOD(thread_icmp_ln574_fu_1070_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_627 );

    SC_METHOD(thread_icmp_ln575_fu_1082_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln574_fu_1070_p2 );
    sensitive << ( bi_0_reg_639 );

    SC_METHOD(thread_icmp_ln587_1_fu_1282_p2);
    sensitive << ( ctx_Iv_q1 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_round_fu_1276_p2);
    sensitive << ( round_0_i_reg_806 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_fu_1105_p1 );

    SC_METHOD(thread_sbox_address1);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_1_fu_1110_p1 );

    SC_METHOD(thread_sbox_address10);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_10_fu_1155_p1 );

    SC_METHOD(thread_sbox_address11);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_11_fu_1160_p1 );

    SC_METHOD(thread_sbox_address12);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_12_fu_1165_p1 );

    SC_METHOD(thread_sbox_address13);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_13_fu_1170_p1 );

    SC_METHOD(thread_sbox_address14);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_14_fu_1175_p1 );

    SC_METHOD(thread_sbox_address15);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_15_fu_1180_p1 );

    SC_METHOD(thread_sbox_address2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_2_fu_1115_p1 );

    SC_METHOD(thread_sbox_address3);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_3_fu_1120_p1 );

    SC_METHOD(thread_sbox_address4);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_4_fu_1125_p1 );

    SC_METHOD(thread_sbox_address5);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_5_fu_1130_p1 );

    SC_METHOD(thread_sbox_address6);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_6_fu_1135_p1 );

    SC_METHOD(thread_sbox_address7);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_7_fu_1140_p1 );

    SC_METHOD(thread_sbox_address8);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_8_fu_1145_p1 );

    SC_METHOD(thread_sbox_address9);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln285_9_fu_1150_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sbox_ce1);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sbox_ce10);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sbox_ce11);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sbox_ce12);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sbox_ce13);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sbox_ce14);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sbox_ce15);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sbox_ce2);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sbox_ce3);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sbox_ce4);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sbox_ce5);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sbox_ce6);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sbox_ce7);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sbox_ce8);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sbox_ce9);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sext_ln597_fu_1305_p1);
    sensitive << ( ap_phi_mux_bi_2_phi_fu_927_p4 );

    SC_METHOD(thread_zext_ln285_10_fu_1155_p1);
    sensitive << ( state_2_2_read_ass_reg_707 );

    SC_METHOD(thread_zext_ln285_11_fu_1160_p1);
    sensitive << ( state_3_2_read_ass_reg_671 );

    SC_METHOD(thread_zext_ln285_12_fu_1165_p1);
    sensitive << ( state_0_3_read_ass_reg_770 );

    SC_METHOD(thread_zext_ln285_13_fu_1170_p1);
    sensitive << ( state_1_3_read_ass_reg_734 );

    SC_METHOD(thread_zext_ln285_14_fu_1175_p1);
    sensitive << ( state_2_3_read_ass_reg_698 );

    SC_METHOD(thread_zext_ln285_15_fu_1180_p1);
    sensitive << ( state_3_3_read_ass_reg_662 );

    SC_METHOD(thread_zext_ln285_1_fu_1110_p1);
    sensitive << ( state_1_0_read_ass_reg_761 );

    SC_METHOD(thread_zext_ln285_2_fu_1115_p1);
    sensitive << ( state_2_0_read_ass_reg_725 );

    SC_METHOD(thread_zext_ln285_3_fu_1120_p1);
    sensitive << ( state_3_0_read_ass_reg_689 );

    SC_METHOD(thread_zext_ln285_4_fu_1125_p1);
    sensitive << ( state_0_1_read_ass_reg_788 );

    SC_METHOD(thread_zext_ln285_5_fu_1130_p1);
    sensitive << ( state_1_1_read_ass_reg_752 );

    SC_METHOD(thread_zext_ln285_6_fu_1135_p1);
    sensitive << ( state_2_1_read_ass_reg_716 );

    SC_METHOD(thread_zext_ln285_7_fu_1140_p1);
    sensitive << ( state_3_1_read_ass_reg_680 );

    SC_METHOD(thread_zext_ln285_8_fu_1145_p1);
    sensitive << ( state_0_2_read_ass_reg_779 );

    SC_METHOD(thread_zext_ln285_9_fu_1150_p1);
    sensitive << ( state_1_2_read_ass_reg_743 );

    SC_METHOD(thread_zext_ln285_fu_1105_p1);
    sensitive << ( state_0_0_read_ass_reg_797 );

    SC_METHOD(thread_zext_ln448_fu_1271_p1);
    sensitive << ( round_0_i_reg_806 );

    SC_METHOD(thread_zext_ln55_fu_1100_p1);
    sensitive << ( i_0_i_reg_651 );

    SC_METHOD(thread_zext_ln587_fu_1288_p1);
    sensitive << ( ctx_Iv_addr_1_lcssa7_reg_855 );

    SC_METHOD(thread_zext_ln597_fu_1300_p1);
    sensitive << ( i_0_reg_627 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln575_fu_1082_p2 );
    sensitive << ( icmp_ln574_fu_1070_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln54_fu_1088_p2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( grp_AddRoundKey_fu_955_ap_done );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( grp_fu_1064_p2 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( icmp_ln587_1_fu_1282_p2 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( icmp_ln444_fu_1185_p2 );

    ap_CS_fsm = "000000000000000000000000000000000000000001";
    grp_AddRoundKey_fu_955_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AES_CTR_xcrypt_buffe_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ctx_RoundKey_address0, "(port)ctx_RoundKey_address0");
    sc_trace(mVcdFile, ctx_RoundKey_ce0, "(port)ctx_RoundKey_ce0");
    sc_trace(mVcdFile, ctx_RoundKey_q0, "(port)ctx_RoundKey_q0");
    sc_trace(mVcdFile, ctx_RoundKey_address1, "(port)ctx_RoundKey_address1");
    sc_trace(mVcdFile, ctx_RoundKey_ce1, "(port)ctx_RoundKey_ce1");
    sc_trace(mVcdFile, ctx_RoundKey_q1, "(port)ctx_RoundKey_q1");
    sc_trace(mVcdFile, ctx_Iv_address0, "(port)ctx_Iv_address0");
    sc_trace(mVcdFile, ctx_Iv_ce0, "(port)ctx_Iv_ce0");
    sc_trace(mVcdFile, ctx_Iv_we0, "(port)ctx_Iv_we0");
    sc_trace(mVcdFile, ctx_Iv_d0, "(port)ctx_Iv_d0");
    sc_trace(mVcdFile, ctx_Iv_q0, "(port)ctx_Iv_q0");
    sc_trace(mVcdFile, ctx_Iv_address1, "(port)ctx_Iv_address1");
    sc_trace(mVcdFile, ctx_Iv_ce1, "(port)ctx_Iv_ce1");
    sc_trace(mVcdFile, ctx_Iv_we1, "(port)ctx_Iv_we1");
    sc_trace(mVcdFile, ctx_Iv_d1, "(port)ctx_Iv_d1");
    sc_trace(mVcdFile, ctx_Iv_q1, "(port)ctx_Iv_q1");
    sc_trace(mVcdFile, buf_r_address0, "(port)buf_r_address0");
    sc_trace(mVcdFile, buf_r_ce0, "(port)buf_r_ce0");
    sc_trace(mVcdFile, buf_r_we0, "(port)buf_r_we0");
    sc_trace(mVcdFile, buf_r_d0, "(port)buf_r_d0");
    sc_trace(mVcdFile, buf_r_q0, "(port)buf_r_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, sbox_address1, "sbox_address1");
    sc_trace(mVcdFile, sbox_ce1, "sbox_ce1");
    sc_trace(mVcdFile, sbox_q1, "sbox_q1");
    sc_trace(mVcdFile, sbox_address2, "sbox_address2");
    sc_trace(mVcdFile, sbox_ce2, "sbox_ce2");
    sc_trace(mVcdFile, sbox_q2, "sbox_q2");
    sc_trace(mVcdFile, sbox_address3, "sbox_address3");
    sc_trace(mVcdFile, sbox_ce3, "sbox_ce3");
    sc_trace(mVcdFile, sbox_q3, "sbox_q3");
    sc_trace(mVcdFile, sbox_address4, "sbox_address4");
    sc_trace(mVcdFile, sbox_ce4, "sbox_ce4");
    sc_trace(mVcdFile, sbox_q4, "sbox_q4");
    sc_trace(mVcdFile, sbox_address5, "sbox_address5");
    sc_trace(mVcdFile, sbox_ce5, "sbox_ce5");
    sc_trace(mVcdFile, sbox_q5, "sbox_q5");
    sc_trace(mVcdFile, sbox_address6, "sbox_address6");
    sc_trace(mVcdFile, sbox_ce6, "sbox_ce6");
    sc_trace(mVcdFile, sbox_q6, "sbox_q6");
    sc_trace(mVcdFile, sbox_address7, "sbox_address7");
    sc_trace(mVcdFile, sbox_ce7, "sbox_ce7");
    sc_trace(mVcdFile, sbox_q7, "sbox_q7");
    sc_trace(mVcdFile, sbox_address8, "sbox_address8");
    sc_trace(mVcdFile, sbox_ce8, "sbox_ce8");
    sc_trace(mVcdFile, sbox_q8, "sbox_q8");
    sc_trace(mVcdFile, sbox_address9, "sbox_address9");
    sc_trace(mVcdFile, sbox_ce9, "sbox_ce9");
    sc_trace(mVcdFile, sbox_q9, "sbox_q9");
    sc_trace(mVcdFile, sbox_address10, "sbox_address10");
    sc_trace(mVcdFile, sbox_ce10, "sbox_ce10");
    sc_trace(mVcdFile, sbox_q10, "sbox_q10");
    sc_trace(mVcdFile, sbox_address11, "sbox_address11");
    sc_trace(mVcdFile, sbox_ce11, "sbox_ce11");
    sc_trace(mVcdFile, sbox_q11, "sbox_q11");
    sc_trace(mVcdFile, sbox_address12, "sbox_address12");
    sc_trace(mVcdFile, sbox_ce12, "sbox_ce12");
    sc_trace(mVcdFile, sbox_q12, "sbox_q12");
    sc_trace(mVcdFile, sbox_address13, "sbox_address13");
    sc_trace(mVcdFile, sbox_ce13, "sbox_ce13");
    sc_trace(mVcdFile, sbox_q13, "sbox_q13");
    sc_trace(mVcdFile, sbox_address14, "sbox_address14");
    sc_trace(mVcdFile, sbox_ce14, "sbox_ce14");
    sc_trace(mVcdFile, sbox_q14, "sbox_q14");
    sc_trace(mVcdFile, sbox_address15, "sbox_address15");
    sc_trace(mVcdFile, sbox_ce15, "sbox_ce15");
    sc_trace(mVcdFile, sbox_q15, "sbox_q15");
    sc_trace(mVcdFile, i_5_fu_1076_p2, "i_5_fu_1076_p2");
    sc_trace(mVcdFile, i_5_reg_1502, "i_5_reg_1502");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln575_fu_1082_p2, "icmp_ln575_fu_1082_p2");
    sc_trace(mVcdFile, icmp_ln575_reg_1507, "icmp_ln575_reg_1507");
    sc_trace(mVcdFile, icmp_ln574_fu_1070_p2, "icmp_ln574_fu_1070_p2");
    sc_trace(mVcdFile, i_fu_1094_p2, "i_fu_1094_p2");
    sc_trace(mVcdFile, i_reg_1514, "i_reg_1514");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln55_fu_1100_p1, "zext_ln55_fu_1100_p1");
    sc_trace(mVcdFile, zext_ln55_reg_1519, "zext_ln55_reg_1519");
    sc_trace(mVcdFile, icmp_ln54_fu_1088_p2, "icmp_ln54_fu_1088_p2");
    sc_trace(mVcdFile, buffer_q0, "buffer_q0");
    sc_trace(mVcdFile, x_0_0_2_reg_1529, "x_0_0_2_reg_1529");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, buffer_q1, "buffer_q1");
    sc_trace(mVcdFile, x_0_1_2_reg_1534, "x_0_1_2_reg_1534");
    sc_trace(mVcdFile, x_0_2_2_reg_1539, "x_0_2_2_reg_1539");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, x_0_3_2_reg_1544, "x_0_3_2_reg_1544");
    sc_trace(mVcdFile, x_1_0_2_reg_1549, "x_1_0_2_reg_1549");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, x_1_1_2_reg_1554, "x_1_1_2_reg_1554");
    sc_trace(mVcdFile, x_1_2_2_reg_1559, "x_1_2_2_reg_1559");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, x_1_3_2_reg_1564, "x_1_3_2_reg_1564");
    sc_trace(mVcdFile, x_2_0_2_reg_1569, "x_2_0_2_reg_1569");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, x_2_1_2_reg_1574, "x_2_1_2_reg_1574");
    sc_trace(mVcdFile, x_2_2_2_reg_1579, "x_2_2_2_reg_1579");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, x_2_3_2_reg_1584, "x_2_3_2_reg_1584");
    sc_trace(mVcdFile, x_3_0_2_reg_1589, "x_3_0_2_reg_1589");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, x_3_1_2_reg_1594, "x_3_1_2_reg_1594");
    sc_trace(mVcdFile, x_3_2_2_reg_1599, "x_3_2_2_reg_1599");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, x_3_3_2_reg_1604, "x_3_3_2_reg_1604");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_ready, "grp_AddRoundKey_fu_955_ap_ready");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_done, "grp_AddRoundKey_fu_955_ap_done");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, x_0_0_3_reg_1769, "x_0_0_3_reg_1769");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, x_1_0_3_reg_1775, "x_1_0_3_reg_1775");
    sc_trace(mVcdFile, x_2_0_3_reg_1781, "x_2_0_3_reg_1781");
    sc_trace(mVcdFile, x_3_0_3_reg_1787, "x_3_0_3_reg_1787");
    sc_trace(mVcdFile, x_3_1_4_reg_1793, "x_3_1_4_reg_1793");
    sc_trace(mVcdFile, x_0_1_4_reg_1799, "x_0_1_4_reg_1799");
    sc_trace(mVcdFile, x_1_1_4_reg_1805, "x_1_1_4_reg_1805");
    sc_trace(mVcdFile, x_2_1_4_reg_1811, "x_2_1_4_reg_1811");
    sc_trace(mVcdFile, x_2_2_4_reg_1817, "x_2_2_4_reg_1817");
    sc_trace(mVcdFile, x_3_2_4_reg_1823, "x_3_2_4_reg_1823");
    sc_trace(mVcdFile, x_0_2_4_reg_1829, "x_0_2_4_reg_1829");
    sc_trace(mVcdFile, x_1_2_4_reg_1835, "x_1_2_4_reg_1835");
    sc_trace(mVcdFile, x_1_3_4_reg_1841, "x_1_3_4_reg_1841");
    sc_trace(mVcdFile, x_2_3_4_reg_1847, "x_2_3_4_reg_1847");
    sc_trace(mVcdFile, x_3_3_4_reg_1853, "x_3_3_4_reg_1853");
    sc_trace(mVcdFile, x_0_3_4_reg_1859, "x_0_3_4_reg_1859");
    sc_trace(mVcdFile, x_0_0_reg_1868, "x_0_0_reg_1868");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, x_0_1_reg_1873, "x_0_1_reg_1873");
    sc_trace(mVcdFile, x_0_2_reg_1878, "x_0_2_reg_1878");
    sc_trace(mVcdFile, x_0_3_reg_1883, "x_0_3_reg_1883");
    sc_trace(mVcdFile, x_1_0_reg_1888, "x_1_0_reg_1888");
    sc_trace(mVcdFile, x_1_1_reg_1893, "x_1_1_reg_1893");
    sc_trace(mVcdFile, x_1_2_reg_1898, "x_1_2_reg_1898");
    sc_trace(mVcdFile, x_1_3_reg_1903, "x_1_3_reg_1903");
    sc_trace(mVcdFile, x_2_0_reg_1908, "x_2_0_reg_1908");
    sc_trace(mVcdFile, x_2_1_reg_1913, "x_2_1_reg_1913");
    sc_trace(mVcdFile, x_2_2_reg_1918, "x_2_2_reg_1918");
    sc_trace(mVcdFile, x_2_3_reg_1923, "x_2_3_reg_1923");
    sc_trace(mVcdFile, x_3_0_reg_1928, "x_3_0_reg_1928");
    sc_trace(mVcdFile, x_3_1_reg_1933, "x_3_1_reg_1933");
    sc_trace(mVcdFile, x_3_2_reg_1938, "x_3_2_reg_1938");
    sc_trace(mVcdFile, x_3_3_reg_1943, "x_3_3_reg_1943");
    sc_trace(mVcdFile, zext_ln448_fu_1271_p1, "zext_ln448_fu_1271_p1");
    sc_trace(mVcdFile, zext_ln448_reg_1948, "zext_ln448_reg_1948");
    sc_trace(mVcdFile, round_fu_1276_p2, "round_fu_1276_p2");
    sc_trace(mVcdFile, round_reg_1953, "round_reg_1953");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, x_0_2_6_reg_2038, "x_0_2_6_reg_2038");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, x_0_3_6_reg_2043, "x_0_3_6_reg_2043");
    sc_trace(mVcdFile, x_1_0_5_reg_2048, "x_1_0_5_reg_2048");
    sc_trace(mVcdFile, x_1_1_6_reg_2053, "x_1_1_6_reg_2053");
    sc_trace(mVcdFile, x_1_2_6_reg_2058, "x_1_2_6_reg_2058");
    sc_trace(mVcdFile, x_1_3_6_reg_2063, "x_1_3_6_reg_2063");
    sc_trace(mVcdFile, x_2_0_5_reg_2068, "x_2_0_5_reg_2068");
    sc_trace(mVcdFile, x_2_1_6_reg_2073, "x_2_1_6_reg_2073");
    sc_trace(mVcdFile, x_2_2_6_reg_2078, "x_2_2_6_reg_2078");
    sc_trace(mVcdFile, x_2_3_6_reg_2083, "x_2_3_6_reg_2083");
    sc_trace(mVcdFile, x_3_0_5_reg_2088, "x_3_0_5_reg_2088");
    sc_trace(mVcdFile, x_3_1_6_reg_2093, "x_3_1_6_reg_2093");
    sc_trace(mVcdFile, x_3_2_6_reg_2098, "x_3_2_6_reg_2098");
    sc_trace(mVcdFile, x_3_3_6_reg_2103, "x_3_3_6_reg_2103");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, grp_fu_1064_p2, "grp_fu_1064_p2");
    sc_trace(mVcdFile, icmp_ln587_reg_2113, "icmp_ln587_reg_2113");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, icmp_ln587_1_fu_1282_p2, "icmp_ln587_1_fu_1282_p2");
    sc_trace(mVcdFile, icmp_ln587_1_reg_2122, "icmp_ln587_1_reg_2122");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, icmp_ln587_2_reg_2131, "icmp_ln587_2_reg_2131");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, icmp_ln587_3_reg_2140, "icmp_ln587_3_reg_2140");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, icmp_ln587_4_reg_2149, "icmp_ln587_4_reg_2149");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, icmp_ln587_5_reg_2158, "icmp_ln587_5_reg_2158");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, icmp_ln587_6_reg_2167, "icmp_ln587_6_reg_2167");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, icmp_ln587_7_reg_2176, "icmp_ln587_7_reg_2176");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, icmp_ln587_8_reg_2185, "icmp_ln587_8_reg_2185");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, icmp_ln587_9_reg_2194, "icmp_ln587_9_reg_2194");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, icmp_ln587_10_reg_2203, "icmp_ln587_10_reg_2203");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, icmp_ln587_11_reg_2212, "icmp_ln587_11_reg_2212");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, icmp_ln587_12_reg_2221, "icmp_ln587_12_reg_2221");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, icmp_ln587_13_reg_2230, "icmp_ln587_13_reg_2230");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, icmp_ln587_14_reg_2239, "icmp_ln587_14_reg_2239");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, icmp_ln587_15_reg_2248, "icmp_ln587_15_reg_2248");
    sc_trace(mVcdFile, buf_addr_reg_2252, "buf_addr_reg_2252");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, bi_fu_1310_p2, "bi_fu_1310_p2");
    sc_trace(mVcdFile, bi_reg_2262, "bi_reg_2262");
    sc_trace(mVcdFile, buffer_address0, "buffer_address0");
    sc_trace(mVcdFile, buffer_ce0, "buffer_ce0");
    sc_trace(mVcdFile, buffer_we0, "buffer_we0");
    sc_trace(mVcdFile, buffer_d0, "buffer_d0");
    sc_trace(mVcdFile, buffer_address1, "buffer_address1");
    sc_trace(mVcdFile, buffer_ce1, "buffer_ce1");
    sc_trace(mVcdFile, buffer_we1, "buffer_we1");
    sc_trace(mVcdFile, buffer_d1, "buffer_d1");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_ready, "call_ret4_MixColumns_fu_935_ap_ready");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_0, "call_ret4_MixColumns_fu_935_ap_return_0");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_1, "call_ret4_MixColumns_fu_935_ap_return_1");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_2, "call_ret4_MixColumns_fu_935_ap_return_2");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_3, "call_ret4_MixColumns_fu_935_ap_return_3");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_4, "call_ret4_MixColumns_fu_935_ap_return_4");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_5, "call_ret4_MixColumns_fu_935_ap_return_5");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_6, "call_ret4_MixColumns_fu_935_ap_return_6");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_7, "call_ret4_MixColumns_fu_935_ap_return_7");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_8, "call_ret4_MixColumns_fu_935_ap_return_8");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_9, "call_ret4_MixColumns_fu_935_ap_return_9");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_10, "call_ret4_MixColumns_fu_935_ap_return_10");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_11, "call_ret4_MixColumns_fu_935_ap_return_11");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_12, "call_ret4_MixColumns_fu_935_ap_return_12");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_13, "call_ret4_MixColumns_fu_935_ap_return_13");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_14, "call_ret4_MixColumns_fu_935_ap_return_14");
    sc_trace(mVcdFile, call_ret4_MixColumns_fu_935_ap_return_15, "call_ret4_MixColumns_fu_935_ap_return_15");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_start, "grp_AddRoundKey_fu_955_ap_start");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_idle, "grp_AddRoundKey_fu_955_ap_idle");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_round, "grp_AddRoundKey_fu_955_round");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_0_0_read, "grp_AddRoundKey_fu_955_state_0_0_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_0_1_read, "grp_AddRoundKey_fu_955_state_0_1_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_0_2_read, "grp_AddRoundKey_fu_955_state_0_2_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_0_3_read, "grp_AddRoundKey_fu_955_state_0_3_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_1_0_read, "grp_AddRoundKey_fu_955_state_1_0_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_1_1_read, "grp_AddRoundKey_fu_955_state_1_1_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_1_2_read, "grp_AddRoundKey_fu_955_state_1_2_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_1_3_read, "grp_AddRoundKey_fu_955_state_1_3_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_2_0_read, "grp_AddRoundKey_fu_955_state_2_0_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_2_1_read, "grp_AddRoundKey_fu_955_state_2_1_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_2_2_read, "grp_AddRoundKey_fu_955_state_2_2_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_2_3_read, "grp_AddRoundKey_fu_955_state_2_3_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_3_0_read, "grp_AddRoundKey_fu_955_state_3_0_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_3_1_read, "grp_AddRoundKey_fu_955_state_3_1_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_3_2_read, "grp_AddRoundKey_fu_955_state_3_2_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_state_3_3_read, "grp_AddRoundKey_fu_955_state_3_3_read");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_RoundKey_address0, "grp_AddRoundKey_fu_955_RoundKey_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_RoundKey_ce0, "grp_AddRoundKey_fu_955_RoundKey_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_RoundKey_address1, "grp_AddRoundKey_fu_955_RoundKey_address1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_RoundKey_ce1, "grp_AddRoundKey_fu_955_RoundKey_ce1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_0, "grp_AddRoundKey_fu_955_ap_return_0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_1, "grp_AddRoundKey_fu_955_ap_return_1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_2, "grp_AddRoundKey_fu_955_ap_return_2");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_3, "grp_AddRoundKey_fu_955_ap_return_3");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_4, "grp_AddRoundKey_fu_955_ap_return_4");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_5, "grp_AddRoundKey_fu_955_ap_return_5");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_6, "grp_AddRoundKey_fu_955_ap_return_6");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_7, "grp_AddRoundKey_fu_955_ap_return_7");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_8, "grp_AddRoundKey_fu_955_ap_return_8");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_9, "grp_AddRoundKey_fu_955_ap_return_9");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_10, "grp_AddRoundKey_fu_955_ap_return_10");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_11, "grp_AddRoundKey_fu_955_ap_return_11");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_12, "grp_AddRoundKey_fu_955_ap_return_12");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_13, "grp_AddRoundKey_fu_955_ap_return_13");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_14, "grp_AddRoundKey_fu_955_ap_return_14");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_return_15, "grp_AddRoundKey_fu_955_ap_return_15");
    sc_trace(mVcdFile, i_0_reg_627, "i_0_reg_627");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, bi_0_reg_639, "bi_0_reg_639");
    sc_trace(mVcdFile, i_0_i_reg_651, "i_0_i_reg_651");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, state_3_3_read_ass_reg_662, "state_3_3_read_ass_reg_662");
    sc_trace(mVcdFile, state_3_2_read_ass_reg_671, "state_3_2_read_ass_reg_671");
    sc_trace(mVcdFile, state_3_1_read_ass_reg_680, "state_3_1_read_ass_reg_680");
    sc_trace(mVcdFile, state_3_0_read_ass_reg_689, "state_3_0_read_ass_reg_689");
    sc_trace(mVcdFile, state_2_3_read_ass_reg_698, "state_2_3_read_ass_reg_698");
    sc_trace(mVcdFile, state_2_2_read_ass_reg_707, "state_2_2_read_ass_reg_707");
    sc_trace(mVcdFile, state_2_1_read_ass_reg_716, "state_2_1_read_ass_reg_716");
    sc_trace(mVcdFile, state_2_0_read_ass_reg_725, "state_2_0_read_ass_reg_725");
    sc_trace(mVcdFile, state_1_3_read_ass_reg_734, "state_1_3_read_ass_reg_734");
    sc_trace(mVcdFile, state_1_2_read_ass_reg_743, "state_1_2_read_ass_reg_743");
    sc_trace(mVcdFile, state_1_1_read_ass_reg_752, "state_1_1_read_ass_reg_752");
    sc_trace(mVcdFile, state_1_0_read_ass_reg_761, "state_1_0_read_ass_reg_761");
    sc_trace(mVcdFile, state_0_3_read_ass_reg_770, "state_0_3_read_ass_reg_770");
    sc_trace(mVcdFile, state_0_2_read_ass_reg_779, "state_0_2_read_ass_reg_779");
    sc_trace(mVcdFile, state_0_1_read_ass_reg_788, "state_0_1_read_ass_reg_788");
    sc_trace(mVcdFile, state_0_0_read_ass_reg_797, "state_0_0_read_ass_reg_797");
    sc_trace(mVcdFile, round_0_i_reg_806, "round_0_i_reg_806");
    sc_trace(mVcdFile, ctx_Iv_load_1_lcssa_reg_818, "ctx_Iv_load_1_lcssa_reg_818");
    sc_trace(mVcdFile, ctx_Iv_addr_1_lcssa7_reg_855, "ctx_Iv_addr_1_lcssa7_reg_855");
    sc_trace(mVcdFile, ap_phi_mux_bi_2_phi_fu_927_p4, "ap_phi_mux_bi_2_phi_fu_927_p4");
    sc_trace(mVcdFile, bi_2_reg_924, "bi_2_reg_924");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_955_ap_start_reg, "grp_AddRoundKey_fu_955_ap_start_reg");
    sc_trace(mVcdFile, icmp_ln444_fu_1185_p2, "icmp_ln444_fu_1185_p2");
    sc_trace(mVcdFile, zext_ln285_fu_1105_p1, "zext_ln285_fu_1105_p1");
    sc_trace(mVcdFile, zext_ln285_1_fu_1110_p1, "zext_ln285_1_fu_1110_p1");
    sc_trace(mVcdFile, zext_ln285_2_fu_1115_p1, "zext_ln285_2_fu_1115_p1");
    sc_trace(mVcdFile, zext_ln285_3_fu_1120_p1, "zext_ln285_3_fu_1120_p1");
    sc_trace(mVcdFile, zext_ln285_4_fu_1125_p1, "zext_ln285_4_fu_1125_p1");
    sc_trace(mVcdFile, zext_ln285_5_fu_1130_p1, "zext_ln285_5_fu_1130_p1");
    sc_trace(mVcdFile, zext_ln285_6_fu_1135_p1, "zext_ln285_6_fu_1135_p1");
    sc_trace(mVcdFile, zext_ln285_7_fu_1140_p1, "zext_ln285_7_fu_1140_p1");
    sc_trace(mVcdFile, zext_ln285_8_fu_1145_p1, "zext_ln285_8_fu_1145_p1");
    sc_trace(mVcdFile, zext_ln285_9_fu_1150_p1, "zext_ln285_9_fu_1150_p1");
    sc_trace(mVcdFile, zext_ln285_10_fu_1155_p1, "zext_ln285_10_fu_1155_p1");
    sc_trace(mVcdFile, zext_ln285_11_fu_1160_p1, "zext_ln285_11_fu_1160_p1");
    sc_trace(mVcdFile, zext_ln285_12_fu_1165_p1, "zext_ln285_12_fu_1165_p1");
    sc_trace(mVcdFile, zext_ln285_13_fu_1170_p1, "zext_ln285_13_fu_1170_p1");
    sc_trace(mVcdFile, zext_ln285_14_fu_1175_p1, "zext_ln285_14_fu_1175_p1");
    sc_trace(mVcdFile, zext_ln285_15_fu_1180_p1, "zext_ln285_15_fu_1180_p1");
    sc_trace(mVcdFile, zext_ln587_fu_1288_p1, "zext_ln587_fu_1288_p1");
    sc_trace(mVcdFile, zext_ln597_fu_1300_p1, "zext_ln597_fu_1300_p1");
    sc_trace(mVcdFile, sext_ln597_fu_1305_p1, "sext_ln597_fu_1305_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, add_ln591_fu_1293_p2, "add_ln591_fu_1293_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

AES_CTR_xcrypt_buffe::~AES_CTR_xcrypt_buffe() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_U;
    delete buffer_U;
    delete call_ret4_MixColumns_fu_935;
    delete grp_AddRoundKey_fu_955;
}

void AES_CTR_xcrypt_buffe::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        bi_0_reg_639 = bi_reg_2262.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        bi_0_reg_639 = ap_const_lv32_10;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln574_fu_1070_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(icmp_ln575_fu_1082_p2.read(), ap_const_lv1_0))) {
        bi_2_reg_924 = bi_0_reg_639.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && 
                esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1))) {
        bi_2_reg_924 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_2;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_3;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_4;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_5;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_6;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_7;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_8;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_9;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_A;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_B;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_C;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_D;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_1_fu_1282_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_E;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
        ctx_Iv_addr_1_lcssa7_reg_855 = ap_const_lv4_F;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_1_fu_1282_p2.read()))) {
        ctx_Iv_load_1_lcssa_reg_818 = ctx_Iv_q1.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read())))) {
        ctx_Iv_load_1_lcssa_reg_818 = ctx_Iv_q0.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_AddRoundKey_fu_955_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln444_fu_1185_p2.read())))) {
            grp_AddRoundKey_fu_955_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AddRoundKey_fu_955_ap_ready.read())) {
            grp_AddRoundKey_fu_955_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln574_fu_1070_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(icmp_ln575_fu_1082_p2.read(), ap_const_lv1_1))) {
        i_0_i_reg_651 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_0_i_reg_651 = i_reg_1514.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        i_0_reg_627 = i_5_reg_1502.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_627 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(grp_AddRoundKey_fu_955_ap_done.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
            round_0_i_reg_806 = round_reg_1953.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            round_0_i_reg_806 = ap_const_lv4_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        bi_reg_2262 = bi_fu_1310_p2.read();
        buf_addr_reg_2252 =  (sc_lv<4>) (zext_ln597_fu_1300_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_5_reg_1502 = i_5_fu_1076_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_1514 = i_fu_1094_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln574_fu_1070_p2.read(), ap_const_lv1_0))) {
        icmp_ln575_reg_1507 = icmp_ln575_fu_1082_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        icmp_ln587_10_reg_2203 = grp_fu_1064_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        icmp_ln587_11_reg_2212 = grp_fu_1064_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        icmp_ln587_12_reg_2221 = grp_fu_1064_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        icmp_ln587_13_reg_2230 = grp_fu_1064_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        icmp_ln587_14_reg_2239 = grp_fu_1064_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        icmp_ln587_15_reg_2248 = grp_fu_1064_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        icmp_ln587_1_reg_2122 = icmp_ln587_1_fu_1282_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        icmp_ln587_2_reg_2131 = grp_fu_1064_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        icmp_ln587_3_reg_2140 = grp_fu_1064_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        icmp_ln587_4_reg_2149 = grp_fu_1064_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        icmp_ln587_5_reg_2158 = grp_fu_1064_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        icmp_ln587_6_reg_2167 = grp_fu_1064_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        icmp_ln587_7_reg_2176 = grp_fu_1064_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        icmp_ln587_8_reg_2185 = grp_fu_1064_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        icmp_ln587_9_reg_2194 = grp_fu_1064_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        icmp_ln587_reg_2113 = grp_fu_1064_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        round_reg_1953 = round_fu_1276_p2.read();
        x_0_0_reg_1868 = call_ret4_MixColumns_fu_935_ap_return_0.read();
        x_0_1_reg_1873 = call_ret4_MixColumns_fu_935_ap_return_1.read();
        x_0_2_reg_1878 = call_ret4_MixColumns_fu_935_ap_return_2.read();
        x_0_3_reg_1883 = call_ret4_MixColumns_fu_935_ap_return_3.read();
        x_1_0_reg_1888 = call_ret4_MixColumns_fu_935_ap_return_4.read();
        x_1_1_reg_1893 = call_ret4_MixColumns_fu_935_ap_return_5.read();
        x_1_2_reg_1898 = call_ret4_MixColumns_fu_935_ap_return_6.read();
        x_1_3_reg_1903 = call_ret4_MixColumns_fu_935_ap_return_7.read();
        x_2_0_reg_1908 = call_ret4_MixColumns_fu_935_ap_return_8.read();
        x_2_1_reg_1913 = call_ret4_MixColumns_fu_935_ap_return_9.read();
        x_2_2_reg_1918 = call_ret4_MixColumns_fu_935_ap_return_10.read();
        x_2_3_reg_1923 = call_ret4_MixColumns_fu_935_ap_return_11.read();
        x_3_0_reg_1928 = call_ret4_MixColumns_fu_935_ap_return_12.read();
        x_3_1_reg_1933 = call_ret4_MixColumns_fu_935_ap_return_13.read();
        x_3_2_reg_1938 = call_ret4_MixColumns_fu_935_ap_return_14.read();
        x_3_3_reg_1943 = call_ret4_MixColumns_fu_935_ap_return_15.read();
        zext_ln448_reg_1948 = zext_ln448_fu_1271_p1.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
  esl_seteq<1,1,1>(grp_AddRoundKey_fu_955_ap_done.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(grp_AddRoundKey_fu_955_ap_done.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())))) {
        state_0_0_read_ass_reg_797 = grp_AddRoundKey_fu_955_ap_return_0.read();
        state_0_1_read_ass_reg_788 = grp_AddRoundKey_fu_955_ap_return_1.read();
        state_0_2_read_ass_reg_779 = grp_AddRoundKey_fu_955_ap_return_2.read();
        state_0_3_read_ass_reg_770 = grp_AddRoundKey_fu_955_ap_return_3.read();
        state_1_0_read_ass_reg_761 = grp_AddRoundKey_fu_955_ap_return_4.read();
        state_1_1_read_ass_reg_752 = grp_AddRoundKey_fu_955_ap_return_5.read();
        state_1_2_read_ass_reg_743 = grp_AddRoundKey_fu_955_ap_return_6.read();
        state_1_3_read_ass_reg_734 = grp_AddRoundKey_fu_955_ap_return_7.read();
        state_2_0_read_ass_reg_725 = grp_AddRoundKey_fu_955_ap_return_8.read();
        state_2_1_read_ass_reg_716 = grp_AddRoundKey_fu_955_ap_return_9.read();
        state_2_2_read_ass_reg_707 = grp_AddRoundKey_fu_955_ap_return_10.read();
        state_2_3_read_ass_reg_698 = grp_AddRoundKey_fu_955_ap_return_11.read();
        state_3_0_read_ass_reg_689 = grp_AddRoundKey_fu_955_ap_return_12.read();
        state_3_1_read_ass_reg_680 = grp_AddRoundKey_fu_955_ap_return_13.read();
        state_3_2_read_ass_reg_671 = grp_AddRoundKey_fu_955_ap_return_14.read();
        state_3_3_read_ass_reg_662 = grp_AddRoundKey_fu_955_ap_return_15.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        x_0_0_2_reg_1529 = buffer_q0.read();
        x_0_1_2_reg_1534 = buffer_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        x_0_0_3_reg_1769 = sbox_q0.read();
        x_0_1_4_reg_1799 = sbox_q5.read();
        x_0_2_4_reg_1829 = sbox_q10.read();
        x_0_3_4_reg_1859 = sbox_q15.read();
        x_1_0_3_reg_1775 = sbox_q1.read();
        x_1_1_4_reg_1805 = sbox_q6.read();
        x_1_2_4_reg_1835 = sbox_q11.read();
        x_1_3_4_reg_1841 = sbox_q12.read();
        x_2_0_3_reg_1781 = sbox_q2.read();
        x_2_1_4_reg_1811 = sbox_q7.read();
        x_2_2_4_reg_1817 = sbox_q8.read();
        x_2_3_4_reg_1847 = sbox_q13.read();
        x_3_0_3_reg_1787 = sbox_q3.read();
        x_3_1_4_reg_1793 = sbox_q4.read();
        x_3_2_4_reg_1823 = sbox_q9.read();
        x_3_3_4_reg_1853 = sbox_q14.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        x_0_2_2_reg_1539 = buffer_q1.read();
        x_0_3_2_reg_1544 = buffer_q0.read();
    }
    if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_955_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        x_0_2_6_reg_2038 = grp_AddRoundKey_fu_955_ap_return_2.read();
        x_0_3_6_reg_2043 = grp_AddRoundKey_fu_955_ap_return_3.read();
        x_1_0_5_reg_2048 = grp_AddRoundKey_fu_955_ap_return_4.read();
        x_1_1_6_reg_2053 = grp_AddRoundKey_fu_955_ap_return_5.read();
        x_1_2_6_reg_2058 = grp_AddRoundKey_fu_955_ap_return_6.read();
        x_1_3_6_reg_2063 = grp_AddRoundKey_fu_955_ap_return_7.read();
        x_2_0_5_reg_2068 = grp_AddRoundKey_fu_955_ap_return_8.read();
        x_2_1_6_reg_2073 = grp_AddRoundKey_fu_955_ap_return_9.read();
        x_2_2_6_reg_2078 = grp_AddRoundKey_fu_955_ap_return_10.read();
        x_2_3_6_reg_2083 = grp_AddRoundKey_fu_955_ap_return_11.read();
        x_3_0_5_reg_2088 = grp_AddRoundKey_fu_955_ap_return_12.read();
        x_3_1_6_reg_2093 = grp_AddRoundKey_fu_955_ap_return_13.read();
        x_3_2_6_reg_2098 = grp_AddRoundKey_fu_955_ap_return_14.read();
        x_3_3_6_reg_2103 = grp_AddRoundKey_fu_955_ap_return_15.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        x_1_0_2_reg_1549 = buffer_q1.read();
        x_1_1_2_reg_1554 = buffer_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        x_1_2_2_reg_1559 = buffer_q1.read();
        x_1_3_2_reg_1564 = buffer_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        x_2_0_2_reg_1569 = buffer_q1.read();
        x_2_1_2_reg_1574 = buffer_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        x_2_2_2_reg_1579 = buffer_q1.read();
        x_2_3_2_reg_1584 = buffer_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        x_3_0_2_reg_1589 = buffer_q1.read();
        x_3_1_2_reg_1594 = buffer_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        x_3_2_2_reg_1599 = buffer_q1.read();
        x_3_3_2_reg_1604 = buffer_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln54_fu_1088_p2.read()))) {
        zext_ln55_reg_1519 = zext_ln55_fu_1100_p1.read();
    }
}

void AES_CTR_xcrypt_buffe::thread_add_ln591_fu_1293_p2() {
    add_ln591_fu_1293_p2 = (!ctx_Iv_load_1_lcssa_reg_818.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(ctx_Iv_load_1_lcssa_reg_818.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void AES_CTR_xcrypt_buffe::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void AES_CTR_xcrypt_buffe::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln574_fu_1070_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_ap_phi_mux_bi_2_phi_fu_927_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && 
         esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1))) {
        ap_phi_mux_bi_2_phi_fu_927_p4 = ap_const_lv32_0;
    } else {
        ap_phi_mux_bi_2_phi_fu_927_p4 = bi_2_reg_924.read();
    }
}

void AES_CTR_xcrypt_buffe::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln574_fu_1070_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_bi_fu_1310_p2() {
    bi_fu_1310_p2 = (!ap_phi_mux_bi_2_phi_fu_927_p4.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(ap_phi_mux_bi_2_phi_fu_927_p4.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void AES_CTR_xcrypt_buffe::thread_buf_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        buf_r_address0 = buf_addr_reg_2252.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        buf_r_address0 =  (sc_lv<4>) (zext_ln597_fu_1300_p1.read());
    } else {
        buf_r_address0 = "XXXX";
    }
}

void AES_CTR_xcrypt_buffe::thread_buf_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        buf_r_ce0 = ap_const_logic_1;
    } else {
        buf_r_ce0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_buf_r_d0() {
    buf_r_d0 = (buffer_q1.read() ^ buf_r_q0.read());
}

void AES_CTR_xcrypt_buffe::thread_buf_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        buf_r_we0 = ap_const_logic_1;
    } else {
        buf_r_we0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_buffer_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        buffer_address0 =  (sc_lv<4>) (zext_ln55_reg_1519.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        buffer_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        buffer_address0 = "XXXX";
    }
}

void AES_CTR_xcrypt_buffe::thread_buffer_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        buffer_address1 =  (sc_lv<4>) (sext_ln597_fu_1305_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_0);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        buffer_address1 =  (sc_lv<4>) (ap_const_lv64_1);
    } else {
        buffer_address1 = "XXXX";
    }
}

void AES_CTR_xcrypt_buffe::thread_buffer_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_955_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        buffer_ce0 = ap_const_logic_1;
    } else {
        buffer_ce0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_buffer_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         (esl_seteq<1,1,1>(grp_AddRoundKey_fu_955_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        buffer_ce1 = ap_const_logic_1;
    } else {
        buffer_ce1 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_buffer_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        buffer_d0 = x_3_3_6_reg_2103.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        buffer_d0 = x_3_1_6_reg_2093.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        buffer_d0 = x_2_3_6_reg_2083.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        buffer_d0 = x_2_1_6_reg_2073.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        buffer_d0 = x_1_3_6_reg_2063.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        buffer_d0 = x_1_1_6_reg_2053.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        buffer_d0 = x_0_3_6_reg_2043.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        buffer_d0 = grp_AddRoundKey_fu_955_ap_return_1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        buffer_d0 = ctx_Iv_q0.read();
    } else {
        buffer_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_buffer_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        buffer_d1 = x_3_2_6_reg_2098.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        buffer_d1 = x_3_0_5_reg_2088.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        buffer_d1 = x_2_2_6_reg_2078.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        buffer_d1 = x_2_0_5_reg_2068.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        buffer_d1 = x_1_2_6_reg_2058.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        buffer_d1 = x_1_0_5_reg_2048.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        buffer_d1 = x_0_2_6_reg_2038.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        buffer_d1 = grp_AddRoundKey_fu_955_ap_return_0.read();
    } else {
        buffer_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_buffer_we0() {
    if (((esl_seteq<1,1,1>(grp_AddRoundKey_fu_955_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        buffer_we0 = ap_const_logic_1;
    } else {
        buffer_we0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_buffer_we1() {
    if (((esl_seteq<1,1,1>(grp_AddRoundKey_fu_955_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        buffer_we1 = ap_const_logic_1;
    } else {
        buffer_we1 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_ctx_Iv_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        ctx_Iv_address0 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (zext_ln55_fu_1100_p1.read());
    } else {
        ctx_Iv_address0 = "XXXX";
    }
}

void AES_CTR_xcrypt_buffe::thread_ctx_Iv_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (zext_ln587_fu_1288_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        ctx_Iv_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        ctx_Iv_address1 =  (sc_lv<4>) (ap_const_lv64_E);
    } else {
        ctx_Iv_address1 = "XXXX";
    }
}

void AES_CTR_xcrypt_buffe::thread_ctx_Iv_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        ctx_Iv_ce0 = ap_const_logic_1;
    } else {
        ctx_Iv_ce0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_ctx_Iv_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        ctx_Iv_ce1 = ap_const_logic_1;
    } else {
        ctx_Iv_ce1 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_ctx_Iv_d0() {
    ctx_Iv_d0 = ap_const_lv8_0;
}

void AES_CTR_xcrypt_buffe::thread_ctx_Iv_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        ctx_Iv_d1 = add_ln591_fu_1293_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        ctx_Iv_d1 = ap_const_lv8_0;
    } else {
        ctx_Iv_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_ctx_Iv_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
         esl_seteq<1,1,1>(grp_fu_1064_p2.read(), ap_const_lv1_1))) {
        ctx_Iv_we0 = ap_const_logic_1;
    } else {
        ctx_Iv_we0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_ctx_Iv_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && 
          ((((((((((((((((esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
                          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_15_reg_2248.read())) || 
                         (esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
                          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_14_reg_2239.read()))) || 
                        (esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
                         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_13_reg_2230.read()))) || 
                       (esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
                        esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_12_reg_2221.read()))) || 
                      (esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
                       esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_11_reg_2212.read()))) || 
                     (esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
                      esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_10_reg_2203.read()))) || 
                    (esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_9_reg_2194.read()))) || 
                   (esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_8_reg_2185.read()))) || 
                  (esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
                   esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_7_reg_2176.read()))) || 
                 (esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
                  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_6_reg_2167.read()))) || 
                (esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_5_reg_2158.read()))) || 
               (esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_4_reg_2149.read()))) || 
              (esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
               esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_3_reg_2140.read()))) || 
             (esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_2_reg_2131.read()))) || 
            (esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_1_reg_2122.read()))) || 
           (esl_seteq<1,1,1>(icmp_ln575_reg_1507.read(), ap_const_lv1_1) && 
            esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_reg_2113.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(icmp_ln587_1_fu_1282_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
          esl_seteq<1,1,1>(grp_fu_1064_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
          esl_seteq<1,1,1>(grp_fu_1064_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
          esl_seteq<1,1,1>(grp_fu_1064_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
          esl_seteq<1,1,1>(grp_fu_1064_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) && 
          esl_seteq<1,1,1>(grp_fu_1064_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && 
          esl_seteq<1,1,1>(grp_fu_1064_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && 
          esl_seteq<1,1,1>(grp_fu_1064_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
          esl_seteq<1,1,1>(grp_fu_1064_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
          esl_seteq<1,1,1>(grp_fu_1064_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
          esl_seteq<1,1,1>(grp_fu_1064_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && 
          esl_seteq<1,1,1>(grp_fu_1064_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
          esl_seteq<1,1,1>(grp_fu_1064_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && 
          esl_seteq<1,1,1>(grp_fu_1064_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) && 
          esl_seteq<1,1,1>(grp_fu_1064_p2.read(), ap_const_lv1_1)))) {
        ctx_Iv_we1 = ap_const_logic_1;
    } else {
        ctx_Iv_we1 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_ctx_RoundKey_address0() {
    ctx_RoundKey_address0 = grp_AddRoundKey_fu_955_RoundKey_address0.read();
}

void AES_CTR_xcrypt_buffe::thread_ctx_RoundKey_address1() {
    ctx_RoundKey_address1 = grp_AddRoundKey_fu_955_RoundKey_address1.read();
}

void AES_CTR_xcrypt_buffe::thread_ctx_RoundKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        ctx_RoundKey_ce0 = grp_AddRoundKey_fu_955_RoundKey_ce0.read();
    } else {
        ctx_RoundKey_ce0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_ctx_RoundKey_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        ctx_RoundKey_ce1 = grp_AddRoundKey_fu_955_RoundKey_ce1.read();
    } else {
        ctx_RoundKey_ce1 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_ap_start() {
    grp_AddRoundKey_fu_955_ap_start = grp_AddRoundKey_fu_955_ap_start_reg.read();
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_round() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_round = zext_ln448_reg_1948.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_round = ap_const_lv6_A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_round = ap_const_lv6_0;
    } else {
        grp_AddRoundKey_fu_955_round =  (sc_lv<6>) ("XXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_0_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_0_0_read = x_0_0_reg_1868.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_0_0_read = x_0_0_3_reg_1769.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_0_0_read = x_0_0_2_reg_1529.read();
    } else {
        grp_AddRoundKey_fu_955_state_0_0_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_0_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_0_1_read = x_0_1_reg_1873.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_0_1_read = x_0_1_4_reg_1799.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_0_1_read = x_0_1_2_reg_1534.read();
    } else {
        grp_AddRoundKey_fu_955_state_0_1_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_0_2_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_0_2_read = x_0_2_reg_1878.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_0_2_read = x_0_2_4_reg_1829.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_0_2_read = x_0_2_2_reg_1539.read();
    } else {
        grp_AddRoundKey_fu_955_state_0_2_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_0_3_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_0_3_read = x_0_3_reg_1883.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_0_3_read = x_0_3_4_reg_1859.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_0_3_read = x_0_3_2_reg_1544.read();
    } else {
        grp_AddRoundKey_fu_955_state_0_3_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_1_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_1_0_read = x_1_0_reg_1888.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_1_0_read = x_1_0_3_reg_1775.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_1_0_read = x_1_0_2_reg_1549.read();
    } else {
        grp_AddRoundKey_fu_955_state_1_0_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_1_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_1_1_read = x_1_1_reg_1893.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_1_1_read = x_1_1_4_reg_1805.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_1_1_read = x_1_1_2_reg_1554.read();
    } else {
        grp_AddRoundKey_fu_955_state_1_1_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_1_2_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_1_2_read = x_1_2_reg_1898.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_1_2_read = x_1_2_4_reg_1835.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_1_2_read = x_1_2_2_reg_1559.read();
    } else {
        grp_AddRoundKey_fu_955_state_1_2_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_1_3_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_1_3_read = x_1_3_reg_1903.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_1_3_read = x_1_3_4_reg_1841.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_1_3_read = x_1_3_2_reg_1564.read();
    } else {
        grp_AddRoundKey_fu_955_state_1_3_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_2_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_2_0_read = x_2_0_reg_1908.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_2_0_read = x_2_0_3_reg_1781.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_2_0_read = x_2_0_2_reg_1569.read();
    } else {
        grp_AddRoundKey_fu_955_state_2_0_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_2_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_2_1_read = x_2_1_reg_1913.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_2_1_read = x_2_1_4_reg_1811.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_2_1_read = x_2_1_2_reg_1574.read();
    } else {
        grp_AddRoundKey_fu_955_state_2_1_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_2_2_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_2_2_read = x_2_2_reg_1918.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_2_2_read = x_2_2_4_reg_1817.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_2_2_read = x_2_2_2_reg_1579.read();
    } else {
        grp_AddRoundKey_fu_955_state_2_2_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_2_3_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_2_3_read = x_2_3_reg_1923.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_2_3_read = x_2_3_4_reg_1847.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_2_3_read = x_2_3_2_reg_1584.read();
    } else {
        grp_AddRoundKey_fu_955_state_2_3_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_3_0_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_3_0_read = x_3_0_reg_1928.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_3_0_read = x_3_0_3_reg_1787.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_3_0_read = x_3_0_2_reg_1589.read();
    } else {
        grp_AddRoundKey_fu_955_state_3_0_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_3_1_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_3_1_read = x_3_1_reg_1933.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_3_1_read = x_3_1_4_reg_1793.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_3_1_read = x_3_1_2_reg_1594.read();
    } else {
        grp_AddRoundKey_fu_955_state_3_1_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_3_2_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_3_2_read = x_3_2_reg_1938.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_3_2_read = x_3_2_4_reg_1823.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_3_2_read = x_3_2_2_reg_1599.read();
    } else {
        grp_AddRoundKey_fu_955_state_3_2_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_AddRoundKey_fu_955_state_3_3_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_AddRoundKey_fu_955_state_3_3_read = x_3_3_reg_1943.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_AddRoundKey_fu_955_state_3_3_read = x_3_3_4_reg_1853.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_AddRoundKey_fu_955_state_3_3_read = x_3_3_2_reg_1604.read();
    } else {
        grp_AddRoundKey_fu_955_state_3_3_read =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void AES_CTR_xcrypt_buffe::thread_grp_fu_1064_p2() {
    grp_fu_1064_p2 = (!ctx_Iv_q0.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(ctx_Iv_q0.read() == ap_const_lv8_FF);
}

void AES_CTR_xcrypt_buffe::thread_i_5_fu_1076_p2() {
    i_5_fu_1076_p2 = (!i_0_reg_627.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_627.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void AES_CTR_xcrypt_buffe::thread_i_fu_1094_p2() {
    i_fu_1094_p2 = (!i_0_i_reg_651.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i_reg_651.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void AES_CTR_xcrypt_buffe::thread_icmp_ln444_fu_1185_p2() {
    icmp_ln444_fu_1185_p2 = (!round_0_i_reg_806.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(round_0_i_reg_806.read() == ap_const_lv4_A);
}

void AES_CTR_xcrypt_buffe::thread_icmp_ln54_fu_1088_p2() {
    icmp_ln54_fu_1088_p2 = (!i_0_i_reg_651.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_651.read() == ap_const_lv5_10);
}

void AES_CTR_xcrypt_buffe::thread_icmp_ln574_fu_1070_p2() {
    icmp_ln574_fu_1070_p2 = (!i_0_reg_627.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_627.read() == ap_const_lv5_10);
}

void AES_CTR_xcrypt_buffe::thread_icmp_ln575_fu_1082_p2() {
    icmp_ln575_fu_1082_p2 = (!bi_0_reg_639.read().is_01() || !ap_const_lv32_10.is_01())? sc_lv<1>(): sc_lv<1>(bi_0_reg_639.read() == ap_const_lv32_10);
}

void AES_CTR_xcrypt_buffe::thread_icmp_ln587_1_fu_1282_p2() {
    icmp_ln587_1_fu_1282_p2 = (!ctx_Iv_q1.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(ctx_Iv_q1.read() == ap_const_lv8_FF);
}

void AES_CTR_xcrypt_buffe::thread_round_fu_1276_p2() {
    round_fu_1276_p2 = (!round_0_i_reg_806.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(round_0_i_reg_806.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void AES_CTR_xcrypt_buffe::thread_sbox_address0() {
    sbox_address0 =  (sc_lv<8>) (zext_ln285_fu_1105_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_address1() {
    sbox_address1 =  (sc_lv<8>) (zext_ln285_1_fu_1110_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_address10() {
    sbox_address10 =  (sc_lv<8>) (zext_ln285_10_fu_1155_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_address11() {
    sbox_address11 =  (sc_lv<8>) (zext_ln285_11_fu_1160_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_address12() {
    sbox_address12 =  (sc_lv<8>) (zext_ln285_12_fu_1165_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_address13() {
    sbox_address13 =  (sc_lv<8>) (zext_ln285_13_fu_1170_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_address14() {
    sbox_address14 =  (sc_lv<8>) (zext_ln285_14_fu_1175_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_address15() {
    sbox_address15 =  (sc_lv<8>) (zext_ln285_15_fu_1180_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_address2() {
    sbox_address2 =  (sc_lv<8>) (zext_ln285_2_fu_1115_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_address3() {
    sbox_address3 =  (sc_lv<8>) (zext_ln285_3_fu_1120_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_address4() {
    sbox_address4 =  (sc_lv<8>) (zext_ln285_4_fu_1125_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_address5() {
    sbox_address5 =  (sc_lv<8>) (zext_ln285_5_fu_1130_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_address6() {
    sbox_address6 =  (sc_lv<8>) (zext_ln285_6_fu_1135_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_address7() {
    sbox_address7 =  (sc_lv<8>) (zext_ln285_7_fu_1140_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_address8() {
    sbox_address8 =  (sc_lv<8>) (zext_ln285_8_fu_1145_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_address9() {
    sbox_address9 =  (sc_lv<8>) (zext_ln285_9_fu_1150_p1.read());
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce0 = ap_const_logic_1;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce1 = ap_const_logic_1;
    } else {
        sbox_ce1 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce10() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce10 = ap_const_logic_1;
    } else {
        sbox_ce10 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce11() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce11 = ap_const_logic_1;
    } else {
        sbox_ce11 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce12() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce12 = ap_const_logic_1;
    } else {
        sbox_ce12 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce13() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce13 = ap_const_logic_1;
    } else {
        sbox_ce13 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce14() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce14 = ap_const_logic_1;
    } else {
        sbox_ce14 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce15() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce15 = ap_const_logic_1;
    } else {
        sbox_ce15 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce2 = ap_const_logic_1;
    } else {
        sbox_ce2 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce3() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce3 = ap_const_logic_1;
    } else {
        sbox_ce3 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce4 = ap_const_logic_1;
    } else {
        sbox_ce4 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce5() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce5 = ap_const_logic_1;
    } else {
        sbox_ce5 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce6() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce6 = ap_const_logic_1;
    } else {
        sbox_ce6 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce7() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce7 = ap_const_logic_1;
    } else {
        sbox_ce7 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce8() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce8 = ap_const_logic_1;
    } else {
        sbox_ce8 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sbox_ce9() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_ce9 = ap_const_logic_1;
    } else {
        sbox_ce9 = ap_const_logic_0;
    }
}

void AES_CTR_xcrypt_buffe::thread_sext_ln597_fu_1305_p1() {
    sext_ln597_fu_1305_p1 = esl_sext<64,32>(ap_phi_mux_bi_2_phi_fu_927_p4.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_10_fu_1155_p1() {
    zext_ln285_10_fu_1155_p1 = esl_zext<64,8>(state_2_2_read_ass_reg_707.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_11_fu_1160_p1() {
    zext_ln285_11_fu_1160_p1 = esl_zext<64,8>(state_3_2_read_ass_reg_671.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_12_fu_1165_p1() {
    zext_ln285_12_fu_1165_p1 = esl_zext<64,8>(state_0_3_read_ass_reg_770.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_13_fu_1170_p1() {
    zext_ln285_13_fu_1170_p1 = esl_zext<64,8>(state_1_3_read_ass_reg_734.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_14_fu_1175_p1() {
    zext_ln285_14_fu_1175_p1 = esl_zext<64,8>(state_2_3_read_ass_reg_698.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_15_fu_1180_p1() {
    zext_ln285_15_fu_1180_p1 = esl_zext<64,8>(state_3_3_read_ass_reg_662.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_1_fu_1110_p1() {
    zext_ln285_1_fu_1110_p1 = esl_zext<64,8>(state_1_0_read_ass_reg_761.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_2_fu_1115_p1() {
    zext_ln285_2_fu_1115_p1 = esl_zext<64,8>(state_2_0_read_ass_reg_725.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_3_fu_1120_p1() {
    zext_ln285_3_fu_1120_p1 = esl_zext<64,8>(state_3_0_read_ass_reg_689.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_4_fu_1125_p1() {
    zext_ln285_4_fu_1125_p1 = esl_zext<64,8>(state_0_1_read_ass_reg_788.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_5_fu_1130_p1() {
    zext_ln285_5_fu_1130_p1 = esl_zext<64,8>(state_1_1_read_ass_reg_752.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_6_fu_1135_p1() {
    zext_ln285_6_fu_1135_p1 = esl_zext<64,8>(state_2_1_read_ass_reg_716.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_7_fu_1140_p1() {
    zext_ln285_7_fu_1140_p1 = esl_zext<64,8>(state_3_1_read_ass_reg_680.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_8_fu_1145_p1() {
    zext_ln285_8_fu_1145_p1 = esl_zext<64,8>(state_0_2_read_ass_reg_779.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_9_fu_1150_p1() {
    zext_ln285_9_fu_1150_p1 = esl_zext<64,8>(state_1_2_read_ass_reg_743.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln285_fu_1105_p1() {
    zext_ln285_fu_1105_p1 = esl_zext<64,8>(state_0_0_read_ass_reg_797.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln448_fu_1271_p1() {
    zext_ln448_fu_1271_p1 = esl_zext<6,4>(round_0_i_reg_806.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln55_fu_1100_p1() {
    zext_ln55_fu_1100_p1 = esl_zext<64,5>(i_0_i_reg_651.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln587_fu_1288_p1() {
    zext_ln587_fu_1288_p1 = esl_zext<64,4>(ctx_Iv_addr_1_lcssa7_reg_855.read());
}

void AES_CTR_xcrypt_buffe::thread_zext_ln597_fu_1300_p1() {
    zext_ln597_fu_1300_p1 = esl_zext<64,5>(i_0_reg_627.read());
}

void AES_CTR_xcrypt_buffe::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln574_fu_1070_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln574_fu_1070_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(icmp_ln575_fu_1082_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state41;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln54_fu_1088_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(grp_AddRoundKey_fu_955_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln444_fu_1185_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_955_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_955_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state26;
            }
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln587_1_fu_1282_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state27;
            }
            break;
        case 67108864 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state28;
            }
            break;
        case 134217728 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        case 268435456 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state30;
            }
            break;
        case 536870912 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state31;
            }
            break;
        case 1073741824 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state32;
            }
            break;
        case 2147483648 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state33;
            }
            break;
        case 4294967296 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state34;
            }
            break;
        case 8589934592 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state35;
            }
            break;
        case 17179869184 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state36;
            }
            break;
        case 34359738368 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state37;
            }
            break;
        case 68719476736 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state38;
            }
            break;
        case 137438953472 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state39;
            }
            break;
        case 274877906944 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_1064_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state40;
            }
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<42>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

