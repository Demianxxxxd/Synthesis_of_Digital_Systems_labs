// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes_ha.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes_ha::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes_ha::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<25> aes_ha::ap_ST_fsm_state1 = "1";
const sc_lv<25> aes_ha::ap_ST_fsm_state2 = "10";
const sc_lv<25> aes_ha::ap_ST_fsm_state3 = "100";
const sc_lv<25> aes_ha::ap_ST_fsm_state4 = "1000";
const sc_lv<25> aes_ha::ap_ST_fsm_state5 = "10000";
const sc_lv<25> aes_ha::ap_ST_fsm_state6 = "100000";
const sc_lv<25> aes_ha::ap_ST_fsm_state7 = "1000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state8 = "10000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state9 = "100000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state10 = "1000000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state11 = "10000000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state12 = "100000000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<25> aes_ha::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<32> aes_ha::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aes_ha::ap_const_lv32_5 = "101";
const sc_lv<32> aes_ha::ap_const_lv32_C = "1100";
const sc_lv<1> aes_ha::ap_const_lv1_0 = "0";
const sc_lv<32> aes_ha::ap_const_lv32_E = "1110";
const sc_lv<32> aes_ha::ap_const_lv32_11 = "10001";
const sc_lv<32> aes_ha::ap_const_lv32_15 = "10101";
const int aes_ha::C_S_AXI_DATA_WIDTH = "100000";
const int aes_ha::C_M_AXI_MST_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int aes_ha::C_M_AXI_MST_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int aes_ha::C_M_AXI_MST_CACHE_VALUE = "11";
const int aes_ha::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> aes_ha::ap_const_lv32_1 = "1";
const sc_lv<32> aes_ha::ap_const_lv32_2 = "10";
const sc_lv<1> aes_ha::ap_const_lv1_1 = "1";
const sc_lv<32> aes_ha::ap_const_lv32_4 = "100";
const sc_lv<32> aes_ha::ap_const_lv32_F = "1111";
const sc_lv<32> aes_ha::ap_const_lv32_10 = "10000";
const sc_lv<32> aes_ha::ap_const_lv32_16 = "10110";
const sc_lv<5> aes_ha::ap_const_lv5_0 = "00000";
const sc_lv<32> aes_ha::ap_const_lv32_3 = "11";
const sc_lv<32> aes_ha::ap_const_lv32_B = "1011";
const sc_lv<32> aes_ha::ap_const_lv32_D = "1101";
const sc_lv<32> aes_ha::ap_const_lv32_17 = "10111";
const sc_lv<3> aes_ha::ap_const_lv3_0 = "000";
const sc_lv<2> aes_ha::ap_const_lv2_0 = "00";
const sc_lv<4> aes_ha::ap_const_lv4_0 = "0000";
const sc_lv<5> aes_ha::ap_const_lv5_10 = "10000";
const sc_lv<5> aes_ha::ap_const_lv5_1 = "1";
const sc_lv<32> aes_ha::ap_const_lv32_1F = "11111";
const sc_lv<32> aes_ha::ap_const_lv32_FFFFFFF1 = "11111111111111111111111111110001";
const sc_lv<28> aes_ha::ap_const_lv28_0 = "0000000000000000000000000000";
const sc_lv<32> aes_ha::ap_const_lv32_18 = "11000";
const bool aes_ha::ap_const_boolean_1 = true;

aes_ha::aes_ha(sc_module_name name) : sc_module(name), mVcdFile(0) {
    aes_ha_slv_s_axi_U = new aes_ha_slv_s_axi<C_S_AXI_SLV_ADDR_WIDTH,C_S_AXI_SLV_DATA_WIDTH>("aes_ha_slv_s_axi_U");
    aes_ha_slv_s_axi_U->AWVALID(s_axi_slv_AWVALID);
    aes_ha_slv_s_axi_U->AWREADY(s_axi_slv_AWREADY);
    aes_ha_slv_s_axi_U->AWADDR(s_axi_slv_AWADDR);
    aes_ha_slv_s_axi_U->WVALID(s_axi_slv_WVALID);
    aes_ha_slv_s_axi_U->WREADY(s_axi_slv_WREADY);
    aes_ha_slv_s_axi_U->WDATA(s_axi_slv_WDATA);
    aes_ha_slv_s_axi_U->WSTRB(s_axi_slv_WSTRB);
    aes_ha_slv_s_axi_U->ARVALID(s_axi_slv_ARVALID);
    aes_ha_slv_s_axi_U->ARREADY(s_axi_slv_ARREADY);
    aes_ha_slv_s_axi_U->ARADDR(s_axi_slv_ARADDR);
    aes_ha_slv_s_axi_U->RVALID(s_axi_slv_RVALID);
    aes_ha_slv_s_axi_U->RREADY(s_axi_slv_RREADY);
    aes_ha_slv_s_axi_U->RDATA(s_axi_slv_RDATA);
    aes_ha_slv_s_axi_U->RRESP(s_axi_slv_RRESP);
    aes_ha_slv_s_axi_U->BVALID(s_axi_slv_BVALID);
    aes_ha_slv_s_axi_U->BREADY(s_axi_slv_BREADY);
    aes_ha_slv_s_axi_U->BRESP(s_axi_slv_BRESP);
    aes_ha_slv_s_axi_U->ACLK(ap_clk);
    aes_ha_slv_s_axi_U->ARESET(ap_rst_n_inv);
    aes_ha_slv_s_axi_U->ACLK_EN(ap_var_for_const0);
    aes_ha_slv_s_axi_U->ap_start(ap_start);
    aes_ha_slv_s_axi_U->interrupt(interrupt);
    aes_ha_slv_s_axi_U->ap_ready(ap_ready);
    aes_ha_slv_s_axi_U->ap_done(ap_done);
    aes_ha_slv_s_axi_U->ap_idle(ap_idle);
    aes_ha_slv_s_axi_U->key_address0(grp_KeyExpansion_fu_286_Key_address0);
    aes_ha_slv_s_axi_U->key_ce0(grp_KeyExpansion_fu_286_Key_ce0);
    aes_ha_slv_s_axi_U->key_q0(key_q0);
    aes_ha_slv_s_axi_U->iv_address0(iv_address0);
    aes_ha_slv_s_axi_U->iv_ce0(iv_ce0);
    aes_ha_slv_s_axi_U->iv_we0(iv_we0);
    aes_ha_slv_s_axi_U->iv_d0(ctx_Iv_q0);
    aes_ha_slv_s_axi_U->iv_q0(iv_q0);
    aes_ha_slv_s_axi_U->in_r(in_r);
    aes_ha_slv_s_axi_U->out_r(out_r);
    aes_ha_slv_s_axi_U->length_r(length_r);
    aes_ha_mst_m_axi_U = new aes_ha_mst_m_axi<0,8,32,5,16,16,16,16,C_M_AXI_MST_ID_WIDTH,C_M_AXI_MST_ADDR_WIDTH,C_M_AXI_MST_DATA_WIDTH,C_M_AXI_MST_AWUSER_WIDTH,C_M_AXI_MST_ARUSER_WIDTH,C_M_AXI_MST_WUSER_WIDTH,C_M_AXI_MST_RUSER_WIDTH,C_M_AXI_MST_BUSER_WIDTH,C_M_AXI_MST_USER_VALUE,C_M_AXI_MST_PROT_VALUE,C_M_AXI_MST_CACHE_VALUE>("aes_ha_mst_m_axi_U");
    aes_ha_mst_m_axi_U->AWVALID(m_axi_mst_AWVALID);
    aes_ha_mst_m_axi_U->AWREADY(m_axi_mst_AWREADY);
    aes_ha_mst_m_axi_U->AWADDR(m_axi_mst_AWADDR);
    aes_ha_mst_m_axi_U->AWID(m_axi_mst_AWID);
    aes_ha_mst_m_axi_U->AWLEN(m_axi_mst_AWLEN);
    aes_ha_mst_m_axi_U->AWSIZE(m_axi_mst_AWSIZE);
    aes_ha_mst_m_axi_U->AWBURST(m_axi_mst_AWBURST);
    aes_ha_mst_m_axi_U->AWLOCK(m_axi_mst_AWLOCK);
    aes_ha_mst_m_axi_U->AWCACHE(m_axi_mst_AWCACHE);
    aes_ha_mst_m_axi_U->AWPROT(m_axi_mst_AWPROT);
    aes_ha_mst_m_axi_U->AWQOS(m_axi_mst_AWQOS);
    aes_ha_mst_m_axi_U->AWREGION(m_axi_mst_AWREGION);
    aes_ha_mst_m_axi_U->AWUSER(m_axi_mst_AWUSER);
    aes_ha_mst_m_axi_U->WVALID(m_axi_mst_WVALID);
    aes_ha_mst_m_axi_U->WREADY(m_axi_mst_WREADY);
    aes_ha_mst_m_axi_U->WDATA(m_axi_mst_WDATA);
    aes_ha_mst_m_axi_U->WSTRB(m_axi_mst_WSTRB);
    aes_ha_mst_m_axi_U->WLAST(m_axi_mst_WLAST);
    aes_ha_mst_m_axi_U->WID(m_axi_mst_WID);
    aes_ha_mst_m_axi_U->WUSER(m_axi_mst_WUSER);
    aes_ha_mst_m_axi_U->ARVALID(m_axi_mst_ARVALID);
    aes_ha_mst_m_axi_U->ARREADY(m_axi_mst_ARREADY);
    aes_ha_mst_m_axi_U->ARADDR(m_axi_mst_ARADDR);
    aes_ha_mst_m_axi_U->ARID(m_axi_mst_ARID);
    aes_ha_mst_m_axi_U->ARLEN(m_axi_mst_ARLEN);
    aes_ha_mst_m_axi_U->ARSIZE(m_axi_mst_ARSIZE);
    aes_ha_mst_m_axi_U->ARBURST(m_axi_mst_ARBURST);
    aes_ha_mst_m_axi_U->ARLOCK(m_axi_mst_ARLOCK);
    aes_ha_mst_m_axi_U->ARCACHE(m_axi_mst_ARCACHE);
    aes_ha_mst_m_axi_U->ARPROT(m_axi_mst_ARPROT);
    aes_ha_mst_m_axi_U->ARQOS(m_axi_mst_ARQOS);
    aes_ha_mst_m_axi_U->ARREGION(m_axi_mst_ARREGION);
    aes_ha_mst_m_axi_U->ARUSER(m_axi_mst_ARUSER);
    aes_ha_mst_m_axi_U->RVALID(m_axi_mst_RVALID);
    aes_ha_mst_m_axi_U->RREADY(m_axi_mst_RREADY);
    aes_ha_mst_m_axi_U->RDATA(m_axi_mst_RDATA);
    aes_ha_mst_m_axi_U->RLAST(m_axi_mst_RLAST);
    aes_ha_mst_m_axi_U->RID(m_axi_mst_RID);
    aes_ha_mst_m_axi_U->RUSER(m_axi_mst_RUSER);
    aes_ha_mst_m_axi_U->RRESP(m_axi_mst_RRESP);
    aes_ha_mst_m_axi_U->BVALID(m_axi_mst_BVALID);
    aes_ha_mst_m_axi_U->BREADY(m_axi_mst_BREADY);
    aes_ha_mst_m_axi_U->BRESP(m_axi_mst_BRESP);
    aes_ha_mst_m_axi_U->BID(m_axi_mst_BID);
    aes_ha_mst_m_axi_U->BUSER(m_axi_mst_BUSER);
    aes_ha_mst_m_axi_U->ACLK(ap_clk);
    aes_ha_mst_m_axi_U->ARESET(ap_rst_n_inv);
    aes_ha_mst_m_axi_U->ACLK_EN(ap_var_for_const0);
    aes_ha_mst_m_axi_U->I_ARVALID(mst_ARVALID);
    aes_ha_mst_m_axi_U->I_ARREADY(mst_ARREADY);
    aes_ha_mst_m_axi_U->I_ARADDR(mst_addr_reg_556);
    aes_ha_mst_m_axi_U->I_ARID(ap_var_for_const1);
    aes_ha_mst_m_axi_U->I_ARLEN(ap_var_for_const2);
    aes_ha_mst_m_axi_U->I_ARSIZE(ap_var_for_const3);
    aes_ha_mst_m_axi_U->I_ARLOCK(ap_var_for_const4);
    aes_ha_mst_m_axi_U->I_ARCACHE(ap_var_for_const5);
    aes_ha_mst_m_axi_U->I_ARQOS(ap_var_for_const5);
    aes_ha_mst_m_axi_U->I_ARPROT(ap_var_for_const3);
    aes_ha_mst_m_axi_U->I_ARUSER(ap_var_for_const1);
    aes_ha_mst_m_axi_U->I_ARBURST(ap_var_for_const4);
    aes_ha_mst_m_axi_U->I_ARREGION(ap_var_for_const5);
    aes_ha_mst_m_axi_U->I_RVALID(mst_RVALID);
    aes_ha_mst_m_axi_U->I_RREADY(mst_RREADY);
    aes_ha_mst_m_axi_U->I_RDATA(mst_RDATA);
    aes_ha_mst_m_axi_U->I_RID(mst_RID);
    aes_ha_mst_m_axi_U->I_RUSER(mst_RUSER);
    aes_ha_mst_m_axi_U->I_RRESP(mst_RRESP);
    aes_ha_mst_m_axi_U->I_RLAST(mst_RLAST);
    aes_ha_mst_m_axi_U->I_AWVALID(mst_AWVALID);
    aes_ha_mst_m_axi_U->I_AWREADY(mst_AWREADY);
    aes_ha_mst_m_axi_U->I_AWADDR(mst_addr_1_reg_575);
    aes_ha_mst_m_axi_U->I_AWID(ap_var_for_const1);
    aes_ha_mst_m_axi_U->I_AWLEN(ap_var_for_const2);
    aes_ha_mst_m_axi_U->I_AWSIZE(ap_var_for_const3);
    aes_ha_mst_m_axi_U->I_AWLOCK(ap_var_for_const4);
    aes_ha_mst_m_axi_U->I_AWCACHE(ap_var_for_const5);
    aes_ha_mst_m_axi_U->I_AWQOS(ap_var_for_const5);
    aes_ha_mst_m_axi_U->I_AWPROT(ap_var_for_const3);
    aes_ha_mst_m_axi_U->I_AWUSER(ap_var_for_const1);
    aes_ha_mst_m_axi_U->I_AWBURST(ap_var_for_const4);
    aes_ha_mst_m_axi_U->I_AWREGION(ap_var_for_const5);
    aes_ha_mst_m_axi_U->I_WVALID(mst_WVALID);
    aes_ha_mst_m_axi_U->I_WREADY(mst_WREADY);
    aes_ha_mst_m_axi_U->I_WDATA(text_load_reg_599);
    aes_ha_mst_m_axi_U->I_WID(ap_var_for_const1);
    aes_ha_mst_m_axi_U->I_WUSER(ap_var_for_const1);
    aes_ha_mst_m_axi_U->I_WLAST(ap_var_for_const6);
    aes_ha_mst_m_axi_U->I_WSTRB(ap_var_for_const7);
    aes_ha_mst_m_axi_U->I_BVALID(mst_BVALID);
    aes_ha_mst_m_axi_U->I_BREADY(mst_BREADY);
    aes_ha_mst_m_axi_U->I_BRESP(mst_BRESP);
    aes_ha_mst_m_axi_U->I_BID(mst_BID);
    aes_ha_mst_m_axi_U->I_BUSER(mst_BUSER);
    ctx_RoundKey_U = new aes_ha_ctx_RoundKey("ctx_RoundKey_U");
    ctx_RoundKey_U->clk(ap_clk);
    ctx_RoundKey_U->reset(ap_rst_n_inv);
    ctx_RoundKey_U->address0(ctx_RoundKey_address0);
    ctx_RoundKey_U->ce0(ctx_RoundKey_ce0);
    ctx_RoundKey_U->we0(ctx_RoundKey_we0);
    ctx_RoundKey_U->d0(grp_KeyExpansion_fu_286_RoundKey_d0);
    ctx_RoundKey_U->q0(ctx_RoundKey_q0);
    ctx_RoundKey_U->address1(ctx_RoundKey_address1);
    ctx_RoundKey_U->ce1(ctx_RoundKey_ce1);
    ctx_RoundKey_U->we1(ctx_RoundKey_we1);
    ctx_RoundKey_U->d1(grp_KeyExpansion_fu_286_RoundKey_d1);
    ctx_RoundKey_U->q1(ctx_RoundKey_q1);
    ctx_Iv_U = new AES_CTR_xcrypt_buffe_buffer("ctx_Iv_U");
    ctx_Iv_U->clk(ap_clk);
    ctx_Iv_U->reset(ap_rst_n_inv);
    ctx_Iv_U->address0(ctx_Iv_address0);
    ctx_Iv_U->ce0(ctx_Iv_ce0);
    ctx_Iv_U->we0(ctx_Iv_we0);
    ctx_Iv_U->d0(ctx_Iv_d0);
    ctx_Iv_U->q0(ctx_Iv_q0);
    ctx_Iv_U->address1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_address1);
    ctx_Iv_U->ce1(ctx_Iv_ce1);
    ctx_Iv_U->we1(ctx_Iv_we1);
    ctx_Iv_U->d1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_d1);
    ctx_Iv_U->q1(ctx_Iv_q1);
    text_U = new aes_ha_text("text_U");
    text_U->clk(ap_clk);
    text_U->reset(ap_rst_n_inv);
    text_U->address0(text_address0);
    text_U->ce0(text_ce0);
    text_U->we0(text_we0);
    text_U->d0(text_d0);
    text_U->q0(text_q0);
    grp_KeyExpansion_fu_286 = new KeyExpansion("grp_KeyExpansion_fu_286");
    grp_KeyExpansion_fu_286->ap_clk(ap_clk);
    grp_KeyExpansion_fu_286->ap_rst(ap_rst_n_inv);
    grp_KeyExpansion_fu_286->ap_start(grp_KeyExpansion_fu_286_ap_start);
    grp_KeyExpansion_fu_286->ap_done(grp_KeyExpansion_fu_286_ap_done);
    grp_KeyExpansion_fu_286->ap_idle(grp_KeyExpansion_fu_286_ap_idle);
    grp_KeyExpansion_fu_286->ap_ready(grp_KeyExpansion_fu_286_ap_ready);
    grp_KeyExpansion_fu_286->RoundKey_address0(grp_KeyExpansion_fu_286_RoundKey_address0);
    grp_KeyExpansion_fu_286->RoundKey_ce0(grp_KeyExpansion_fu_286_RoundKey_ce0);
    grp_KeyExpansion_fu_286->RoundKey_we0(grp_KeyExpansion_fu_286_RoundKey_we0);
    grp_KeyExpansion_fu_286->RoundKey_d0(grp_KeyExpansion_fu_286_RoundKey_d0);
    grp_KeyExpansion_fu_286->RoundKey_address1(grp_KeyExpansion_fu_286_RoundKey_address1);
    grp_KeyExpansion_fu_286->RoundKey_ce1(grp_KeyExpansion_fu_286_RoundKey_ce1);
    grp_KeyExpansion_fu_286->RoundKey_we1(grp_KeyExpansion_fu_286_RoundKey_we1);
    grp_KeyExpansion_fu_286->RoundKey_d1(grp_KeyExpansion_fu_286_RoundKey_d1);
    grp_KeyExpansion_fu_286->Key_address0(grp_KeyExpansion_fu_286_Key_address0);
    grp_KeyExpansion_fu_286->Key_ce0(grp_KeyExpansion_fu_286_Key_ce0);
    grp_KeyExpansion_fu_286->Key_q0(key_q0);
    grp_AES_CTR_xcrypt_buffe_fu_296 = new AES_CTR_xcrypt_buffe("grp_AES_CTR_xcrypt_buffe_fu_296");
    grp_AES_CTR_xcrypt_buffe_fu_296->ap_clk(ap_clk);
    grp_AES_CTR_xcrypt_buffe_fu_296->ap_rst(ap_rst_n_inv);
    grp_AES_CTR_xcrypt_buffe_fu_296->ap_start(grp_AES_CTR_xcrypt_buffe_fu_296_ap_start);
    grp_AES_CTR_xcrypt_buffe_fu_296->ap_done(grp_AES_CTR_xcrypt_buffe_fu_296_ap_done);
    grp_AES_CTR_xcrypt_buffe_fu_296->ap_idle(grp_AES_CTR_xcrypt_buffe_fu_296_ap_idle);
    grp_AES_CTR_xcrypt_buffe_fu_296->ap_ready(grp_AES_CTR_xcrypt_buffe_fu_296_ap_ready);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_RoundKey_address0(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address0);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_RoundKey_ce0(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce0);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_RoundKey_q0(ctx_RoundKey_q0);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_RoundKey_address1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address1);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_RoundKey_ce1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce1);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_RoundKey_q1(ctx_RoundKey_q1);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_Iv_address0(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_address0);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_Iv_ce0(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce0);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_Iv_we0(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we0);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_Iv_d0(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_d0);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_Iv_q0(ctx_Iv_q0);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_Iv_address1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_address1);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_Iv_ce1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce1);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_Iv_we1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we1);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_Iv_d1(grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_d1);
    grp_AES_CTR_xcrypt_buffe_fu_296->ctx_Iv_q1(ctx_Iv_q1);
    grp_AES_CTR_xcrypt_buffe_fu_296->buf_r_address0(grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_address0);
    grp_AES_CTR_xcrypt_buffe_fu_296->buf_r_ce0(grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_ce0);
    grp_AES_CTR_xcrypt_buffe_fu_296->buf_r_we0(grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_we0);
    grp_AES_CTR_xcrypt_buffe_fu_296->buf_r_d0(grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_d0);
    grp_AES_CTR_xcrypt_buffe_fu_296->buf_r_q0(text_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln21_fu_335_p2);
    sensitive << ( length_read_reg_508 );

    SC_METHOD(thread_add_ln55_1_fu_439_p2);
    sensitive << ( p_cast9_reg_515 );
    sensitive << ( sext_ln55_reg_551 );

    SC_METHOD(thread_add_ln55_fu_412_p2);
    sensitive << ( p_cast7_reg_520 );
    sensitive << ( sext_ln55_fu_408_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state13);
    sensitive << ( icmp_ln54_fu_427_p2 );
    sensitive << ( mst_RVALID );

    SC_METHOD(thread_ap_block_state13_ignore_call0);
    sensitive << ( icmp_ln54_fu_427_p2 );
    sensitive << ( mst_RVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ctx_Iv_address0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( zext_ln55_3_reg_533 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( zext_ln55_fu_493_p1 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_address0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ctx_Iv_ce0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ctx_Iv_ce1);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce1 );

    SC_METHOD(thread_ctx_Iv_d0);
    sensitive << ( iv_q0 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_d0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ctx_Iv_we0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ctx_Iv_we1);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we1 );

    SC_METHOD(thread_ctx_RoundKey_address0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_KeyExpansion_fu_286_RoundKey_address0 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address0 );

    SC_METHOD(thread_ctx_RoundKey_address1);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_KeyExpansion_fu_286_RoundKey_address1 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address1 );

    SC_METHOD(thread_ctx_RoundKey_ce0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_KeyExpansion_fu_286_RoundKey_ce0 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce0 );

    SC_METHOD(thread_ctx_RoundKey_ce1);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_KeyExpansion_fu_286_RoundKey_ce1 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce1 );

    SC_METHOD(thread_ctx_RoundKey_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_KeyExpansion_fu_286_RoundKey_we0 );

    SC_METHOD(thread_ctx_RoundKey_we1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_KeyExpansion_fu_286_RoundKey_we1 );

    SC_METHOD(thread_grp_AES_CTR_xcrypt_buffe_fu_296_ap_start);
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_ap_start_reg );

    SC_METHOD(thread_grp_KeyExpansion_fu_286_ap_start);
    sensitive << ( grp_KeyExpansion_fu_286_ap_start_reg );

    SC_METHOD(thread_i_1_fu_317_p2);
    sensitive << ( i_0_i_i_reg_229 );

    SC_METHOD(thread_i_2_fu_433_p2);
    sensitive << ( i_0_i_reg_252 );

    SC_METHOD(thread_i_3_fu_475_p2);
    sensitive << ( i_0_reg_240 );

    SC_METHOD(thread_i_4_fu_464_p2);
    sensitive << ( i_0_i1_reg_264 );

    SC_METHOD(thread_i_fu_487_p2);
    sensitive << ( i_0_i4_reg_275 );

    SC_METHOD(thread_icmp_ln21_fu_403_p2);
    sensitive << ( tmp_3_reg_543 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_0_reg_240 );

    SC_METHOD(thread_icmp_ln54_1_fu_481_p2);
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( i_0_i4_reg_275 );

    SC_METHOD(thread_icmp_ln54_2_fu_458_p2);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( i_0_i1_reg_264 );

    SC_METHOD(thread_icmp_ln54_3_fu_311_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_0_i_i_reg_229 );

    SC_METHOD(thread_icmp_ln54_fu_427_p2);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( icmp_ln54_fu_427_p2 );
    sensitive << ( mst_RVALID );
    sensitive << ( i_0_i_reg_252 );

    SC_METHOD(thread_iv_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln55_3_fu_323_p1 );
    sensitive << ( zext_ln55_reg_612 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_iv_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_iv_we0);
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_length_r_0_ack_out);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_KeyExpansion_fu_286_ap_done );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_mst_ARVALID);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( mst_ARREADY );

    SC_METHOD(thread_mst_AWVALID);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( mst_AWREADY );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_ap_done );

    SC_METHOD(thread_mst_BREADY);
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( mst_BVALID );

    SC_METHOD(thread_mst_RREADY);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( icmp_ln54_fu_427_p2 );
    sensitive << ( mst_RVALID );

    SC_METHOD(thread_mst_WVALID);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( mst_WREADY );

    SC_METHOD(thread_mst_blk_n_AR);
    sensitive << ( m_axi_mst_ARREADY );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_mst_blk_n_AW);
    sensitive << ( m_axi_mst_AWREADY );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_mst_blk_n_B);
    sensitive << ( m_axi_mst_BVALID );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_mst_blk_n_R);
    sensitive << ( m_axi_mst_RVALID );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( icmp_ln54_fu_427_p2 );

    SC_METHOD(thread_mst_blk_n_W);
    sensitive << ( m_axi_mst_WREADY );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_p_cast7_fu_308_p1);
    sensitive << ( in_read_reg_503 );

    SC_METHOD(thread_p_cast9_fu_305_p1);
    sensitive << ( out_read_reg_498 );

    SC_METHOD(thread_p_lshr_fu_353_p4);
    sensitive << ( sub_ln21_fu_348_p2 );

    SC_METHOD(thread_select_ln21_1_fu_387_p3);
    sensitive << ( tmp_fu_328_p3 );
    sensitive << ( select_ln21_fu_379_p3 );

    SC_METHOD(thread_select_ln21_fu_379_p3);
    sensitive << ( tmp_1_fu_340_p3 );
    sensitive << ( sub_ln21_1_fu_363_p2 );
    sensitive << ( tmp_2_fu_369_p4 );

    SC_METHOD(thread_sext_ln55_1_fu_417_p1);
    sensitive << ( add_ln55_fu_412_p2 );

    SC_METHOD(thread_sext_ln55_2_fu_443_p1);
    sensitive << ( add_ln55_1_fu_439_p2 );

    SC_METHOD(thread_sext_ln55_fu_408_p1);
    sensitive << ( i_0_reg_240 );

    SC_METHOD(thread_sub_ln21_1_fu_363_p2);
    sensitive << ( p_lshr_fu_353_p4 );

    SC_METHOD(thread_sub_ln21_fu_348_p2);
    sensitive << ( length_read_reg_508 );

    SC_METHOD(thread_text_address0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_address0 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( zext_ln55_1_fu_453_p1 );
    sensitive << ( zext_ln55_2_fu_470_p1 );

    SC_METHOD(thread_text_ce0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_ce0 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_text_d0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( mst_addr_read_reg_570 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_d0 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_text_we0);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_we0 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_tmp_1_fu_340_p3);
    sensitive << ( add_ln21_fu_335_p2 );

    SC_METHOD(thread_tmp_2_fu_369_p4);
    sensitive << ( add_ln21_fu_335_p2 );

    SC_METHOD(thread_tmp_3_fu_395_p3);
    sensitive << ( select_ln21_1_fu_387_p3 );

    SC_METHOD(thread_tmp_fu_328_p3);
    sensitive << ( length_read_reg_508 );

    SC_METHOD(thread_zext_ln55_1_fu_453_p1);
    sensitive << ( i_0_i_reg_252 );

    SC_METHOD(thread_zext_ln55_2_fu_470_p1);
    sensitive << ( i_0_i1_reg_264 );

    SC_METHOD(thread_zext_ln55_3_fu_323_p1);
    sensitive << ( i_0_i_i_reg_229 );

    SC_METHOD(thread_zext_ln55_fu_493_p1);
    sensitive << ( i_0_i4_reg_275 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( icmp_ln54_fu_427_p2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( mst_AWREADY );
    sensitive << ( mst_WREADY );
    sensitive << ( mst_ARREADY );
    sensitive << ( mst_RVALID );
    sensitive << ( mst_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_KeyExpansion_fu_286_ap_done );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln54_3_fu_311_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln21_fu_403_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln54_2_fu_458_p2 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( icmp_ln54_1_fu_481_p2 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_296_ap_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    ap_CS_fsm = "0000000000000000000000001";
    length_r_0_data_reg = "00000000000000000000000000000000";
    length_r_0_vld_reg = SC_LOGIC_0;
    grp_KeyExpansion_fu_286_ap_start_reg = SC_LOGIC_0;
    grp_AES_CTR_xcrypt_buffe_fu_296_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes_ha_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_mst_AWVALID, "(port)m_axi_mst_AWVALID");
    sc_trace(mVcdFile, m_axi_mst_AWREADY, "(port)m_axi_mst_AWREADY");
    sc_trace(mVcdFile, m_axi_mst_AWADDR, "(port)m_axi_mst_AWADDR");
    sc_trace(mVcdFile, m_axi_mst_AWID, "(port)m_axi_mst_AWID");
    sc_trace(mVcdFile, m_axi_mst_AWLEN, "(port)m_axi_mst_AWLEN");
    sc_trace(mVcdFile, m_axi_mst_AWSIZE, "(port)m_axi_mst_AWSIZE");
    sc_trace(mVcdFile, m_axi_mst_AWBURST, "(port)m_axi_mst_AWBURST");
    sc_trace(mVcdFile, m_axi_mst_AWLOCK, "(port)m_axi_mst_AWLOCK");
    sc_trace(mVcdFile, m_axi_mst_AWCACHE, "(port)m_axi_mst_AWCACHE");
    sc_trace(mVcdFile, m_axi_mst_AWPROT, "(port)m_axi_mst_AWPROT");
    sc_trace(mVcdFile, m_axi_mst_AWQOS, "(port)m_axi_mst_AWQOS");
    sc_trace(mVcdFile, m_axi_mst_AWREGION, "(port)m_axi_mst_AWREGION");
    sc_trace(mVcdFile, m_axi_mst_AWUSER, "(port)m_axi_mst_AWUSER");
    sc_trace(mVcdFile, m_axi_mst_WVALID, "(port)m_axi_mst_WVALID");
    sc_trace(mVcdFile, m_axi_mst_WREADY, "(port)m_axi_mst_WREADY");
    sc_trace(mVcdFile, m_axi_mst_WDATA, "(port)m_axi_mst_WDATA");
    sc_trace(mVcdFile, m_axi_mst_WSTRB, "(port)m_axi_mst_WSTRB");
    sc_trace(mVcdFile, m_axi_mst_WLAST, "(port)m_axi_mst_WLAST");
    sc_trace(mVcdFile, m_axi_mst_WID, "(port)m_axi_mst_WID");
    sc_trace(mVcdFile, m_axi_mst_WUSER, "(port)m_axi_mst_WUSER");
    sc_trace(mVcdFile, m_axi_mst_ARVALID, "(port)m_axi_mst_ARVALID");
    sc_trace(mVcdFile, m_axi_mst_ARREADY, "(port)m_axi_mst_ARREADY");
    sc_trace(mVcdFile, m_axi_mst_ARADDR, "(port)m_axi_mst_ARADDR");
    sc_trace(mVcdFile, m_axi_mst_ARID, "(port)m_axi_mst_ARID");
    sc_trace(mVcdFile, m_axi_mst_ARLEN, "(port)m_axi_mst_ARLEN");
    sc_trace(mVcdFile, m_axi_mst_ARSIZE, "(port)m_axi_mst_ARSIZE");
    sc_trace(mVcdFile, m_axi_mst_ARBURST, "(port)m_axi_mst_ARBURST");
    sc_trace(mVcdFile, m_axi_mst_ARLOCK, "(port)m_axi_mst_ARLOCK");
    sc_trace(mVcdFile, m_axi_mst_ARCACHE, "(port)m_axi_mst_ARCACHE");
    sc_trace(mVcdFile, m_axi_mst_ARPROT, "(port)m_axi_mst_ARPROT");
    sc_trace(mVcdFile, m_axi_mst_ARQOS, "(port)m_axi_mst_ARQOS");
    sc_trace(mVcdFile, m_axi_mst_ARREGION, "(port)m_axi_mst_ARREGION");
    sc_trace(mVcdFile, m_axi_mst_ARUSER, "(port)m_axi_mst_ARUSER");
    sc_trace(mVcdFile, m_axi_mst_RVALID, "(port)m_axi_mst_RVALID");
    sc_trace(mVcdFile, m_axi_mst_RREADY, "(port)m_axi_mst_RREADY");
    sc_trace(mVcdFile, m_axi_mst_RDATA, "(port)m_axi_mst_RDATA");
    sc_trace(mVcdFile, m_axi_mst_RLAST, "(port)m_axi_mst_RLAST");
    sc_trace(mVcdFile, m_axi_mst_RID, "(port)m_axi_mst_RID");
    sc_trace(mVcdFile, m_axi_mst_RUSER, "(port)m_axi_mst_RUSER");
    sc_trace(mVcdFile, m_axi_mst_RRESP, "(port)m_axi_mst_RRESP");
    sc_trace(mVcdFile, m_axi_mst_BVALID, "(port)m_axi_mst_BVALID");
    sc_trace(mVcdFile, m_axi_mst_BREADY, "(port)m_axi_mst_BREADY");
    sc_trace(mVcdFile, m_axi_mst_BRESP, "(port)m_axi_mst_BRESP");
    sc_trace(mVcdFile, m_axi_mst_BID, "(port)m_axi_mst_BID");
    sc_trace(mVcdFile, m_axi_mst_BUSER, "(port)m_axi_mst_BUSER");
    sc_trace(mVcdFile, s_axi_slv_AWVALID, "(port)s_axi_slv_AWVALID");
    sc_trace(mVcdFile, s_axi_slv_AWREADY, "(port)s_axi_slv_AWREADY");
    sc_trace(mVcdFile, s_axi_slv_AWADDR, "(port)s_axi_slv_AWADDR");
    sc_trace(mVcdFile, s_axi_slv_WVALID, "(port)s_axi_slv_WVALID");
    sc_trace(mVcdFile, s_axi_slv_WREADY, "(port)s_axi_slv_WREADY");
    sc_trace(mVcdFile, s_axi_slv_WDATA, "(port)s_axi_slv_WDATA");
    sc_trace(mVcdFile, s_axi_slv_WSTRB, "(port)s_axi_slv_WSTRB");
    sc_trace(mVcdFile, s_axi_slv_ARVALID, "(port)s_axi_slv_ARVALID");
    sc_trace(mVcdFile, s_axi_slv_ARREADY, "(port)s_axi_slv_ARREADY");
    sc_trace(mVcdFile, s_axi_slv_ARADDR, "(port)s_axi_slv_ARADDR");
    sc_trace(mVcdFile, s_axi_slv_RVALID, "(port)s_axi_slv_RVALID");
    sc_trace(mVcdFile, s_axi_slv_RREADY, "(port)s_axi_slv_RREADY");
    sc_trace(mVcdFile, s_axi_slv_RDATA, "(port)s_axi_slv_RDATA");
    sc_trace(mVcdFile, s_axi_slv_RRESP, "(port)s_axi_slv_RRESP");
    sc_trace(mVcdFile, s_axi_slv_BVALID, "(port)s_axi_slv_BVALID");
    sc_trace(mVcdFile, s_axi_slv_BREADY, "(port)s_axi_slv_BREADY");
    sc_trace(mVcdFile, s_axi_slv_BRESP, "(port)s_axi_slv_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, key_q0, "key_q0");
    sc_trace(mVcdFile, iv_address0, "iv_address0");
    sc_trace(mVcdFile, iv_ce0, "iv_ce0");
    sc_trace(mVcdFile, iv_we0, "iv_we0");
    sc_trace(mVcdFile, iv_q0, "iv_q0");
    sc_trace(mVcdFile, in_r, "in_r");
    sc_trace(mVcdFile, out_r, "out_r");
    sc_trace(mVcdFile, length_r, "length_r");
    sc_trace(mVcdFile, length_r_0_data_reg, "length_r_0_data_reg");
    sc_trace(mVcdFile, length_r_0_vld_reg, "length_r_0_vld_reg");
    sc_trace(mVcdFile, length_r_0_ack_out, "length_r_0_ack_out");
    sc_trace(mVcdFile, mst_blk_n_AR, "mst_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, mst_blk_n_R, "mst_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, icmp_ln54_fu_427_p2, "icmp_ln54_fu_427_p2");
    sc_trace(mVcdFile, mst_blk_n_AW, "mst_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, mst_blk_n_W, "mst_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, mst_blk_n_B, "mst_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, mst_AWVALID, "mst_AWVALID");
    sc_trace(mVcdFile, mst_AWREADY, "mst_AWREADY");
    sc_trace(mVcdFile, mst_WVALID, "mst_WVALID");
    sc_trace(mVcdFile, mst_WREADY, "mst_WREADY");
    sc_trace(mVcdFile, mst_ARVALID, "mst_ARVALID");
    sc_trace(mVcdFile, mst_ARREADY, "mst_ARREADY");
    sc_trace(mVcdFile, mst_RVALID, "mst_RVALID");
    sc_trace(mVcdFile, mst_RREADY, "mst_RREADY");
    sc_trace(mVcdFile, mst_RDATA, "mst_RDATA");
    sc_trace(mVcdFile, mst_RLAST, "mst_RLAST");
    sc_trace(mVcdFile, mst_RID, "mst_RID");
    sc_trace(mVcdFile, mst_RUSER, "mst_RUSER");
    sc_trace(mVcdFile, mst_RRESP, "mst_RRESP");
    sc_trace(mVcdFile, mst_BVALID, "mst_BVALID");
    sc_trace(mVcdFile, mst_BREADY, "mst_BREADY");
    sc_trace(mVcdFile, mst_BRESP, "mst_BRESP");
    sc_trace(mVcdFile, mst_BID, "mst_BID");
    sc_trace(mVcdFile, mst_BUSER, "mst_BUSER");
    sc_trace(mVcdFile, out_read_reg_498, "out_read_reg_498");
    sc_trace(mVcdFile, in_read_reg_503, "in_read_reg_503");
    sc_trace(mVcdFile, length_read_reg_508, "length_read_reg_508");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_286_ap_ready, "grp_KeyExpansion_fu_286_ap_ready");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_286_ap_done, "grp_KeyExpansion_fu_286_ap_done");
    sc_trace(mVcdFile, p_cast9_fu_305_p1, "p_cast9_fu_305_p1");
    sc_trace(mVcdFile, p_cast9_reg_515, "p_cast9_reg_515");
    sc_trace(mVcdFile, p_cast7_fu_308_p1, "p_cast7_fu_308_p1");
    sc_trace(mVcdFile, p_cast7_reg_520, "p_cast7_reg_520");
    sc_trace(mVcdFile, i_1_fu_317_p2, "i_1_fu_317_p2");
    sc_trace(mVcdFile, i_1_reg_528, "i_1_reg_528");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln55_3_fu_323_p1, "zext_ln55_3_fu_323_p1");
    sc_trace(mVcdFile, zext_ln55_3_reg_533, "zext_ln55_3_reg_533");
    sc_trace(mVcdFile, icmp_ln54_3_fu_311_p2, "icmp_ln54_3_fu_311_p2");
    sc_trace(mVcdFile, tmp_3_fu_395_p3, "tmp_3_fu_395_p3");
    sc_trace(mVcdFile, tmp_3_reg_543, "tmp_3_reg_543");
    sc_trace(mVcdFile, sext_ln55_fu_408_p1, "sext_ln55_fu_408_p1");
    sc_trace(mVcdFile, sext_ln55_reg_551, "sext_ln55_reg_551");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln21_fu_403_p2, "icmp_ln21_fu_403_p2");
    sc_trace(mVcdFile, mst_addr_reg_556, "mst_addr_reg_556");
    sc_trace(mVcdFile, i_2_fu_433_p2, "i_2_fu_433_p2");
    sc_trace(mVcdFile, i_2_reg_565, "i_2_reg_565");
    sc_trace(mVcdFile, ap_block_state13, "ap_block_state13");
    sc_trace(mVcdFile, mst_addr_read_reg_570, "mst_addr_read_reg_570");
    sc_trace(mVcdFile, mst_addr_1_reg_575, "mst_addr_1_reg_575");
    sc_trace(mVcdFile, i_4_fu_464_p2, "i_4_fu_464_p2");
    sc_trace(mVcdFile, i_4_reg_584, "i_4_reg_584");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, icmp_ln54_2_fu_458_p2, "icmp_ln54_2_fu_458_p2");
    sc_trace(mVcdFile, i_3_fu_475_p2, "i_3_fu_475_p2");
    sc_trace(mVcdFile, i_3_reg_594, "i_3_reg_594");
    sc_trace(mVcdFile, text_q0, "text_q0");
    sc_trace(mVcdFile, text_load_reg_599, "text_load_reg_599");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, i_fu_487_p2, "i_fu_487_p2");
    sc_trace(mVcdFile, i_reg_607, "i_reg_607");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, zext_ln55_fu_493_p1, "zext_ln55_fu_493_p1");
    sc_trace(mVcdFile, zext_ln55_reg_612, "zext_ln55_reg_612");
    sc_trace(mVcdFile, icmp_ln54_1_fu_481_p2, "icmp_ln54_1_fu_481_p2");
    sc_trace(mVcdFile, ctx_RoundKey_address0, "ctx_RoundKey_address0");
    sc_trace(mVcdFile, ctx_RoundKey_ce0, "ctx_RoundKey_ce0");
    sc_trace(mVcdFile, ctx_RoundKey_we0, "ctx_RoundKey_we0");
    sc_trace(mVcdFile, ctx_RoundKey_q0, "ctx_RoundKey_q0");
    sc_trace(mVcdFile, ctx_RoundKey_address1, "ctx_RoundKey_address1");
    sc_trace(mVcdFile, ctx_RoundKey_ce1, "ctx_RoundKey_ce1");
    sc_trace(mVcdFile, ctx_RoundKey_we1, "ctx_RoundKey_we1");
    sc_trace(mVcdFile, ctx_RoundKey_q1, "ctx_RoundKey_q1");
    sc_trace(mVcdFile, ctx_Iv_address0, "ctx_Iv_address0");
    sc_trace(mVcdFile, ctx_Iv_ce0, "ctx_Iv_ce0");
    sc_trace(mVcdFile, ctx_Iv_we0, "ctx_Iv_we0");
    sc_trace(mVcdFile, ctx_Iv_d0, "ctx_Iv_d0");
    sc_trace(mVcdFile, ctx_Iv_q0, "ctx_Iv_q0");
    sc_trace(mVcdFile, ctx_Iv_ce1, "ctx_Iv_ce1");
    sc_trace(mVcdFile, ctx_Iv_we1, "ctx_Iv_we1");
    sc_trace(mVcdFile, ctx_Iv_q1, "ctx_Iv_q1");
    sc_trace(mVcdFile, text_address0, "text_address0");
    sc_trace(mVcdFile, text_ce0, "text_ce0");
    sc_trace(mVcdFile, text_we0, "text_we0");
    sc_trace(mVcdFile, text_d0, "text_d0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_286_ap_start, "grp_KeyExpansion_fu_286_ap_start");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_286_ap_idle, "grp_KeyExpansion_fu_286_ap_idle");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_286_RoundKey_address0, "grp_KeyExpansion_fu_286_RoundKey_address0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_286_RoundKey_ce0, "grp_KeyExpansion_fu_286_RoundKey_ce0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_286_RoundKey_we0, "grp_KeyExpansion_fu_286_RoundKey_we0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_286_RoundKey_d0, "grp_KeyExpansion_fu_286_RoundKey_d0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_286_RoundKey_address1, "grp_KeyExpansion_fu_286_RoundKey_address1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_286_RoundKey_ce1, "grp_KeyExpansion_fu_286_RoundKey_ce1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_286_RoundKey_we1, "grp_KeyExpansion_fu_286_RoundKey_we1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_286_RoundKey_d1, "grp_KeyExpansion_fu_286_RoundKey_d1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_286_Key_address0, "grp_KeyExpansion_fu_286_Key_address0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_286_Key_ce0, "grp_KeyExpansion_fu_286_Key_ce0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ap_start, "grp_AES_CTR_xcrypt_buffe_fu_296_ap_start");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ap_done, "grp_AES_CTR_xcrypt_buffe_fu_296_ap_done");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ap_idle, "grp_AES_CTR_xcrypt_buffe_fu_296_ap_idle");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ap_ready, "grp_AES_CTR_xcrypt_buffe_fu_296_ap_ready");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address0, "grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce0, "grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address1, "grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address1");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce1, "grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce1");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_address0, "grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_address0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce0, "grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we0, "grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_d0, "grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_d0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_address1, "grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_address1");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce1, "grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce1");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we1, "grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we1");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_d1, "grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_d1");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_address0, "grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_address0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_ce0, "grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_ce0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_we0, "grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_we0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_d0, "grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_d0");
    sc_trace(mVcdFile, i_0_i_i_reg_229, "i_0_i_i_reg_229");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_0_reg_240, "i_0_reg_240");
    sc_trace(mVcdFile, i_0_i_reg_252, "i_0_i_reg_252");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, i_0_i1_reg_264, "i_0_i1_reg_264");
    sc_trace(mVcdFile, i_0_i4_reg_275, "i_0_i4_reg_275");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_286_ap_start_reg, "grp_KeyExpansion_fu_286_ap_start_reg");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_296_ap_start_reg, "grp_AES_CTR_xcrypt_buffe_fu_296_ap_start_reg");
    sc_trace(mVcdFile, ap_block_state13_ignore_call0, "ap_block_state13_ignore_call0");
    sc_trace(mVcdFile, zext_ln55_1_fu_453_p1, "zext_ln55_1_fu_453_p1");
    sc_trace(mVcdFile, zext_ln55_2_fu_470_p1, "zext_ln55_2_fu_470_p1");
    sc_trace(mVcdFile, sext_ln55_1_fu_417_p1, "sext_ln55_1_fu_417_p1");
    sc_trace(mVcdFile, sext_ln55_2_fu_443_p1, "sext_ln55_2_fu_443_p1");
    sc_trace(mVcdFile, add_ln21_fu_335_p2, "add_ln21_fu_335_p2");
    sc_trace(mVcdFile, sub_ln21_fu_348_p2, "sub_ln21_fu_348_p2");
    sc_trace(mVcdFile, p_lshr_fu_353_p4, "p_lshr_fu_353_p4");
    sc_trace(mVcdFile, tmp_1_fu_340_p3, "tmp_1_fu_340_p3");
    sc_trace(mVcdFile, sub_ln21_1_fu_363_p2, "sub_ln21_1_fu_363_p2");
    sc_trace(mVcdFile, tmp_2_fu_369_p4, "tmp_2_fu_369_p4");
    sc_trace(mVcdFile, tmp_fu_328_p3, "tmp_fu_328_p3");
    sc_trace(mVcdFile, select_ln21_fu_379_p3, "select_ln21_fu_379_p3");
    sc_trace(mVcdFile, select_ln21_1_fu_387_p3, "select_ln21_1_fu_387_p3");
    sc_trace(mVcdFile, add_ln55_fu_412_p2, "add_ln55_fu_412_p2");
    sc_trace(mVcdFile, add_ln55_1_fu_439_p2, "add_ln55_1_fu_439_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("aes_ha.hdltvin.dat");
    mHdltvoutHandle.open("aes_ha.hdltvout.dat");
}

aes_ha::~aes_ha() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete aes_ha_slv_s_axi_U;
    delete aes_ha_mst_m_axi_U;
    delete ctx_RoundKey_U;
    delete ctx_Iv_U;
    delete text_U;
    delete grp_KeyExpansion_fu_286;
    delete grp_AES_CTR_xcrypt_buffe_fu_296;
}

void aes_ha::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void aes_ha::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void aes_ha::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void aes_ha::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv1_1;
}

void aes_ha::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_10;
}

void aes_ha::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void aes_ha::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void aes_ha::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void aes_ha::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_AES_CTR_xcrypt_buffe_fu_296_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
             !(esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, mst_RVALID.read())) && 
             esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_1))) {
            grp_AES_CTR_xcrypt_buffe_fu_296_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AES_CTR_xcrypt_buffe_fu_296_ap_ready.read())) {
            grp_AES_CTR_xcrypt_buffe_fu_296_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_KeyExpansion_fu_286_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_KeyExpansion_fu_286_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_KeyExpansion_fu_286_ap_ready.read())) {
            grp_KeyExpansion_fu_286_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(mst_WREADY.read(), ap_const_logic_1))) {
        i_0_i1_reg_264 = i_4_reg_584.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, mst_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_AES_CTR_xcrypt_buffe_fu_296_ap_done.read())))) {
        i_0_i1_reg_264 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln21_fu_403_p2.read()))) {
        i_0_i4_reg_275 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        i_0_i4_reg_275 = i_reg_607.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_0_i_i_reg_229 = i_1_reg_528.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(grp_KeyExpansion_fu_286_ap_done.read(), ap_const_logic_1))) {
        i_0_i_i_reg_229 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        i_0_i_reg_252 = i_2_reg_565.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        i_0_i_reg_252 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln54_3_fu_311_p2.read(), ap_const_lv1_1))) {
        i_0_reg_240 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
                esl_seteq<1,1,1>(mst_BVALID.read(), ap_const_logic_1))) {
        i_0_reg_240 = i_3_reg_594.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_1_reg_528 = i_1_fu_317_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && !(esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, mst_RVALID.read())))) {
        i_2_reg_565 = i_2_fu_433_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln54_2_fu_458_p2.read()))) {
        i_3_reg_594 = i_3_fu_475_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        i_4_reg_584 = i_4_fu_464_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        i_reg_607 = i_fu_487_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        in_read_reg_503 = in_r.read();
        out_read_reg_498 = out_r.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, length_r_0_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, length_r_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, length_r_0_ack_out.read())))) {
        length_r_0_data_reg = length_r.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_KeyExpansion_fu_286_ap_done.read(), ap_const_logic_1))) {
        length_read_reg_508 = length_r_0_data_reg.read();
        p_cast7_reg_520 = p_cast7_fu_308_p1.read();
        p_cast9_reg_515 = p_cast9_fu_305_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && !(esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, mst_RVALID.read())) && esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_1))) {
        mst_addr_1_reg_575 =  (sc_lv<32>) (sext_ln55_2_fu_443_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, mst_RVALID.read())))) {
        mst_addr_read_reg_570 = mst_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln21_fu_403_p2.read()))) {
        mst_addr_reg_556 =  (sc_lv<32>) (sext_ln55_1_fu_417_p1.read());
        sext_ln55_reg_551 = sext_ln55_fu_408_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        text_load_reg_599 = text_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln54_3_fu_311_p2.read(), ap_const_lv1_1))) {
        tmp_3_reg_543 = tmp_3_fu_395_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln54_3_fu_311_p2.read()))) {
        zext_ln55_3_reg_533 = zext_ln55_3_fu_323_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln54_1_fu_481_p2.read()))) {
        zext_ln55_reg_612 = zext_ln55_fu_493_p1.read();
    }
}

void aes_ha::thread_add_ln21_fu_335_p2() {
    add_ln21_fu_335_p2 = (!length_read_reg_508.read().is_01() || !ap_const_lv32_F.is_01())? sc_lv<32>(): (sc_biguint<32>(length_read_reg_508.read()) + sc_biguint<32>(ap_const_lv32_F));
}

void aes_ha::thread_add_ln55_1_fu_439_p2() {
    add_ln55_1_fu_439_p2 = (!p_cast9_reg_515.read().is_01() || !sext_ln55_reg_551.read().is_01())? sc_lv<33>(): (sc_bigint<33>(p_cast9_reg_515.read()) + sc_bigint<33>(sext_ln55_reg_551.read()));
}

void aes_ha::thread_add_ln55_fu_412_p2() {
    add_ln55_fu_412_p2 = (!sext_ln55_fu_408_p1.read().is_01() || !p_cast7_reg_520.read().is_01())? sc_lv<33>(): (sc_bigint<33>(sext_ln55_fu_408_p1.read()) + sc_bigint<33>(p_cast7_reg_520.read()));
}

void aes_ha::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes_ha::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void aes_ha::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void aes_ha::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void aes_ha::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void aes_ha::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void aes_ha::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void aes_ha::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void aes_ha::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes_ha::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void aes_ha::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void aes_ha::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void aes_ha::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void aes_ha::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes_ha::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes_ha::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aes_ha::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void aes_ha::thread_ap_block_state13() {
    ap_block_state13 = (esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, mst_RVALID.read()));
}

void aes_ha::thread_ap_block_state13_ignore_call0() {
    ap_block_state13_ignore_call0 = (esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, mst_RVALID.read()));
}

void aes_ha::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes_ha::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes_ha::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes_ha::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void aes_ha::thread_ctx_Iv_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (zext_ln55_fu_493_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (zext_ln55_3_reg_533.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ctx_Iv_address0 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_address0.read();
    } else {
        ctx_Iv_address0 = "XXXX";
    }
}

void aes_ha::thread_ctx_Iv_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ctx_Iv_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ctx_Iv_ce0 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce0.read();
    } else {
        ctx_Iv_ce0 = ap_const_logic_0;
    }
}

void aes_ha::thread_ctx_Iv_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ctx_Iv_ce1 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_ce1.read();
    } else {
        ctx_Iv_ce1 = ap_const_logic_0;
    }
}

void aes_ha::thread_ctx_Iv_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_Iv_d0 = iv_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ctx_Iv_d0 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_d0.read();
    } else {
        ctx_Iv_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_ha::thread_ctx_Iv_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_Iv_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ctx_Iv_we0 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we0.read();
    } else {
        ctx_Iv_we0 = ap_const_logic_0;
    }
}

void aes_ha::thread_ctx_Iv_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ctx_Iv_we1 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_Iv_we1.read();
    } else {
        ctx_Iv_we1 = ap_const_logic_0;
    }
}

void aes_ha::thread_ctx_RoundKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ctx_RoundKey_address0 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctx_RoundKey_address0 = grp_KeyExpansion_fu_286_RoundKey_address0.read();
    } else {
        ctx_RoundKey_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_ha::thread_ctx_RoundKey_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ctx_RoundKey_address1 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctx_RoundKey_address1 = grp_KeyExpansion_fu_286_RoundKey_address1.read();
    } else {
        ctx_RoundKey_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_ha::thread_ctx_RoundKey_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ctx_RoundKey_ce0 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctx_RoundKey_ce0 = grp_KeyExpansion_fu_286_RoundKey_ce0.read();
    } else {
        ctx_RoundKey_ce0 = ap_const_logic_0;
    }
}

void aes_ha::thread_ctx_RoundKey_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ctx_RoundKey_ce1 = grp_AES_CTR_xcrypt_buffe_fu_296_ctx_RoundKey_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctx_RoundKey_ce1 = grp_KeyExpansion_fu_286_RoundKey_ce1.read();
    } else {
        ctx_RoundKey_ce1 = ap_const_logic_0;
    }
}

void aes_ha::thread_ctx_RoundKey_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctx_RoundKey_we0 = grp_KeyExpansion_fu_286_RoundKey_we0.read();
    } else {
        ctx_RoundKey_we0 = ap_const_logic_0;
    }
}

void aes_ha::thread_ctx_RoundKey_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctx_RoundKey_we1 = grp_KeyExpansion_fu_286_RoundKey_we1.read();
    } else {
        ctx_RoundKey_we1 = ap_const_logic_0;
    }
}

void aes_ha::thread_grp_AES_CTR_xcrypt_buffe_fu_296_ap_start() {
    grp_AES_CTR_xcrypt_buffe_fu_296_ap_start = grp_AES_CTR_xcrypt_buffe_fu_296_ap_start_reg.read();
}

void aes_ha::thread_grp_KeyExpansion_fu_286_ap_start() {
    grp_KeyExpansion_fu_286_ap_start = grp_KeyExpansion_fu_286_ap_start_reg.read();
}

void aes_ha::thread_i_1_fu_317_p2() {
    i_1_fu_317_p2 = (!i_0_i_i_reg_229.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i_i_reg_229.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes_ha::thread_i_2_fu_433_p2() {
    i_2_fu_433_p2 = (!i_0_i_reg_252.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i_reg_252.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes_ha::thread_i_3_fu_475_p2() {
    i_3_fu_475_p2 = (!i_0_reg_240.read().is_01() || !ap_const_lv32_10.is_01())? sc_lv<32>(): (sc_bigint<32>(i_0_reg_240.read()) + sc_biguint<32>(ap_const_lv32_10));
}

void aes_ha::thread_i_4_fu_464_p2() {
    i_4_fu_464_p2 = (!i_0_i1_reg_264.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i1_reg_264.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes_ha::thread_i_fu_487_p2() {
    i_fu_487_p2 = (!i_0_i4_reg_275.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i4_reg_275.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes_ha::thread_icmp_ln21_fu_403_p2() {
    icmp_ln21_fu_403_p2 = (!i_0_reg_240.read().is_01() || !tmp_3_reg_543.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_240.read() == tmp_3_reg_543.read());
}

void aes_ha::thread_icmp_ln54_1_fu_481_p2() {
    icmp_ln54_1_fu_481_p2 = (!i_0_i4_reg_275.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i4_reg_275.read() == ap_const_lv5_10);
}

void aes_ha::thread_icmp_ln54_2_fu_458_p2() {
    icmp_ln54_2_fu_458_p2 = (!i_0_i1_reg_264.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i1_reg_264.read() == ap_const_lv5_10);
}

void aes_ha::thread_icmp_ln54_3_fu_311_p2() {
    icmp_ln54_3_fu_311_p2 = (!i_0_i_i_reg_229.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_i_reg_229.read() == ap_const_lv5_10);
}

void aes_ha::thread_icmp_ln54_fu_427_p2() {
    icmp_ln54_fu_427_p2 = (!i_0_i_reg_252.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_252.read() == ap_const_lv5_10);
}

void aes_ha::thread_iv_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        iv_address0 =  (sc_lv<4>) (zext_ln55_reg_612.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        iv_address0 =  (sc_lv<4>) (zext_ln55_3_fu_323_p1.read());
    } else {
        iv_address0 = "XXXX";
    }
}

void aes_ha::thread_iv_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        iv_ce0 = ap_const_logic_1;
    } else {
        iv_ce0 = ap_const_logic_0;
    }
}

void aes_ha::thread_iv_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        iv_we0 = ap_const_logic_1;
    } else {
        iv_we0 = ap_const_logic_0;
    }
}

void aes_ha::thread_length_r_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_KeyExpansion_fu_286_ap_done.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        length_r_0_ack_out = ap_const_logic_1;
    } else {
        length_r_0_ack_out = ap_const_logic_0;
    }
}

void aes_ha::thread_mst_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(mst_ARREADY.read(), ap_const_logic_1))) {
        mst_ARVALID = ap_const_logic_1;
    } else {
        mst_ARVALID = ap_const_logic_0;
    }
}

void aes_ha::thread_mst_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, mst_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_AES_CTR_xcrypt_buffe_fu_296_ap_done.read())))) {
        mst_AWVALID = ap_const_logic_1;
    } else {
        mst_AWVALID = ap_const_logic_0;
    }
}

void aes_ha::thread_mst_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
         esl_seteq<1,1,1>(mst_BVALID.read(), ap_const_logic_1))) {
        mst_BREADY = ap_const_logic_1;
    } else {
        mst_BREADY = ap_const_logic_0;
    }
}

void aes_ha::thread_mst_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
         esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, mst_RVALID.read())))) {
        mst_RREADY = ap_const_logic_1;
    } else {
        mst_RREADY = ap_const_logic_0;
    }
}

void aes_ha::thread_mst_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(mst_WREADY.read(), ap_const_logic_1))) {
        mst_WVALID = ap_const_logic_1;
    } else {
        mst_WVALID = ap_const_logic_0;
    }
}

void aes_ha::thread_mst_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        mst_blk_n_AR = m_axi_mst_ARREADY.read();
    } else {
        mst_blk_n_AR = ap_const_logic_1;
    }
}

void aes_ha::thread_mst_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        mst_blk_n_AW = m_axi_mst_AWREADY.read();
    } else {
        mst_blk_n_AW = ap_const_logic_1;
    }
}

void aes_ha::thread_mst_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        mst_blk_n_B = m_axi_mst_BVALID.read();
    } else {
        mst_blk_n_B = ap_const_logic_1;
    }
}

void aes_ha::thread_mst_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
         esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_0))) {
        mst_blk_n_R = m_axi_mst_RVALID.read();
    } else {
        mst_blk_n_R = ap_const_logic_1;
    }
}

void aes_ha::thread_mst_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        mst_blk_n_W = m_axi_mst_WREADY.read();
    } else {
        mst_blk_n_W = ap_const_logic_1;
    }
}

void aes_ha::thread_p_cast7_fu_308_p1() {
    p_cast7_fu_308_p1 = esl_sext<33,32>(in_read_reg_503.read());
}

void aes_ha::thread_p_cast9_fu_305_p1() {
    p_cast9_fu_305_p1 = esl_sext<33,32>(out_read_reg_498.read());
}

void aes_ha::thread_p_lshr_fu_353_p4() {
    p_lshr_fu_353_p4 = sub_ln21_fu_348_p2.read().range(31, 4);
}

void aes_ha::thread_select_ln21_1_fu_387_p3() {
    select_ln21_1_fu_387_p3 = (!tmp_fu_328_p3.read()[0].is_01())? sc_lv<28>(): ((tmp_fu_328_p3.read()[0].to_bool())? ap_const_lv28_0: select_ln21_fu_379_p3.read());
}

void aes_ha::thread_select_ln21_fu_379_p3() {
    select_ln21_fu_379_p3 = (!tmp_1_fu_340_p3.read()[0].is_01())? sc_lv<28>(): ((tmp_1_fu_340_p3.read()[0].to_bool())? sub_ln21_1_fu_363_p2.read(): tmp_2_fu_369_p4.read());
}

void aes_ha::thread_sext_ln55_1_fu_417_p1() {
    sext_ln55_1_fu_417_p1 = esl_sext<64,33>(add_ln55_fu_412_p2.read());
}

void aes_ha::thread_sext_ln55_2_fu_443_p1() {
    sext_ln55_2_fu_443_p1 = esl_sext<64,33>(add_ln55_1_fu_439_p2.read());
}

void aes_ha::thread_sext_ln55_fu_408_p1() {
    sext_ln55_fu_408_p1 = esl_sext<33,32>(i_0_reg_240.read());
}

void aes_ha::thread_sub_ln21_1_fu_363_p2() {
    sub_ln21_1_fu_363_p2 = (!ap_const_lv28_0.is_01() || !p_lshr_fu_353_p4.read().is_01())? sc_lv<28>(): (sc_biguint<28>(ap_const_lv28_0) - sc_biguint<28>(p_lshr_fu_353_p4.read()));
}

void aes_ha::thread_sub_ln21_fu_348_p2() {
    sub_ln21_fu_348_p2 = (!ap_const_lv32_FFFFFFF1.is_01() || !length_read_reg_508.read().is_01())? sc_lv<32>(): (sc_bigint<32>(ap_const_lv32_FFFFFFF1) - sc_biguint<32>(length_read_reg_508.read()));
}

void aes_ha::thread_text_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        text_address0 =  (sc_lv<4>) (zext_ln55_2_fu_470_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        text_address0 =  (sc_lv<4>) (zext_ln55_1_fu_453_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        text_address0 = grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_address0.read();
    } else {
        text_address0 = "XXXX";
    }
}

void aes_ha::thread_text_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        text_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        text_ce0 = grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_ce0.read();
    } else {
        text_ce0 = ap_const_logic_0;
    }
}

void aes_ha::thread_text_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        text_d0 = mst_addr_read_reg_570.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        text_d0 = grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_d0.read();
    } else {
        text_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_ha::thread_text_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        text_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        text_we0 = grp_AES_CTR_xcrypt_buffe_fu_296_buf_r_we0.read();
    } else {
        text_we0 = ap_const_logic_0;
    }
}

void aes_ha::thread_tmp_1_fu_340_p3() {
    tmp_1_fu_340_p3 = add_ln21_fu_335_p2.read().range(31, 31);
}

void aes_ha::thread_tmp_2_fu_369_p4() {
    tmp_2_fu_369_p4 = add_ln21_fu_335_p2.read().range(31, 4);
}

void aes_ha::thread_tmp_3_fu_395_p3() {
    tmp_3_fu_395_p3 = esl_concat<28,4>(select_ln21_1_fu_387_p3.read(), ap_const_lv4_0);
}

void aes_ha::thread_tmp_fu_328_p3() {
    tmp_fu_328_p3 = length_read_reg_508.read().range(31, 31);
}

void aes_ha::thread_zext_ln55_1_fu_453_p1() {
    zext_ln55_1_fu_453_p1 = esl_zext<64,5>(i_0_i_reg_252.read());
}

void aes_ha::thread_zext_ln55_2_fu_470_p1() {
    zext_ln55_2_fu_470_p1 = esl_zext<64,5>(i_0_i1_reg_264.read());
}

void aes_ha::thread_zext_ln55_3_fu_323_p1() {
    zext_ln55_3_fu_323_p1 = esl_zext<64,5>(i_0_i_i_reg_229.read());
}

void aes_ha::thread_zext_ln55_fu_493_p1() {
    zext_ln55_fu_493_p1 = esl_zext<64,5>(i_0_i4_reg_275.read());
}

void aes_ha::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_KeyExpansion_fu_286_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln54_3_fu_311_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln21_fu_403_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(mst_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && !(esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, mst_RVALID.read())) && esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln54_fu_427_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, mst_RVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, mst_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_AES_CTR_xcrypt_buffe_fu_296_ap_done.read())))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln54_2_fu_458_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(mst_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(mst_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state22;
            }
            break;
        case 4194304 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln54_1_fu_481_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_state24;
            }
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<25>) ("XXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void aes_ha::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_mst_AWVALID\" :  \"" << m_axi_mst_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mst_AWREADY\" :  \"" << m_axi_mst_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_AWADDR\" :  \"" << m_axi_mst_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_AWID\" :  \"" << m_axi_mst_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_AWLEN\" :  \"" << m_axi_mst_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_AWSIZE\" :  \"" << m_axi_mst_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_AWBURST\" :  \"" << m_axi_mst_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_AWLOCK\" :  \"" << m_axi_mst_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_AWCACHE\" :  \"" << m_axi_mst_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_AWPROT\" :  \"" << m_axi_mst_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_AWQOS\" :  \"" << m_axi_mst_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_AWREGION\" :  \"" << m_axi_mst_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_AWUSER\" :  \"" << m_axi_mst_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_WVALID\" :  \"" << m_axi_mst_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mst_WREADY\" :  \"" << m_axi_mst_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_WDATA\" :  \"" << m_axi_mst_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_WSTRB\" :  \"" << m_axi_mst_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_WLAST\" :  \"" << m_axi_mst_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_WID\" :  \"" << m_axi_mst_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_WUSER\" :  \"" << m_axi_mst_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_ARVALID\" :  \"" << m_axi_mst_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mst_ARREADY\" :  \"" << m_axi_mst_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_ARADDR\" :  \"" << m_axi_mst_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_ARID\" :  \"" << m_axi_mst_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_ARLEN\" :  \"" << m_axi_mst_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_ARSIZE\" :  \"" << m_axi_mst_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_ARBURST\" :  \"" << m_axi_mst_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_ARLOCK\" :  \"" << m_axi_mst_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_ARCACHE\" :  \"" << m_axi_mst_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_ARPROT\" :  \"" << m_axi_mst_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_ARQOS\" :  \"" << m_axi_mst_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_ARREGION\" :  \"" << m_axi_mst_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_ARUSER\" :  \"" << m_axi_mst_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mst_RVALID\" :  \"" << m_axi_mst_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_RREADY\" :  \"" << m_axi_mst_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mst_RDATA\" :  \"" << m_axi_mst_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mst_RLAST\" :  \"" << m_axi_mst_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mst_RID\" :  \"" << m_axi_mst_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mst_RUSER\" :  \"" << m_axi_mst_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mst_RRESP\" :  \"" << m_axi_mst_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mst_BVALID\" :  \"" << m_axi_mst_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mst_BREADY\" :  \"" << m_axi_mst_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mst_BRESP\" :  \"" << m_axi_mst_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mst_BID\" :  \"" << m_axi_mst_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mst_BUSER\" :  \"" << m_axi_mst_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_AWVALID\" :  \"" << s_axi_slv_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_slv_AWREADY\" :  \"" << s_axi_slv_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_AWADDR\" :  \"" << s_axi_slv_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_WVALID\" :  \"" << s_axi_slv_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_slv_WREADY\" :  \"" << s_axi_slv_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_WDATA\" :  \"" << s_axi_slv_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_WSTRB\" :  \"" << s_axi_slv_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_ARVALID\" :  \"" << s_axi_slv_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_slv_ARREADY\" :  \"" << s_axi_slv_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_ARADDR\" :  \"" << s_axi_slv_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_slv_RVALID\" :  \"" << s_axi_slv_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_RREADY\" :  \"" << s_axi_slv_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_slv_RDATA\" :  \"" << s_axi_slv_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_slv_RRESP\" :  \"" << s_axi_slv_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_slv_BVALID\" :  \"" << s_axi_slv_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_BREADY\" :  \"" << s_axi_slv_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_slv_BRESP\" :  \"" << s_axi_slv_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

