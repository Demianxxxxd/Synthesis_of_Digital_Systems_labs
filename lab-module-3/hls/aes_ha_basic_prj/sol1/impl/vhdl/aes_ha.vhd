-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_ha is
generic (
    C_S_AXI_SLV_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_SLV_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_slv_AWVALID : IN STD_LOGIC;
    s_axi_slv_AWREADY : OUT STD_LOGIC;
    s_axi_slv_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_SLV_ADDR_WIDTH-1 downto 0);
    s_axi_slv_WVALID : IN STD_LOGIC;
    s_axi_slv_WREADY : OUT STD_LOGIC;
    s_axi_slv_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_SLV_DATA_WIDTH-1 downto 0);
    s_axi_slv_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_SLV_DATA_WIDTH/8-1 downto 0);
    s_axi_slv_ARVALID : IN STD_LOGIC;
    s_axi_slv_ARREADY : OUT STD_LOGIC;
    s_axi_slv_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_SLV_ADDR_WIDTH-1 downto 0);
    s_axi_slv_RVALID : OUT STD_LOGIC;
    s_axi_slv_RREADY : IN STD_LOGIC;
    s_axi_slv_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_SLV_DATA_WIDTH-1 downto 0);
    s_axi_slv_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_slv_BVALID : OUT STD_LOGIC;
    s_axi_slv_BREADY : IN STD_LOGIC;
    s_axi_slv_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of aes_ha is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes_ha,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s15-ftgb196-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.100000,HLS_SYN_LAT=11518,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=913,HLS_SYN_LUT=2691,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal iv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal iv_ce0 : STD_LOGIC;
    signal iv_we0 : STD_LOGIC;
    signal iv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal inout_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal inout_r_ce0 : STD_LOGIC;
    signal inout_r_we0 : STD_LOGIC;
    signal inout_r_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_fu_225_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_290 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln55_3_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_3_reg_295 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln54_3_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_242_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_308 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln55_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_reg_313 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln54_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_259_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_326 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln55_1_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_1_reg_331 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln54_1_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_276_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_344 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln55_2_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_2_reg_349 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln54_2_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_RoundKey_ce0 : STD_LOGIC;
    signal ctx_RoundKey_we0 : STD_LOGIC;
    signal ctx_RoundKey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_RoundKey_ce1 : STD_LOGIC;
    signal ctx_RoundKey_we1 : STD_LOGIC;
    signal ctx_RoundKey_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_Iv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ctx_Iv_ce0 : STD_LOGIC;
    signal ctx_Iv_we0 : STD_LOGIC;
    signal ctx_Iv_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_Iv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal text_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal text_ce0 : STD_LOGIC;
    signal text_we0 : STD_LOGIC;
    signal text_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal text_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_CTR_xcrypt_buffe_fu_198_ap_start : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_198_ap_done : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_198_ap_idle : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_198_ap_ready : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_ce0 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_ce0 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_we0 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_ce0 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_we0 : STD_LOGIC;
    signal grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_207_ap_start : STD_LOGIC;
    signal grp_KeyExpansion_fu_207_ap_done : STD_LOGIC;
    signal grp_KeyExpansion_fu_207_ap_idle : STD_LOGIC;
    signal grp_KeyExpansion_fu_207_ap_ready : STD_LOGIC;
    signal grp_KeyExpansion_fu_207_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_207_RoundKey_ce0 : STD_LOGIC;
    signal grp_KeyExpansion_fu_207_RoundKey_we0 : STD_LOGIC;
    signal grp_KeyExpansion_fu_207_RoundKey_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_207_RoundKey_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_207_RoundKey_ce1 : STD_LOGIC;
    signal grp_KeyExpansion_fu_207_RoundKey_we1 : STD_LOGIC;
    signal grp_KeyExpansion_fu_207_RoundKey_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeyExpansion_fu_207_Key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_KeyExpansion_fu_207_Key_ce0 : STD_LOGIC;
    signal i_0_i_i_reg_154 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_0_i_reg_165 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_0_i1_reg_176 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_0_i4_reg_187 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg : STD_LOGIC := '0';
    signal grp_KeyExpansion_fu_207_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component AES_CTR_xcrypt_buffe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_RoundKey_ce0 : OUT STD_LOGIC;
        ctx_RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctx_Iv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ctx_Iv_ce0 : OUT STD_LOGIC;
        ctx_Iv_we0 : OUT STD_LOGIC;
        ctx_Iv_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_Iv_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component KeyExpansion IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce0 : OUT STD_LOGIC;
        RoundKey_we0 : OUT STD_LOGIC;
        RoundKey_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce1 : OUT STD_LOGIC;
        RoundKey_we1 : OUT STD_LOGIC;
        RoundKey_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        Key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Key_ce0 : OUT STD_LOGIC;
        Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_ha_ctx_RoundKey IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_CTR_xcrypt_buffe_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_ha_slv_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        key_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        key_ce0 : IN STD_LOGIC;
        key_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        iv_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        iv_ce0 : IN STD_LOGIC;
        iv_we0 : IN STD_LOGIC;
        iv_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        iv_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        inout_r_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        inout_r_ce0 : IN STD_LOGIC;
        inout_r_we0 : IN STD_LOGIC;
        inout_r_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        inout_r_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    aes_ha_slv_s_axi_U : component aes_ha_slv_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_SLV_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_SLV_DATA_WIDTH)
    port map (
        AWVALID => s_axi_slv_AWVALID,
        AWREADY => s_axi_slv_AWREADY,
        AWADDR => s_axi_slv_AWADDR,
        WVALID => s_axi_slv_WVALID,
        WREADY => s_axi_slv_WREADY,
        WDATA => s_axi_slv_WDATA,
        WSTRB => s_axi_slv_WSTRB,
        ARVALID => s_axi_slv_ARVALID,
        ARREADY => s_axi_slv_ARREADY,
        ARADDR => s_axi_slv_ARADDR,
        RVALID => s_axi_slv_RVALID,
        RREADY => s_axi_slv_RREADY,
        RDATA => s_axi_slv_RDATA,
        RRESP => s_axi_slv_RRESP,
        BVALID => s_axi_slv_BVALID,
        BREADY => s_axi_slv_BREADY,
        BRESP => s_axi_slv_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        key_address0 => grp_KeyExpansion_fu_207_Key_address0,
        key_ce0 => grp_KeyExpansion_fu_207_Key_ce0,
        key_q0 => key_q0,
        iv_address0 => iv_address0,
        iv_ce0 => iv_ce0,
        iv_we0 => iv_we0,
        iv_d0 => ctx_Iv_q0,
        iv_q0 => iv_q0,
        inout_r_address0 => inout_r_address0,
        inout_r_ce0 => inout_r_ce0,
        inout_r_we0 => inout_r_we0,
        inout_r_d0 => text_q0,
        inout_r_q0 => inout_r_q0);

    ctx_RoundKey_U : component aes_ha_ctx_RoundKey
    generic map (
        DataWidth => 8,
        AddressRange => 176,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ctx_RoundKey_address0,
        ce0 => ctx_RoundKey_ce0,
        we0 => ctx_RoundKey_we0,
        d0 => grp_KeyExpansion_fu_207_RoundKey_d0,
        q0 => ctx_RoundKey_q0,
        address1 => grp_KeyExpansion_fu_207_RoundKey_address1,
        ce1 => ctx_RoundKey_ce1,
        we1 => ctx_RoundKey_we1,
        d1 => grp_KeyExpansion_fu_207_RoundKey_d1,
        q1 => ctx_RoundKey_q1);

    ctx_Iv_U : component AES_CTR_xcrypt_buffe_buffer
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ctx_Iv_address0,
        ce0 => ctx_Iv_ce0,
        we0 => ctx_Iv_we0,
        d0 => ctx_Iv_d0,
        q0 => ctx_Iv_q0);

    text_U : component AES_CTR_xcrypt_buffe_buffer
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => text_address0,
        ce0 => text_ce0,
        we0 => text_we0,
        d0 => text_d0,
        q0 => text_q0);

    grp_AES_CTR_xcrypt_buffe_fu_198 : component AES_CTR_xcrypt_buffe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_AES_CTR_xcrypt_buffe_fu_198_ap_start,
        ap_done => grp_AES_CTR_xcrypt_buffe_fu_198_ap_done,
        ap_idle => grp_AES_CTR_xcrypt_buffe_fu_198_ap_idle,
        ap_ready => grp_AES_CTR_xcrypt_buffe_fu_198_ap_ready,
        ctx_RoundKey_address0 => grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_address0,
        ctx_RoundKey_ce0 => grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_ce0,
        ctx_RoundKey_q0 => ctx_RoundKey_q0,
        ctx_Iv_address0 => grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_address0,
        ctx_Iv_ce0 => grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_ce0,
        ctx_Iv_we0 => grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_we0,
        ctx_Iv_d0 => grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_d0,
        ctx_Iv_q0 => ctx_Iv_q0,
        buf_r_address0 => grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_address0,
        buf_r_ce0 => grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_ce0,
        buf_r_we0 => grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_we0,
        buf_r_d0 => grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_d0,
        buf_r_q0 => text_q0);

    grp_KeyExpansion_fu_207 : component KeyExpansion
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_KeyExpansion_fu_207_ap_start,
        ap_done => grp_KeyExpansion_fu_207_ap_done,
        ap_idle => grp_KeyExpansion_fu_207_ap_idle,
        ap_ready => grp_KeyExpansion_fu_207_ap_ready,
        RoundKey_address0 => grp_KeyExpansion_fu_207_RoundKey_address0,
        RoundKey_ce0 => grp_KeyExpansion_fu_207_RoundKey_ce0,
        RoundKey_we0 => grp_KeyExpansion_fu_207_RoundKey_we0,
        RoundKey_d0 => grp_KeyExpansion_fu_207_RoundKey_d0,
        RoundKey_q0 => ctx_RoundKey_q0,
        RoundKey_address1 => grp_KeyExpansion_fu_207_RoundKey_address1,
        RoundKey_ce1 => grp_KeyExpansion_fu_207_RoundKey_ce1,
        RoundKey_we1 => grp_KeyExpansion_fu_207_RoundKey_we1,
        RoundKey_d1 => grp_KeyExpansion_fu_207_RoundKey_d1,
        RoundKey_q1 => ctx_RoundKey_q1,
        Key_address0 => grp_KeyExpansion_fu_207_Key_address0,
        Key_ce0 => grp_KeyExpansion_fu_207_Key_ce0,
        Key_q0 => key_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln54_fu_236_p2 = ap_const_lv1_1))) then 
                    grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AES_CTR_xcrypt_buffe_fu_198_ap_ready = ap_const_logic_1)) then 
                    grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeyExpansion_fu_207_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_KeyExpansion_fu_207_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_KeyExpansion_fu_207_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeyExpansion_fu_207_ap_ready = ap_const_logic_1)) then 
                    grp_KeyExpansion_fu_207_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i1_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_i1_reg_176 <= i_2_reg_326;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_AES_CTR_xcrypt_buffe_fu_198_ap_done = ap_const_logic_1))) then 
                i_0_i1_reg_176 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i4_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln54_1_fu_253_p2 = ap_const_lv1_1))) then 
                i_0_i4_reg_187 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_0_i4_reg_187 <= i_3_reg_344;
            end if; 
        end if;
    end process;

    i_0_i_i_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_i_i_reg_154 <= i_1_reg_290;
            elsif (((grp_KeyExpansion_fu_207_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_i_reg_154 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_3_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_reg_165 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i_reg_165 <= i_reg_308;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_290 <= i_1_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_2_reg_326 <= i_2_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_3_reg_344 <= i_3_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_reg_308 <= i_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_1_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    zext_ln55_1_reg_331(4 downto 0) <= zext_ln55_1_fu_265_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_2_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    zext_ln55_2_reg_349(4 downto 0) <= zext_ln55_2_fu_282_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_3_fu_219_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln55_3_reg_295(4 downto 0) <= zext_ln55_3_fu_231_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    zext_ln55_reg_313(4 downto 0) <= zext_ln55_fu_248_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln55_3_reg_295(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln55_reg_313(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln55_1_reg_331(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln55_2_reg_349(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln54_3_fu_219_p2, ap_CS_fsm_state5, icmp_ln54_fu_236_p2, ap_CS_fsm_state8, icmp_ln54_1_fu_253_p2, ap_CS_fsm_state10, icmp_ln54_2_fu_270_p2, grp_AES_CTR_xcrypt_buffe_fu_198_ap_done, grp_KeyExpansion_fu_207_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_KeyExpansion_fu_207_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln54_3_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln54_fu_236_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_AES_CTR_xcrypt_buffe_fu_198_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln54_1_fu_253_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln54_2_fu_270_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ctx_Iv_address0_assign_proc : process(zext_ln55_3_reg_295, ap_CS_fsm_state10, zext_ln55_2_fu_282_p1, grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_address0, ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ctx_Iv_address0 <= zext_ln55_2_fu_282_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_Iv_address0 <= zext_ln55_3_reg_295(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_Iv_address0 <= grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_address0;
        else 
            ctx_Iv_address0 <= "XXXX";
        end if; 
    end process;


    ctx_Iv_ce0_assign_proc : process(ap_CS_fsm_state10, grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_ce0, ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_Iv_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_Iv_ce0 <= grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_ce0;
        else 
            ctx_Iv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_Iv_d0_assign_proc : process(iv_q0, grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_d0, ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_Iv_d0 <= iv_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_Iv_d0 <= grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_d0;
        else 
            ctx_Iv_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_Iv_we0_assign_proc : process(grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_we0, ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_Iv_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_Iv_we0 <= grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_we0;
        else 
            ctx_Iv_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_address0_assign_proc : process(grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_address0, grp_KeyExpansion_fu_207_RoundKey_address0, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_RoundKey_address0 <= grp_KeyExpansion_fu_207_RoundKey_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_RoundKey_address0 <= grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_address0;
        else 
            ctx_RoundKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_RoundKey_ce0_assign_proc : process(grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_ce0, grp_KeyExpansion_fu_207_RoundKey_ce0, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_RoundKey_ce0 <= grp_KeyExpansion_fu_207_RoundKey_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_RoundKey_ce0 <= grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_ce0;
        else 
            ctx_RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_ce1_assign_proc : process(grp_KeyExpansion_fu_207_RoundKey_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_RoundKey_ce1 <= grp_KeyExpansion_fu_207_RoundKey_ce1;
        else 
            ctx_RoundKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_we0_assign_proc : process(grp_KeyExpansion_fu_207_RoundKey_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_RoundKey_we0 <= grp_KeyExpansion_fu_207_RoundKey_we0;
        else 
            ctx_RoundKey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_RoundKey_we1_assign_proc : process(grp_KeyExpansion_fu_207_RoundKey_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_RoundKey_we1 <= grp_KeyExpansion_fu_207_RoundKey_we1;
        else 
            ctx_RoundKey_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_AES_CTR_xcrypt_buffe_fu_198_ap_start <= grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg;
    grp_KeyExpansion_fu_207_ap_start <= grp_KeyExpansion_fu_207_ap_start_reg;
    i_1_fu_225_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_154) + unsigned(ap_const_lv5_1));
    i_2_fu_259_p2 <= std_logic_vector(unsigned(i_0_i1_reg_176) + unsigned(ap_const_lv5_1));
    i_3_fu_276_p2 <= std_logic_vector(unsigned(i_0_i4_reg_187) + unsigned(ap_const_lv5_1));
    i_fu_242_p2 <= std_logic_vector(unsigned(i_0_i_reg_165) + unsigned(ap_const_lv5_1));
    icmp_ln54_1_fu_253_p2 <= "1" when (i_0_i1_reg_176 = ap_const_lv5_10) else "0";
    icmp_ln54_2_fu_270_p2 <= "1" when (i_0_i4_reg_187 = ap_const_lv5_10) else "0";
    icmp_ln54_3_fu_219_p2 <= "1" when (i_0_i_i_reg_154 = ap_const_lv5_10) else "0";
    icmp_ln54_fu_236_p2 <= "1" when (i_0_i_reg_165 = ap_const_lv5_10) else "0";

    inout_r_address0_assign_proc : process(ap_CS_fsm_state5, zext_ln55_fu_248_p1, zext_ln55_1_reg_331, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            inout_r_address0 <= zext_ln55_1_reg_331(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inout_r_address0 <= zext_ln55_fu_248_p1(4 - 1 downto 0);
        else 
            inout_r_address0 <= "XXXX";
        end if; 
    end process;


    inout_r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            inout_r_ce0 <= ap_const_logic_1;
        else 
            inout_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inout_r_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            inout_r_we0 <= ap_const_logic_1;
        else 
            inout_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iv_address0_assign_proc : process(ap_CS_fsm_state3, zext_ln55_3_fu_231_p1, zext_ln55_2_reg_349, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            iv_address0 <= zext_ln55_2_reg_349(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            iv_address0 <= zext_ln55_3_fu_231_p1(4 - 1 downto 0);
        else 
            iv_address0 <= "XXXX";
        end if; 
    end process;


    iv_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            iv_ce0 <= ap_const_logic_1;
        else 
            iv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iv_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            iv_we0 <= ap_const_logic_1;
        else 
            iv_we0 <= ap_const_logic_0;
        end if; 
    end process;


    text_address0_assign_proc : process(zext_ln55_reg_313, ap_CS_fsm_state8, zext_ln55_1_fu_265_p1, grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_address0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            text_address0 <= zext_ln55_1_fu_265_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            text_address0 <= zext_ln55_reg_313(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            text_address0 <= grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_address0;
        else 
            text_address0 <= "XXXX";
        end if; 
    end process;


    text_ce0_assign_proc : process(ap_CS_fsm_state8, grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_ce0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            text_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            text_ce0 <= grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_ce0;
        else 
            text_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    text_d0_assign_proc : process(inout_r_q0, grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_d0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            text_d0 <= inout_r_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            text_d0 <= grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_d0;
        else 
            text_d0 <= "XXXXXXXX";
        end if; 
    end process;


    text_we0_assign_proc : process(grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_we0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            text_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            text_we0 <= grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_we0;
        else 
            text_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln55_1_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i1_reg_176),64));
    zext_ln55_2_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i4_reg_187),64));
    zext_ln55_3_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_154),64));
    zext_ln55_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_165),64));
end behav;
