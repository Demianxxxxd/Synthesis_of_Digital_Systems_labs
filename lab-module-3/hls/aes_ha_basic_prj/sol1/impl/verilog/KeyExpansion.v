// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module KeyExpansion (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        RoundKey_address0,
        RoundKey_ce0,
        RoundKey_we0,
        RoundKey_d0,
        RoundKey_q0,
        RoundKey_address1,
        RoundKey_ce1,
        RoundKey_we1,
        RoundKey_d1,
        RoundKey_q1,
        Key_address0,
        Key_ce0,
        Key_q0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] RoundKey_address0;
output   RoundKey_ce0;
output   RoundKey_we0;
output  [7:0] RoundKey_d0;
input  [7:0] RoundKey_q0;
output  [7:0] RoundKey_address1;
output   RoundKey_ce1;
output   RoundKey_we1;
output  [7:0] RoundKey_d1;
input  [7:0] RoundKey_q1;
output  [3:0] Key_address0;
output   Key_ce0;
input  [7:0] Key_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] RoundKey_address0;
reg RoundKey_ce0;
reg RoundKey_we0;
reg[7:0] RoundKey_d0;
reg[7:0] RoundKey_address1;
reg RoundKey_ce1;
reg RoundKey_we1;
reg[7:0] RoundKey_d1;
reg[3:0] Key_address0;
reg Key_ce0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
reg   [7:0] sbox_address1;
reg    sbox_ce1;
wire   [7:0] sbox_q1;
wire   [3:0] Rcon_address0;
reg    Rcon_ce0;
wire   [7:0] Rcon_q0;
wire   [2:0] i_fu_333_p2;
reg   [2:0] i_reg_620;
wire    ap_CS_fsm_state2;
wire   [3:0] shl_ln_fu_343_p3;
reg   [3:0] shl_ln_reg_625;
wire   [0:0] icmp_ln190_fu_327_p2;
wire   [63:0] zext_ln191_fu_351_p1;
reg   [63:0] zext_ln191_reg_632;
wire   [63:0] zext_ln192_fu_361_p1;
reg   [63:0] zext_ln192_reg_642;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln193_fu_371_p1;
reg   [63:0] zext_ln193_reg_652;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln194_fu_381_p1;
reg   [63:0] zext_ln194_reg_662;
wire    ap_CS_fsm_state5;
wire   [7:0] j_fu_392_p3;
reg   [7:0] j_reg_675;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln198_fu_386_p2;
wire   [0:0] icmp_ln207_fu_426_p2;
reg   [0:0] icmp_ln207_reg_699;
reg   [3:0] lshr_ln_reg_707;
wire   [5:0] i_4_fu_442_p2;
reg   [5:0] i_4_reg_712;
reg   [7:0] tempa_0_3_reg_717;
wire    ap_CS_fsm_state8;
reg   [7:0] tempa_1_reg_723;
reg   [7:0] tempa_2_reg_739;
wire    ap_CS_fsm_state9;
reg   [7:0] tempa_3_reg_744;
wire    ap_CS_fsm_state10;
wire   [7:0] xor_ln246_fu_527_p2;
reg   [7:0] xor_ln246_reg_785;
wire   [7:0] xor_ln247_fu_533_p2;
reg   [7:0] xor_ln247_reg_790;
wire   [7:0] xor_ln248_fu_585_p2;
reg   [7:0] xor_ln248_reg_805;
wire    ap_CS_fsm_state11;
wire   [7:0] xor_ln249_fu_591_p2;
reg   [7:0] xor_ln249_reg_810;
reg   [2:0] i_0_reg_305;
wire    ap_CS_fsm_state6;
reg   [5:0] i_1_reg_316;
wire    ap_CS_fsm_state12;
wire   [63:0] zext_ln201_fu_406_p1;
wire   [63:0] zext_ln202_fu_417_p1;
wire   [63:0] zext_ln203_fu_453_p1;
wire   [63:0] zext_ln204_fu_463_p1;
wire   [63:0] zext_ln225_fu_468_p1;
wire   [63:0] zext_ln226_fu_472_p1;
wire   [63:0] zext_ln231_fu_477_p1;
wire   [63:0] zext_ln246_fu_486_p1;
wire   [63:0] zext_ln247_fu_496_p1;
wire   [63:0] zext_ln227_fu_501_p1;
wire   [63:0] zext_ln228_fu_505_p1;
wire   [63:0] zext_ln248_fu_544_p1;
wire   [63:0] zext_ln249_fu_554_p1;
wire   [63:0] zext_ln246_1_fu_571_p1;
wire   [63:0] zext_ln247_1_fu_580_p1;
wire   [63:0] zext_ln248_1_fu_602_p1;
wire   [63:0] zext_ln249_1_fu_612_p1;
wire   [1:0] trunc_ln191_fu_339_p1;
wire   [3:0] or_ln192_fu_356_p2;
wire   [3:0] or_ln193_fu_366_p2;
wire   [3:0] or_ln194_fu_376_p2;
wire   [7:0] add_ln201_fu_400_p2;
wire   [7:0] add_ln202_fu_411_p2;
wire   [1:0] trunc_ln198_fu_422_p1;
wire   [7:0] add_ln203_fu_448_p2;
wire   [7:0] add_ln204_fu_458_p2;
wire   [7:0] add_ln246_fu_481_p2;
wire   [7:0] add_ln247_fu_491_p2;
wire   [7:0] tempa_0_fu_509_p2;
wire   [7:0] tempa_0_2_fu_521_p3;
wire   [7:0] tempa_1_2_fu_515_p3;
wire   [7:0] add_ln248_fu_539_p2;
wire   [7:0] add_ln249_fu_549_p2;
wire   [7:0] or_ln247_fu_575_p2;
wire   [7:0] tempa_2_2_fu_565_p3;
wire   [7:0] tempa_3_2_fu_559_p3;
wire   [7:0] or_ln248_fu_597_p2;
wire   [7:0] or_ln249_fu_607_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

KeyExpansion_sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0),
    .address1(sbox_address1),
    .ce1(sbox_ce1),
    .q1(sbox_q1)
);

KeyExpansion_Rcon #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
Rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon_address0),
    .ce0(Rcon_ce0),
    .q0(Rcon_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_reg_305 <= i_reg_620;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_305 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln190_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_316 <= 6'd4;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i_1_reg_316 <= i_4_reg_712;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln198_fu_386_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        i_4_reg_712 <= i_4_fu_442_p2;
        icmp_ln207_reg_699 <= icmp_ln207_fu_426_p2;
        j_reg_675[7 : 2] <= j_fu_392_p3[7 : 2];
        lshr_ln_reg_707 <= {{i_1_reg_316[5:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_620 <= i_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln190_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_625[3 : 2] <= shl_ln_fu_343_p3[3 : 2];
        zext_ln191_reg_632[3 : 2] <= zext_ln191_fu_351_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tempa_0_3_reg_717 <= RoundKey_q0;
        tempa_1_reg_723 <= RoundKey_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tempa_2_reg_739 <= RoundKey_q1;
        tempa_3_reg_744 <= RoundKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        xor_ln246_reg_785 <= xor_ln246_fu_527_p2;
        xor_ln247_reg_790 <= xor_ln247_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        xor_ln248_reg_805 <= xor_ln248_fu_585_p2;
        xor_ln249_reg_810 <= xor_ln249_fu_591_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln192_reg_642[3 : 2] <= zext_ln192_fu_361_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        zext_ln193_reg_652[3 : 2] <= zext_ln193_fu_371_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        zext_ln194_reg_662[3 : 2] <= zext_ln194_fu_381_p1[3 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Key_address0 = zext_ln194_fu_381_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Key_address0 = zext_ln193_fu_371_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Key_address0 = zext_ln192_fu_361_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Key_address0 = zext_ln191_fu_351_p1;
    end else begin
        Key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        Key_ce0 = 1'b1;
    end else begin
        Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Rcon_ce0 = 1'b1;
    end else begin
        Rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        RoundKey_address0 = zext_ln249_1_fu_612_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        RoundKey_address0 = zext_ln247_1_fu_580_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_address0 = zext_ln249_fu_554_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_address0 = zext_ln247_fu_496_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address0 = zext_ln204_fu_463_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_address0 = zext_ln201_fu_406_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_address0 = zext_ln194_reg_662;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        RoundKey_address0 = zext_ln193_reg_652;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address0 = zext_ln192_reg_642;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_address0 = zext_ln191_reg_632;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        RoundKey_address1 = zext_ln248_1_fu_602_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        RoundKey_address1 = zext_ln246_1_fu_571_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_address1 = zext_ln248_fu_544_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_address1 = zext_ln246_fu_486_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address1 = zext_ln203_fu_453_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        RoundKey_address1 = zext_ln202_fu_417_p1;
    end else begin
        RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        RoundKey_ce0 = 1'b1;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        RoundKey_ce1 = 1'b1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        RoundKey_d0 = xor_ln249_reg_810;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        RoundKey_d0 = xor_ln247_reg_790;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        RoundKey_d0 = Key_q0;
    end else begin
        RoundKey_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        RoundKey_d1 = xor_ln248_reg_805;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        RoundKey_d1 = xor_ln246_reg_785;
    end else begin
        RoundKey_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
        RoundKey_we0 = 1'b1;
    end else begin
        RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        RoundKey_we1 = 1'b1;
    end else begin
        RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln198_fu_386_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln198_fu_386_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sbox_address0 = zext_ln227_fu_501_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sbox_address0 = zext_ln225_fu_468_p1;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sbox_address1 = zext_ln228_fu_505_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sbox_address1 = zext_ln226_fu_472_p1;
    end else begin
        sbox_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        sbox_ce1 = 1'b1;
    end else begin
        sbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln190_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln198_fu_386_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Rcon_address0 = zext_ln231_fu_477_p1;

assign add_ln201_fu_400_p2 = ($signed(8'd252) + $signed(j_fu_392_p3));

assign add_ln202_fu_411_p2 = ($signed(8'd253) + $signed(j_fu_392_p3));

assign add_ln203_fu_448_p2 = ($signed(8'd254) + $signed(j_reg_675));

assign add_ln204_fu_458_p2 = ($signed(8'd255) + $signed(j_reg_675));

assign add_ln246_fu_481_p2 = ($signed(8'd240) + $signed(j_reg_675));

assign add_ln247_fu_491_p2 = ($signed(8'd241) + $signed(j_reg_675));

assign add_ln248_fu_539_p2 = ($signed(8'd242) + $signed(j_reg_675));

assign add_ln249_fu_549_p2 = ($signed(8'd243) + $signed(j_reg_675));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_4_fu_442_p2 = (6'd1 + i_1_reg_316);

assign i_fu_333_p2 = (i_0_reg_305 + 3'd1);

assign icmp_ln190_fu_327_p2 = ((i_0_reg_305 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln198_fu_386_p2 = ((i_1_reg_316 == 6'd44) ? 1'b1 : 1'b0);

assign icmp_ln207_fu_426_p2 = ((trunc_ln198_fu_422_p1 == 2'd0) ? 1'b1 : 1'b0);

assign j_fu_392_p3 = {{i_1_reg_316}, {2'd0}};

assign or_ln192_fu_356_p2 = (shl_ln_reg_625 | 4'd1);

assign or_ln193_fu_366_p2 = (shl_ln_reg_625 | 4'd2);

assign or_ln194_fu_376_p2 = (shl_ln_reg_625 | 4'd3);

assign or_ln247_fu_575_p2 = (j_reg_675 | 8'd1);

assign or_ln248_fu_597_p2 = (j_reg_675 | 8'd2);

assign or_ln249_fu_607_p2 = (j_reg_675 | 8'd3);

assign shl_ln_fu_343_p3 = {{trunc_ln191_fu_339_p1}, {2'd0}};

assign tempa_0_2_fu_521_p3 = ((icmp_ln207_reg_699[0:0] === 1'b1) ? tempa_0_fu_509_p2 : tempa_0_3_reg_717);

assign tempa_0_fu_509_p2 = (sbox_q0 ^ Rcon_q0);

assign tempa_1_2_fu_515_p3 = ((icmp_ln207_reg_699[0:0] === 1'b1) ? sbox_q1 : tempa_1_reg_723);

assign tempa_2_2_fu_565_p3 = ((icmp_ln207_reg_699[0:0] === 1'b1) ? sbox_q0 : tempa_2_reg_739);

assign tempa_3_2_fu_559_p3 = ((icmp_ln207_reg_699[0:0] === 1'b1) ? sbox_q1 : tempa_3_reg_744);

assign trunc_ln191_fu_339_p1 = i_0_reg_305[1:0];

assign trunc_ln198_fu_422_p1 = i_1_reg_316[1:0];

assign xor_ln246_fu_527_p2 = (tempa_0_2_fu_521_p3 ^ RoundKey_q1);

assign xor_ln247_fu_533_p2 = (tempa_1_2_fu_515_p3 ^ RoundKey_q0);

assign xor_ln248_fu_585_p2 = (tempa_2_2_fu_565_p3 ^ RoundKey_q1);

assign xor_ln249_fu_591_p2 = (tempa_3_2_fu_559_p3 ^ RoundKey_q0);

assign zext_ln191_fu_351_p1 = shl_ln_fu_343_p3;

assign zext_ln192_fu_361_p1 = or_ln192_fu_356_p2;

assign zext_ln193_fu_371_p1 = or_ln193_fu_366_p2;

assign zext_ln194_fu_381_p1 = or_ln194_fu_376_p2;

assign zext_ln201_fu_406_p1 = add_ln201_fu_400_p2;

assign zext_ln202_fu_417_p1 = add_ln202_fu_411_p2;

assign zext_ln203_fu_453_p1 = add_ln203_fu_448_p2;

assign zext_ln204_fu_463_p1 = add_ln204_fu_458_p2;

assign zext_ln225_fu_468_p1 = tempa_1_reg_723;

assign zext_ln226_fu_472_p1 = RoundKey_q1;

assign zext_ln227_fu_501_p1 = tempa_3_reg_744;

assign zext_ln228_fu_505_p1 = tempa_0_3_reg_717;

assign zext_ln231_fu_477_p1 = lshr_ln_reg_707;

assign zext_ln246_1_fu_571_p1 = j_reg_675;

assign zext_ln246_fu_486_p1 = add_ln246_fu_481_p2;

assign zext_ln247_1_fu_580_p1 = or_ln247_fu_575_p2;

assign zext_ln247_fu_496_p1 = add_ln247_fu_491_p2;

assign zext_ln248_1_fu_602_p1 = or_ln248_fu_597_p2;

assign zext_ln248_fu_544_p1 = add_ln248_fu_539_p2;

assign zext_ln249_1_fu_612_p1 = or_ln249_fu_607_p2;

assign zext_ln249_fu_554_p1 = add_ln249_fu_549_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_625[1:0] <= 2'b00;
    zext_ln191_reg_632[1:0] <= 2'b00;
    zext_ln191_reg_632[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln192_reg_642[1:0] <= 2'b01;
    zext_ln192_reg_642[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln193_reg_652[1:0] <= 2'b10;
    zext_ln193_reg_652[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln194_reg_662[1:0] <= 2'b11;
    zext_ln194_reg_662[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_reg_675[1:0] <= 2'b00;
end

endmodule //KeyExpansion
