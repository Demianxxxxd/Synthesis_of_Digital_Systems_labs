// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes_ha,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s15-ftgb196-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.100000,HLS_SYN_LAT=11518,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=913,HLS_SYN_LUT=2691,HLS_VERSION=2019_1}" *)

module aes_ha (
        ap_clk,
        ap_rst_n,
        s_axi_slv_AWVALID,
        s_axi_slv_AWREADY,
        s_axi_slv_AWADDR,
        s_axi_slv_WVALID,
        s_axi_slv_WREADY,
        s_axi_slv_WDATA,
        s_axi_slv_WSTRB,
        s_axi_slv_ARVALID,
        s_axi_slv_ARREADY,
        s_axi_slv_ARADDR,
        s_axi_slv_RVALID,
        s_axi_slv_RREADY,
        s_axi_slv_RDATA,
        s_axi_slv_RRESP,
        s_axi_slv_BVALID,
        s_axi_slv_BREADY,
        s_axi_slv_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;
parameter    C_S_AXI_SLV_DATA_WIDTH = 32;
parameter    C_S_AXI_SLV_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_SLV_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_slv_AWVALID;
output   s_axi_slv_AWREADY;
input  [C_S_AXI_SLV_ADDR_WIDTH - 1:0] s_axi_slv_AWADDR;
input   s_axi_slv_WVALID;
output   s_axi_slv_WREADY;
input  [C_S_AXI_SLV_DATA_WIDTH - 1:0] s_axi_slv_WDATA;
input  [C_S_AXI_SLV_WSTRB_WIDTH - 1:0] s_axi_slv_WSTRB;
input   s_axi_slv_ARVALID;
output   s_axi_slv_ARREADY;
input  [C_S_AXI_SLV_ADDR_WIDTH - 1:0] s_axi_slv_ARADDR;
output   s_axi_slv_RVALID;
input   s_axi_slv_RREADY;
output  [C_S_AXI_SLV_DATA_WIDTH - 1:0] s_axi_slv_RDATA;
output  [1:0] s_axi_slv_RRESP;
output   s_axi_slv_BVALID;
input   s_axi_slv_BREADY;
output  [1:0] s_axi_slv_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] key_q0;
reg   [3:0] iv_address0;
reg    iv_ce0;
reg    iv_we0;
wire   [7:0] iv_q0;
reg   [3:0] inout_r_address0;
reg    inout_r_ce0;
reg    inout_r_we0;
wire   [7:0] inout_r_q0;
wire   [4:0] i_1_fu_225_p2;
reg   [4:0] i_1_reg_290;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln55_3_fu_231_p1;
reg   [63:0] zext_ln55_3_reg_295;
wire   [0:0] icmp_ln54_3_fu_219_p2;
wire   [4:0] i_fu_242_p2;
reg   [4:0] i_reg_308;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln55_fu_248_p1;
reg   [63:0] zext_ln55_reg_313;
wire   [0:0] icmp_ln54_fu_236_p2;
wire   [4:0] i_2_fu_259_p2;
reg   [4:0] i_2_reg_326;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln55_1_fu_265_p1;
reg   [63:0] zext_ln55_1_reg_331;
wire   [0:0] icmp_ln54_1_fu_253_p2;
wire   [4:0] i_3_fu_276_p2;
reg   [4:0] i_3_reg_344;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln55_2_fu_282_p1;
reg   [63:0] zext_ln55_2_reg_349;
wire   [0:0] icmp_ln54_2_fu_270_p2;
reg   [7:0] ctx_RoundKey_address0;
reg    ctx_RoundKey_ce0;
reg    ctx_RoundKey_we0;
wire   [7:0] ctx_RoundKey_q0;
reg    ctx_RoundKey_ce1;
reg    ctx_RoundKey_we1;
wire   [7:0] ctx_RoundKey_q1;
reg   [3:0] ctx_Iv_address0;
reg    ctx_Iv_ce0;
reg    ctx_Iv_we0;
reg   [7:0] ctx_Iv_d0;
wire   [7:0] ctx_Iv_q0;
reg   [3:0] text_address0;
reg    text_ce0;
reg    text_we0;
reg   [7:0] text_d0;
wire   [7:0] text_q0;
wire    grp_AES_CTR_xcrypt_buffe_fu_198_ap_start;
wire    grp_AES_CTR_xcrypt_buffe_fu_198_ap_done;
wire    grp_AES_CTR_xcrypt_buffe_fu_198_ap_idle;
wire    grp_AES_CTR_xcrypt_buffe_fu_198_ap_ready;
wire   [7:0] grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_address0;
wire    grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_ce0;
wire   [3:0] grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_address0;
wire    grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_ce0;
wire    grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_we0;
wire   [7:0] grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_d0;
wire   [3:0] grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_address0;
wire    grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_ce0;
wire    grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_we0;
wire   [7:0] grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_d0;
wire    grp_KeyExpansion_fu_207_ap_start;
wire    grp_KeyExpansion_fu_207_ap_done;
wire    grp_KeyExpansion_fu_207_ap_idle;
wire    grp_KeyExpansion_fu_207_ap_ready;
wire   [7:0] grp_KeyExpansion_fu_207_RoundKey_address0;
wire    grp_KeyExpansion_fu_207_RoundKey_ce0;
wire    grp_KeyExpansion_fu_207_RoundKey_we0;
wire   [7:0] grp_KeyExpansion_fu_207_RoundKey_d0;
wire   [7:0] grp_KeyExpansion_fu_207_RoundKey_address1;
wire    grp_KeyExpansion_fu_207_RoundKey_ce1;
wire    grp_KeyExpansion_fu_207_RoundKey_we1;
wire   [7:0] grp_KeyExpansion_fu_207_RoundKey_d1;
wire   [3:0] grp_KeyExpansion_fu_207_Key_address0;
wire    grp_KeyExpansion_fu_207_Key_ce0;
reg   [4:0] i_0_i_i_reg_154;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
reg   [4:0] i_0_i_reg_165;
wire    ap_CS_fsm_state6;
reg   [4:0] i_0_i1_reg_176;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
reg   [4:0] i_0_i4_reg_187;
wire    ap_CS_fsm_state11;
reg    grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg;
reg    grp_KeyExpansion_fu_207_ap_start_reg;
wire    ap_CS_fsm_state12;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg = 1'b0;
#0 grp_KeyExpansion_fu_207_ap_start_reg = 1'b0;
end

aes_ha_slv_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_SLV_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_SLV_DATA_WIDTH ))
aes_ha_slv_s_axi_U(
    .AWVALID(s_axi_slv_AWVALID),
    .AWREADY(s_axi_slv_AWREADY),
    .AWADDR(s_axi_slv_AWADDR),
    .WVALID(s_axi_slv_WVALID),
    .WREADY(s_axi_slv_WREADY),
    .WDATA(s_axi_slv_WDATA),
    .WSTRB(s_axi_slv_WSTRB),
    .ARVALID(s_axi_slv_ARVALID),
    .ARREADY(s_axi_slv_ARREADY),
    .ARADDR(s_axi_slv_ARADDR),
    .RVALID(s_axi_slv_RVALID),
    .RREADY(s_axi_slv_RREADY),
    .RDATA(s_axi_slv_RDATA),
    .RRESP(s_axi_slv_RRESP),
    .BVALID(s_axi_slv_BVALID),
    .BREADY(s_axi_slv_BREADY),
    .BRESP(s_axi_slv_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .key_address0(grp_KeyExpansion_fu_207_Key_address0),
    .key_ce0(grp_KeyExpansion_fu_207_Key_ce0),
    .key_q0(key_q0),
    .iv_address0(iv_address0),
    .iv_ce0(iv_ce0),
    .iv_we0(iv_we0),
    .iv_d0(ctx_Iv_q0),
    .iv_q0(iv_q0),
    .inout_r_address0(inout_r_address0),
    .inout_r_ce0(inout_r_ce0),
    .inout_r_we0(inout_r_we0),
    .inout_r_d0(text_q0),
    .inout_r_q0(inout_r_q0)
);

aes_ha_ctx_RoundKey #(
    .DataWidth( 8 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
ctx_RoundKey_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ctx_RoundKey_address0),
    .ce0(ctx_RoundKey_ce0),
    .we0(ctx_RoundKey_we0),
    .d0(grp_KeyExpansion_fu_207_RoundKey_d0),
    .q0(ctx_RoundKey_q0),
    .address1(grp_KeyExpansion_fu_207_RoundKey_address1),
    .ce1(ctx_RoundKey_ce1),
    .we1(ctx_RoundKey_we1),
    .d1(grp_KeyExpansion_fu_207_RoundKey_d1),
    .q1(ctx_RoundKey_q1)
);

AES_CTR_xcrypt_buffe_buffer #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
ctx_Iv_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ctx_Iv_address0),
    .ce0(ctx_Iv_ce0),
    .we0(ctx_Iv_we0),
    .d0(ctx_Iv_d0),
    .q0(ctx_Iv_q0)
);

AES_CTR_xcrypt_buffe_buffer #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
text_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(text_address0),
    .ce0(text_ce0),
    .we0(text_we0),
    .d0(text_d0),
    .q0(text_q0)
);

AES_CTR_xcrypt_buffe grp_AES_CTR_xcrypt_buffe_fu_198(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_AES_CTR_xcrypt_buffe_fu_198_ap_start),
    .ap_done(grp_AES_CTR_xcrypt_buffe_fu_198_ap_done),
    .ap_idle(grp_AES_CTR_xcrypt_buffe_fu_198_ap_idle),
    .ap_ready(grp_AES_CTR_xcrypt_buffe_fu_198_ap_ready),
    .ctx_RoundKey_address0(grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_address0),
    .ctx_RoundKey_ce0(grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_ce0),
    .ctx_RoundKey_q0(ctx_RoundKey_q0),
    .ctx_Iv_address0(grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_address0),
    .ctx_Iv_ce0(grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_ce0),
    .ctx_Iv_we0(grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_we0),
    .ctx_Iv_d0(grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_d0),
    .ctx_Iv_q0(ctx_Iv_q0),
    .buf_r_address0(grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_address0),
    .buf_r_ce0(grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_ce0),
    .buf_r_we0(grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_we0),
    .buf_r_d0(grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_d0),
    .buf_r_q0(text_q0)
);

KeyExpansion grp_KeyExpansion_fu_207(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_KeyExpansion_fu_207_ap_start),
    .ap_done(grp_KeyExpansion_fu_207_ap_done),
    .ap_idle(grp_KeyExpansion_fu_207_ap_idle),
    .ap_ready(grp_KeyExpansion_fu_207_ap_ready),
    .RoundKey_address0(grp_KeyExpansion_fu_207_RoundKey_address0),
    .RoundKey_ce0(grp_KeyExpansion_fu_207_RoundKey_ce0),
    .RoundKey_we0(grp_KeyExpansion_fu_207_RoundKey_we0),
    .RoundKey_d0(grp_KeyExpansion_fu_207_RoundKey_d0),
    .RoundKey_q0(ctx_RoundKey_q0),
    .RoundKey_address1(grp_KeyExpansion_fu_207_RoundKey_address1),
    .RoundKey_ce1(grp_KeyExpansion_fu_207_RoundKey_ce1),
    .RoundKey_we1(grp_KeyExpansion_fu_207_RoundKey_we1),
    .RoundKey_d1(grp_KeyExpansion_fu_207_RoundKey_d1),
    .RoundKey_q1(ctx_RoundKey_q1),
    .Key_address0(grp_KeyExpansion_fu_207_Key_address0),
    .Key_ce0(grp_KeyExpansion_fu_207_Key_ce0),
    .Key_q0(key_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln54_fu_236_p2 == 1'd1))) begin
            grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg <= 1'b1;
        end else if ((grp_AES_CTR_xcrypt_buffe_fu_198_ap_ready == 1'b1)) begin
            grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_KeyExpansion_fu_207_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_KeyExpansion_fu_207_ap_start_reg <= 1'b1;
        end else if ((grp_KeyExpansion_fu_207_ap_ready == 1'b1)) begin
            grp_KeyExpansion_fu_207_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_i1_reg_176 <= i_2_reg_326;
    end else if (((1'b1 == ap_CS_fsm_state7) & (grp_AES_CTR_xcrypt_buffe_fu_198_ap_done == 1'b1))) begin
        i_0_i1_reg_176 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_1_fu_253_p2 == 1'd1))) begin
        i_0_i4_reg_187 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_0_i4_reg_187 <= i_3_reg_344;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i_i_reg_154 <= i_1_reg_290;
    end else if (((grp_KeyExpansion_fu_207_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_i_reg_154 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_3_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_i_reg_165 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i_reg_165 <= i_reg_308;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_290 <= i_1_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_2_reg_326 <= i_2_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_3_reg_344 <= i_3_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_308 <= i_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_1_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        zext_ln55_1_reg_331[4 : 0] <= zext_ln55_1_fu_265_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_2_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        zext_ln55_2_reg_349[4 : 0] <= zext_ln55_2_fu_282_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_3_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln55_3_reg_295[4 : 0] <= zext_ln55_3_fu_231_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        zext_ln55_reg_313[4 : 0] <= zext_ln55_fu_248_p1[4 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_Iv_address0 = zext_ln55_2_fu_282_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_Iv_address0 = zext_ln55_3_reg_295;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_Iv_address0 = grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_address0;
    end else begin
        ctx_Iv_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_Iv_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_Iv_ce0 = grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_ce0;
    end else begin
        ctx_Iv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_Iv_d0 = iv_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_Iv_d0 = grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_d0;
    end else begin
        ctx_Iv_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_Iv_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_Iv_we0 = grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_we0;
    end else begin
        ctx_Iv_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_address0 = grp_KeyExpansion_fu_207_RoundKey_address0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_RoundKey_address0 = grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_address0;
    end else begin
        ctx_RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_ce0 = grp_KeyExpansion_fu_207_RoundKey_ce0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_RoundKey_ce0 = grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_ce0;
    end else begin
        ctx_RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_ce1 = grp_KeyExpansion_fu_207_RoundKey_ce1;
    end else begin
        ctx_RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_we0 = grp_KeyExpansion_fu_207_RoundKey_we0;
    end else begin
        ctx_RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_RoundKey_we1 = grp_KeyExpansion_fu_207_RoundKey_we1;
    end else begin
        ctx_RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        inout_r_address0 = zext_ln55_1_reg_331;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        inout_r_address0 = zext_ln55_fu_248_p1;
    end else begin
        inout_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        inout_r_ce0 = 1'b1;
    end else begin
        inout_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        inout_r_we0 = 1'b1;
    end else begin
        inout_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        iv_address0 = zext_ln55_2_reg_349;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        iv_address0 = zext_ln55_3_fu_231_p1;
    end else begin
        iv_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11))) begin
        iv_ce0 = 1'b1;
    end else begin
        iv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        iv_we0 = 1'b1;
    end else begin
        iv_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        text_address0 = zext_ln55_1_fu_265_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        text_address0 = zext_ln55_reg_313;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        text_address0 = grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_address0;
    end else begin
        text_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        text_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        text_ce0 = grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_ce0;
    end else begin
        text_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        text_d0 = inout_r_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        text_d0 = grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_d0;
    end else begin
        text_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        text_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        text_we0 = grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_we0;
    end else begin
        text_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_KeyExpansion_fu_207_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln54_3_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln54_fu_236_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_AES_CTR_xcrypt_buffe_fu_198_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_1_fu_253_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln54_2_fu_270_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_AES_CTR_xcrypt_buffe_fu_198_ap_start = grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg;

assign grp_KeyExpansion_fu_207_ap_start = grp_KeyExpansion_fu_207_ap_start_reg;

assign i_1_fu_225_p2 = (i_0_i_i_reg_154 + 5'd1);

assign i_2_fu_259_p2 = (i_0_i1_reg_176 + 5'd1);

assign i_3_fu_276_p2 = (i_0_i4_reg_187 + 5'd1);

assign i_fu_242_p2 = (i_0_i_reg_165 + 5'd1);

assign icmp_ln54_1_fu_253_p2 = ((i_0_i1_reg_176 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln54_2_fu_270_p2 = ((i_0_i4_reg_187 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln54_3_fu_219_p2 = ((i_0_i_i_reg_154 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_236_p2 = ((i_0_i_reg_165 == 5'd16) ? 1'b1 : 1'b0);

assign zext_ln55_1_fu_265_p1 = i_0_i1_reg_176;

assign zext_ln55_2_fu_282_p1 = i_0_i4_reg_187;

assign zext_ln55_3_fu_231_p1 = i_0_i_i_reg_154;

assign zext_ln55_fu_248_p1 = i_0_i_reg_165;

always @ (posedge ap_clk) begin
    zext_ln55_3_reg_295[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln55_reg_313[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln55_1_reg_331[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln55_2_reg_349[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //aes_ha
