// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _aes_ha_HH_
#define _aes_ha_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "AES_CTR_xcrypt_buffe.h"
#include "KeyExpansion.h"
#include "aes_ha_ctx_RoundKey.h"
#include "AES_CTR_xcrypt_buffe_buffer.h"
#include "aes_ha_slv_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_SLV_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_SLV_DATA_WIDTH = 32>
struct aes_ha : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_slv_AWVALID;
    sc_out< sc_logic > s_axi_slv_AWREADY;
    sc_in< sc_uint<C_S_AXI_SLV_ADDR_WIDTH> > s_axi_slv_AWADDR;
    sc_in< sc_logic > s_axi_slv_WVALID;
    sc_out< sc_logic > s_axi_slv_WREADY;
    sc_in< sc_uint<C_S_AXI_SLV_DATA_WIDTH> > s_axi_slv_WDATA;
    sc_in< sc_uint<C_S_AXI_SLV_DATA_WIDTH/8> > s_axi_slv_WSTRB;
    sc_in< sc_logic > s_axi_slv_ARVALID;
    sc_out< sc_logic > s_axi_slv_ARREADY;
    sc_in< sc_uint<C_S_AXI_SLV_ADDR_WIDTH> > s_axi_slv_ARADDR;
    sc_out< sc_logic > s_axi_slv_RVALID;
    sc_in< sc_logic > s_axi_slv_RREADY;
    sc_out< sc_uint<C_S_AXI_SLV_DATA_WIDTH> > s_axi_slv_RDATA;
    sc_out< sc_lv<2> > s_axi_slv_RRESP;
    sc_out< sc_logic > s_axi_slv_BVALID;
    sc_in< sc_logic > s_axi_slv_BREADY;
    sc_out< sc_lv<2> > s_axi_slv_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    aes_ha(sc_module_name name);
    SC_HAS_PROCESS(aes_ha);

    ~aes_ha();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    aes_ha_slv_s_axi<C_S_AXI_SLV_ADDR_WIDTH,C_S_AXI_SLV_DATA_WIDTH>* aes_ha_slv_s_axi_U;
    aes_ha_ctx_RoundKey* ctx_RoundKey_U;
    AES_CTR_xcrypt_buffe_buffer* ctx_Iv_U;
    AES_CTR_xcrypt_buffe_buffer* text_U;
    AES_CTR_xcrypt_buffe* grp_AES_CTR_xcrypt_buffe_fu_198;
    KeyExpansion* grp_KeyExpansion_fu_207;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<12> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<8> > key_q0;
    sc_signal< sc_lv<4> > iv_address0;
    sc_signal< sc_logic > iv_ce0;
    sc_signal< sc_logic > iv_we0;
    sc_signal< sc_lv<8> > iv_q0;
    sc_signal< sc_lv<4> > inout_r_address0;
    sc_signal< sc_logic > inout_r_ce0;
    sc_signal< sc_logic > inout_r_we0;
    sc_signal< sc_lv<8> > inout_r_q0;
    sc_signal< sc_lv<5> > i_1_fu_225_p2;
    sc_signal< sc_lv<5> > i_1_reg_290;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > zext_ln55_3_fu_231_p1;
    sc_signal< sc_lv<64> > zext_ln55_3_reg_295;
    sc_signal< sc_lv<1> > icmp_ln54_3_fu_219_p2;
    sc_signal< sc_lv<5> > i_fu_242_p2;
    sc_signal< sc_lv<5> > i_reg_308;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > zext_ln55_fu_248_p1;
    sc_signal< sc_lv<64> > zext_ln55_reg_313;
    sc_signal< sc_lv<1> > icmp_ln54_fu_236_p2;
    sc_signal< sc_lv<5> > i_2_fu_259_p2;
    sc_signal< sc_lv<5> > i_2_reg_326;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<64> > zext_ln55_1_fu_265_p1;
    sc_signal< sc_lv<64> > zext_ln55_1_reg_331;
    sc_signal< sc_lv<1> > icmp_ln54_1_fu_253_p2;
    sc_signal< sc_lv<5> > i_3_fu_276_p2;
    sc_signal< sc_lv<5> > i_3_reg_344;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<64> > zext_ln55_2_fu_282_p1;
    sc_signal< sc_lv<64> > zext_ln55_2_reg_349;
    sc_signal< sc_lv<1> > icmp_ln54_2_fu_270_p2;
    sc_signal< sc_lv<8> > ctx_RoundKey_address0;
    sc_signal< sc_logic > ctx_RoundKey_ce0;
    sc_signal< sc_logic > ctx_RoundKey_we0;
    sc_signal< sc_lv<8> > ctx_RoundKey_q0;
    sc_signal< sc_logic > ctx_RoundKey_ce1;
    sc_signal< sc_logic > ctx_RoundKey_we1;
    sc_signal< sc_lv<8> > ctx_RoundKey_q1;
    sc_signal< sc_lv<4> > ctx_Iv_address0;
    sc_signal< sc_logic > ctx_Iv_ce0;
    sc_signal< sc_logic > ctx_Iv_we0;
    sc_signal< sc_lv<8> > ctx_Iv_d0;
    sc_signal< sc_lv<8> > ctx_Iv_q0;
    sc_signal< sc_lv<4> > text_address0;
    sc_signal< sc_logic > text_ce0;
    sc_signal< sc_logic > text_we0;
    sc_signal< sc_lv<8> > text_d0;
    sc_signal< sc_lv<8> > text_q0;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_198_ap_start;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_198_ap_done;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_198_ap_idle;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_198_ap_ready;
    sc_signal< sc_lv<8> > grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_address0;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_ce0;
    sc_signal< sc_lv<4> > grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_address0;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_ce0;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_we0;
    sc_signal< sc_lv<8> > grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_d0;
    sc_signal< sc_lv<4> > grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_address0;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_ce0;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_we0;
    sc_signal< sc_lv<8> > grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_d0;
    sc_signal< sc_logic > grp_KeyExpansion_fu_207_ap_start;
    sc_signal< sc_logic > grp_KeyExpansion_fu_207_ap_done;
    sc_signal< sc_logic > grp_KeyExpansion_fu_207_ap_idle;
    sc_signal< sc_logic > grp_KeyExpansion_fu_207_ap_ready;
    sc_signal< sc_lv<8> > grp_KeyExpansion_fu_207_RoundKey_address0;
    sc_signal< sc_logic > grp_KeyExpansion_fu_207_RoundKey_ce0;
    sc_signal< sc_logic > grp_KeyExpansion_fu_207_RoundKey_we0;
    sc_signal< sc_lv<8> > grp_KeyExpansion_fu_207_RoundKey_d0;
    sc_signal< sc_lv<8> > grp_KeyExpansion_fu_207_RoundKey_address1;
    sc_signal< sc_logic > grp_KeyExpansion_fu_207_RoundKey_ce1;
    sc_signal< sc_logic > grp_KeyExpansion_fu_207_RoundKey_we1;
    sc_signal< sc_lv<8> > grp_KeyExpansion_fu_207_RoundKey_d1;
    sc_signal< sc_lv<4> > grp_KeyExpansion_fu_207_Key_address0;
    sc_signal< sc_logic > grp_KeyExpansion_fu_207_Key_ce0;
    sc_signal< sc_lv<5> > i_0_i_i_reg_154;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<5> > i_0_i_reg_165;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<5> > i_0_i1_reg_176;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<5> > i_0_i4_reg_187;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg;
    sc_signal< sc_logic > grp_KeyExpansion_fu_207_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<12> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<12> ap_ST_fsm_state1;
    static const sc_lv<12> ap_ST_fsm_state2;
    static const sc_lv<12> ap_ST_fsm_state3;
    static const sc_lv<12> ap_ST_fsm_state4;
    static const sc_lv<12> ap_ST_fsm_state5;
    static const sc_lv<12> ap_ST_fsm_state6;
    static const sc_lv<12> ap_ST_fsm_state7;
    static const sc_lv<12> ap_ST_fsm_state8;
    static const sc_lv<12> ap_ST_fsm_state9;
    static const sc_lv<12> ap_ST_fsm_state10;
    static const sc_lv<12> ap_ST_fsm_state11;
    static const sc_lv<12> ap_ST_fsm_state12;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_B;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ctx_Iv_address0();
    void thread_ctx_Iv_ce0();
    void thread_ctx_Iv_d0();
    void thread_ctx_Iv_we0();
    void thread_ctx_RoundKey_address0();
    void thread_ctx_RoundKey_ce0();
    void thread_ctx_RoundKey_ce1();
    void thread_ctx_RoundKey_we0();
    void thread_ctx_RoundKey_we1();
    void thread_grp_AES_CTR_xcrypt_buffe_fu_198_ap_start();
    void thread_grp_KeyExpansion_fu_207_ap_start();
    void thread_i_1_fu_225_p2();
    void thread_i_2_fu_259_p2();
    void thread_i_3_fu_276_p2();
    void thread_i_fu_242_p2();
    void thread_icmp_ln54_1_fu_253_p2();
    void thread_icmp_ln54_2_fu_270_p2();
    void thread_icmp_ln54_3_fu_219_p2();
    void thread_icmp_ln54_fu_236_p2();
    void thread_inout_r_address0();
    void thread_inout_r_ce0();
    void thread_inout_r_we0();
    void thread_iv_address0();
    void thread_iv_ce0();
    void thread_iv_we0();
    void thread_text_address0();
    void thread_text_ce0();
    void thread_text_d0();
    void thread_text_we0();
    void thread_zext_ln55_1_fu_265_p1();
    void thread_zext_ln55_2_fu_282_p1();
    void thread_zext_ln55_3_fu_231_p1();
    void thread_zext_ln55_fu_248_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
