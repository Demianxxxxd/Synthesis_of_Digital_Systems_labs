// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes_ha.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes_ha::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes_ha::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> aes_ha::ap_ST_fsm_state1 = "1";
const sc_lv<12> aes_ha::ap_ST_fsm_state2 = "10";
const sc_lv<12> aes_ha::ap_ST_fsm_state3 = "100";
const sc_lv<12> aes_ha::ap_ST_fsm_state4 = "1000";
const sc_lv<12> aes_ha::ap_ST_fsm_state5 = "10000";
const sc_lv<12> aes_ha::ap_ST_fsm_state6 = "100000";
const sc_lv<12> aes_ha::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> aes_ha::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> aes_ha::ap_ST_fsm_state9 = "100000000";
const sc_lv<12> aes_ha::ap_ST_fsm_state10 = "1000000000";
const sc_lv<12> aes_ha::ap_ST_fsm_state11 = "10000000000";
const sc_lv<12> aes_ha::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> aes_ha::ap_const_lv32_0 = "00000000000000000000000000000000";
const int aes_ha::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> aes_ha::ap_const_lv32_2 = "10";
const sc_lv<1> aes_ha::ap_const_lv1_0 = "0";
const sc_lv<32> aes_ha::ap_const_lv32_4 = "100";
const sc_lv<32> aes_ha::ap_const_lv32_7 = "111";
const sc_lv<32> aes_ha::ap_const_lv32_9 = "1001";
const sc_lv<5> aes_ha::ap_const_lv5_0 = "00000";
const sc_lv<32> aes_ha::ap_const_lv32_1 = "1";
const sc_lv<32> aes_ha::ap_const_lv32_3 = "11";
const sc_lv<32> aes_ha::ap_const_lv32_5 = "101";
const sc_lv<1> aes_ha::ap_const_lv1_1 = "1";
const sc_lv<32> aes_ha::ap_const_lv32_6 = "110";
const sc_lv<32> aes_ha::ap_const_lv32_8 = "1000";
const sc_lv<32> aes_ha::ap_const_lv32_A = "1010";
const sc_lv<5> aes_ha::ap_const_lv5_10 = "10000";
const sc_lv<5> aes_ha::ap_const_lv5_1 = "1";
const sc_lv<32> aes_ha::ap_const_lv32_B = "1011";
const bool aes_ha::ap_const_boolean_1 = true;

aes_ha::aes_ha(sc_module_name name) : sc_module(name), mVcdFile(0) {
    aes_ha_slv_s_axi_U = new aes_ha_slv_s_axi<C_S_AXI_SLV_ADDR_WIDTH,C_S_AXI_SLV_DATA_WIDTH>("aes_ha_slv_s_axi_U");
    aes_ha_slv_s_axi_U->AWVALID(s_axi_slv_AWVALID);
    aes_ha_slv_s_axi_U->AWREADY(s_axi_slv_AWREADY);
    aes_ha_slv_s_axi_U->AWADDR(s_axi_slv_AWADDR);
    aes_ha_slv_s_axi_U->WVALID(s_axi_slv_WVALID);
    aes_ha_slv_s_axi_U->WREADY(s_axi_slv_WREADY);
    aes_ha_slv_s_axi_U->WDATA(s_axi_slv_WDATA);
    aes_ha_slv_s_axi_U->WSTRB(s_axi_slv_WSTRB);
    aes_ha_slv_s_axi_U->ARVALID(s_axi_slv_ARVALID);
    aes_ha_slv_s_axi_U->ARREADY(s_axi_slv_ARREADY);
    aes_ha_slv_s_axi_U->ARADDR(s_axi_slv_ARADDR);
    aes_ha_slv_s_axi_U->RVALID(s_axi_slv_RVALID);
    aes_ha_slv_s_axi_U->RREADY(s_axi_slv_RREADY);
    aes_ha_slv_s_axi_U->RDATA(s_axi_slv_RDATA);
    aes_ha_slv_s_axi_U->RRESP(s_axi_slv_RRESP);
    aes_ha_slv_s_axi_U->BVALID(s_axi_slv_BVALID);
    aes_ha_slv_s_axi_U->BREADY(s_axi_slv_BREADY);
    aes_ha_slv_s_axi_U->BRESP(s_axi_slv_BRESP);
    aes_ha_slv_s_axi_U->ACLK(ap_clk);
    aes_ha_slv_s_axi_U->ARESET(ap_rst_n_inv);
    aes_ha_slv_s_axi_U->ACLK_EN(ap_var_for_const0);
    aes_ha_slv_s_axi_U->ap_start(ap_start);
    aes_ha_slv_s_axi_U->interrupt(interrupt);
    aes_ha_slv_s_axi_U->ap_ready(ap_ready);
    aes_ha_slv_s_axi_U->ap_done(ap_done);
    aes_ha_slv_s_axi_U->ap_idle(ap_idle);
    aes_ha_slv_s_axi_U->key_address0(grp_KeyExpansion_fu_207_Key_address0);
    aes_ha_slv_s_axi_U->key_ce0(grp_KeyExpansion_fu_207_Key_ce0);
    aes_ha_slv_s_axi_U->key_q0(key_q0);
    aes_ha_slv_s_axi_U->iv_address0(iv_address0);
    aes_ha_slv_s_axi_U->iv_ce0(iv_ce0);
    aes_ha_slv_s_axi_U->iv_we0(iv_we0);
    aes_ha_slv_s_axi_U->iv_d0(ctx_Iv_q0);
    aes_ha_slv_s_axi_U->iv_q0(iv_q0);
    aes_ha_slv_s_axi_U->inout_r_address0(inout_r_address0);
    aes_ha_slv_s_axi_U->inout_r_ce0(inout_r_ce0);
    aes_ha_slv_s_axi_U->inout_r_we0(inout_r_we0);
    aes_ha_slv_s_axi_U->inout_r_d0(text_q0);
    aes_ha_slv_s_axi_U->inout_r_q0(inout_r_q0);
    ctx_RoundKey_U = new aes_ha_ctx_RoundKey("ctx_RoundKey_U");
    ctx_RoundKey_U->clk(ap_clk);
    ctx_RoundKey_U->reset(ap_rst_n_inv);
    ctx_RoundKey_U->address0(ctx_RoundKey_address0);
    ctx_RoundKey_U->ce0(ctx_RoundKey_ce0);
    ctx_RoundKey_U->we0(ctx_RoundKey_we0);
    ctx_RoundKey_U->d0(grp_KeyExpansion_fu_207_RoundKey_d0);
    ctx_RoundKey_U->q0(ctx_RoundKey_q0);
    ctx_RoundKey_U->address1(grp_KeyExpansion_fu_207_RoundKey_address1);
    ctx_RoundKey_U->ce1(ctx_RoundKey_ce1);
    ctx_RoundKey_U->we1(ctx_RoundKey_we1);
    ctx_RoundKey_U->d1(grp_KeyExpansion_fu_207_RoundKey_d1);
    ctx_RoundKey_U->q1(ctx_RoundKey_q1);
    ctx_Iv_U = new AES_CTR_xcrypt_buffe_buffer("ctx_Iv_U");
    ctx_Iv_U->clk(ap_clk);
    ctx_Iv_U->reset(ap_rst_n_inv);
    ctx_Iv_U->address0(ctx_Iv_address0);
    ctx_Iv_U->ce0(ctx_Iv_ce0);
    ctx_Iv_U->we0(ctx_Iv_we0);
    ctx_Iv_U->d0(ctx_Iv_d0);
    ctx_Iv_U->q0(ctx_Iv_q0);
    text_U = new AES_CTR_xcrypt_buffe_buffer("text_U");
    text_U->clk(ap_clk);
    text_U->reset(ap_rst_n_inv);
    text_U->address0(text_address0);
    text_U->ce0(text_ce0);
    text_U->we0(text_we0);
    text_U->d0(text_d0);
    text_U->q0(text_q0);
    grp_AES_CTR_xcrypt_buffe_fu_198 = new AES_CTR_xcrypt_buffe("grp_AES_CTR_xcrypt_buffe_fu_198");
    grp_AES_CTR_xcrypt_buffe_fu_198->ap_clk(ap_clk);
    grp_AES_CTR_xcrypt_buffe_fu_198->ap_rst(ap_rst_n_inv);
    grp_AES_CTR_xcrypt_buffe_fu_198->ap_start(grp_AES_CTR_xcrypt_buffe_fu_198_ap_start);
    grp_AES_CTR_xcrypt_buffe_fu_198->ap_done(grp_AES_CTR_xcrypt_buffe_fu_198_ap_done);
    grp_AES_CTR_xcrypt_buffe_fu_198->ap_idle(grp_AES_CTR_xcrypt_buffe_fu_198_ap_idle);
    grp_AES_CTR_xcrypt_buffe_fu_198->ap_ready(grp_AES_CTR_xcrypt_buffe_fu_198_ap_ready);
    grp_AES_CTR_xcrypt_buffe_fu_198->ctx_RoundKey_address0(grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_address0);
    grp_AES_CTR_xcrypt_buffe_fu_198->ctx_RoundKey_ce0(grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_ce0);
    grp_AES_CTR_xcrypt_buffe_fu_198->ctx_RoundKey_q0(ctx_RoundKey_q0);
    grp_AES_CTR_xcrypt_buffe_fu_198->ctx_Iv_address0(grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_address0);
    grp_AES_CTR_xcrypt_buffe_fu_198->ctx_Iv_ce0(grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_ce0);
    grp_AES_CTR_xcrypt_buffe_fu_198->ctx_Iv_we0(grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_we0);
    grp_AES_CTR_xcrypt_buffe_fu_198->ctx_Iv_d0(grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_d0);
    grp_AES_CTR_xcrypt_buffe_fu_198->ctx_Iv_q0(ctx_Iv_q0);
    grp_AES_CTR_xcrypt_buffe_fu_198->buf_r_address0(grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_address0);
    grp_AES_CTR_xcrypt_buffe_fu_198->buf_r_ce0(grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_ce0);
    grp_AES_CTR_xcrypt_buffe_fu_198->buf_r_we0(grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_we0);
    grp_AES_CTR_xcrypt_buffe_fu_198->buf_r_d0(grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_d0);
    grp_AES_CTR_xcrypt_buffe_fu_198->buf_r_q0(text_q0);
    grp_KeyExpansion_fu_207 = new KeyExpansion("grp_KeyExpansion_fu_207");
    grp_KeyExpansion_fu_207->ap_clk(ap_clk);
    grp_KeyExpansion_fu_207->ap_rst(ap_rst_n_inv);
    grp_KeyExpansion_fu_207->ap_start(grp_KeyExpansion_fu_207_ap_start);
    grp_KeyExpansion_fu_207->ap_done(grp_KeyExpansion_fu_207_ap_done);
    grp_KeyExpansion_fu_207->ap_idle(grp_KeyExpansion_fu_207_ap_idle);
    grp_KeyExpansion_fu_207->ap_ready(grp_KeyExpansion_fu_207_ap_ready);
    grp_KeyExpansion_fu_207->RoundKey_address0(grp_KeyExpansion_fu_207_RoundKey_address0);
    grp_KeyExpansion_fu_207->RoundKey_ce0(grp_KeyExpansion_fu_207_RoundKey_ce0);
    grp_KeyExpansion_fu_207->RoundKey_we0(grp_KeyExpansion_fu_207_RoundKey_we0);
    grp_KeyExpansion_fu_207->RoundKey_d0(grp_KeyExpansion_fu_207_RoundKey_d0);
    grp_KeyExpansion_fu_207->RoundKey_q0(ctx_RoundKey_q0);
    grp_KeyExpansion_fu_207->RoundKey_address1(grp_KeyExpansion_fu_207_RoundKey_address1);
    grp_KeyExpansion_fu_207->RoundKey_ce1(grp_KeyExpansion_fu_207_RoundKey_ce1);
    grp_KeyExpansion_fu_207->RoundKey_we1(grp_KeyExpansion_fu_207_RoundKey_we1);
    grp_KeyExpansion_fu_207->RoundKey_d1(grp_KeyExpansion_fu_207_RoundKey_d1);
    grp_KeyExpansion_fu_207->RoundKey_q1(ctx_RoundKey_q1);
    grp_KeyExpansion_fu_207->Key_address0(grp_KeyExpansion_fu_207_Key_address0);
    grp_KeyExpansion_fu_207->Key_ce0(grp_KeyExpansion_fu_207_Key_ce0);
    grp_KeyExpansion_fu_207->Key_q0(key_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ctx_Iv_address0);
    sensitive << ( zext_ln55_3_reg_295 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( zext_ln55_2_fu_282_p1 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ctx_Iv_ce0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ctx_Iv_d0);
    sensitive << ( iv_q0 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_d0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ctx_Iv_we0);
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_we0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ctx_RoundKey_address0);
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_address0 );
    sensitive << ( grp_KeyExpansion_fu_207_RoundKey_address0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ctx_RoundKey_ce0);
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_ce0 );
    sensitive << ( grp_KeyExpansion_fu_207_RoundKey_ce0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ctx_RoundKey_ce1);
    sensitive << ( grp_KeyExpansion_fu_207_RoundKey_ce1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ctx_RoundKey_we0);
    sensitive << ( grp_KeyExpansion_fu_207_RoundKey_we0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ctx_RoundKey_we1);
    sensitive << ( grp_KeyExpansion_fu_207_RoundKey_we1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_AES_CTR_xcrypt_buffe_fu_198_ap_start);
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg );

    SC_METHOD(thread_grp_KeyExpansion_fu_207_ap_start);
    sensitive << ( grp_KeyExpansion_fu_207_ap_start_reg );

    SC_METHOD(thread_i_1_fu_225_p2);
    sensitive << ( i_0_i_i_reg_154 );

    SC_METHOD(thread_i_2_fu_259_p2);
    sensitive << ( i_0_i1_reg_176 );

    SC_METHOD(thread_i_3_fu_276_p2);
    sensitive << ( i_0_i4_reg_187 );

    SC_METHOD(thread_i_fu_242_p2);
    sensitive << ( i_0_i_reg_165 );

    SC_METHOD(thread_icmp_ln54_1_fu_253_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( i_0_i1_reg_176 );

    SC_METHOD(thread_icmp_ln54_2_fu_270_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( i_0_i4_reg_187 );

    SC_METHOD(thread_icmp_ln54_3_fu_219_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_0_i_i_reg_154 );

    SC_METHOD(thread_icmp_ln54_fu_236_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_0_i_reg_165 );

    SC_METHOD(thread_inout_r_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln55_fu_248_p1 );
    sensitive << ( zext_ln55_1_reg_331 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_inout_r_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_inout_r_we0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_iv_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln55_3_fu_231_p1 );
    sensitive << ( zext_ln55_2_reg_349 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_iv_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_iv_we0);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_text_address0);
    sensitive << ( zext_ln55_reg_313 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln55_1_fu_265_p1 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_address0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_text_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_ce0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_text_d0);
    sensitive << ( inout_r_q0 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_d0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_text_we0);
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_we0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_zext_ln55_1_fu_265_p1);
    sensitive << ( i_0_i1_reg_176 );

    SC_METHOD(thread_zext_ln55_2_fu_282_p1);
    sensitive << ( i_0_i4_reg_187 );

    SC_METHOD(thread_zext_ln55_3_fu_231_p1);
    sensitive << ( i_0_i_i_reg_154 );

    SC_METHOD(thread_zext_ln55_fu_248_p1);
    sensitive << ( i_0_i_reg_165 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln54_3_fu_219_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln54_fu_236_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln54_1_fu_253_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( icmp_ln54_2_fu_270_p2 );
    sensitive << ( grp_AES_CTR_xcrypt_buffe_fu_198_ap_done );
    sensitive << ( grp_KeyExpansion_fu_207_ap_done );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000001";
    grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg = SC_LOGIC_0;
    grp_KeyExpansion_fu_207_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes_ha_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_slv_AWVALID, "(port)s_axi_slv_AWVALID");
    sc_trace(mVcdFile, s_axi_slv_AWREADY, "(port)s_axi_slv_AWREADY");
    sc_trace(mVcdFile, s_axi_slv_AWADDR, "(port)s_axi_slv_AWADDR");
    sc_trace(mVcdFile, s_axi_slv_WVALID, "(port)s_axi_slv_WVALID");
    sc_trace(mVcdFile, s_axi_slv_WREADY, "(port)s_axi_slv_WREADY");
    sc_trace(mVcdFile, s_axi_slv_WDATA, "(port)s_axi_slv_WDATA");
    sc_trace(mVcdFile, s_axi_slv_WSTRB, "(port)s_axi_slv_WSTRB");
    sc_trace(mVcdFile, s_axi_slv_ARVALID, "(port)s_axi_slv_ARVALID");
    sc_trace(mVcdFile, s_axi_slv_ARREADY, "(port)s_axi_slv_ARREADY");
    sc_trace(mVcdFile, s_axi_slv_ARADDR, "(port)s_axi_slv_ARADDR");
    sc_trace(mVcdFile, s_axi_slv_RVALID, "(port)s_axi_slv_RVALID");
    sc_trace(mVcdFile, s_axi_slv_RREADY, "(port)s_axi_slv_RREADY");
    sc_trace(mVcdFile, s_axi_slv_RDATA, "(port)s_axi_slv_RDATA");
    sc_trace(mVcdFile, s_axi_slv_RRESP, "(port)s_axi_slv_RRESP");
    sc_trace(mVcdFile, s_axi_slv_BVALID, "(port)s_axi_slv_BVALID");
    sc_trace(mVcdFile, s_axi_slv_BREADY, "(port)s_axi_slv_BREADY");
    sc_trace(mVcdFile, s_axi_slv_BRESP, "(port)s_axi_slv_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, key_q0, "key_q0");
    sc_trace(mVcdFile, iv_address0, "iv_address0");
    sc_trace(mVcdFile, iv_ce0, "iv_ce0");
    sc_trace(mVcdFile, iv_we0, "iv_we0");
    sc_trace(mVcdFile, iv_q0, "iv_q0");
    sc_trace(mVcdFile, inout_r_address0, "inout_r_address0");
    sc_trace(mVcdFile, inout_r_ce0, "inout_r_ce0");
    sc_trace(mVcdFile, inout_r_we0, "inout_r_we0");
    sc_trace(mVcdFile, inout_r_q0, "inout_r_q0");
    sc_trace(mVcdFile, i_1_fu_225_p2, "i_1_fu_225_p2");
    sc_trace(mVcdFile, i_1_reg_290, "i_1_reg_290");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln55_3_fu_231_p1, "zext_ln55_3_fu_231_p1");
    sc_trace(mVcdFile, zext_ln55_3_reg_295, "zext_ln55_3_reg_295");
    sc_trace(mVcdFile, icmp_ln54_3_fu_219_p2, "icmp_ln54_3_fu_219_p2");
    sc_trace(mVcdFile, i_fu_242_p2, "i_fu_242_p2");
    sc_trace(mVcdFile, i_reg_308, "i_reg_308");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, zext_ln55_fu_248_p1, "zext_ln55_fu_248_p1");
    sc_trace(mVcdFile, zext_ln55_reg_313, "zext_ln55_reg_313");
    sc_trace(mVcdFile, icmp_ln54_fu_236_p2, "icmp_ln54_fu_236_p2");
    sc_trace(mVcdFile, i_2_fu_259_p2, "i_2_fu_259_p2");
    sc_trace(mVcdFile, i_2_reg_326, "i_2_reg_326");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, zext_ln55_1_fu_265_p1, "zext_ln55_1_fu_265_p1");
    sc_trace(mVcdFile, zext_ln55_1_reg_331, "zext_ln55_1_reg_331");
    sc_trace(mVcdFile, icmp_ln54_1_fu_253_p2, "icmp_ln54_1_fu_253_p2");
    sc_trace(mVcdFile, i_3_fu_276_p2, "i_3_fu_276_p2");
    sc_trace(mVcdFile, i_3_reg_344, "i_3_reg_344");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, zext_ln55_2_fu_282_p1, "zext_ln55_2_fu_282_p1");
    sc_trace(mVcdFile, zext_ln55_2_reg_349, "zext_ln55_2_reg_349");
    sc_trace(mVcdFile, icmp_ln54_2_fu_270_p2, "icmp_ln54_2_fu_270_p2");
    sc_trace(mVcdFile, ctx_RoundKey_address0, "ctx_RoundKey_address0");
    sc_trace(mVcdFile, ctx_RoundKey_ce0, "ctx_RoundKey_ce0");
    sc_trace(mVcdFile, ctx_RoundKey_we0, "ctx_RoundKey_we0");
    sc_trace(mVcdFile, ctx_RoundKey_q0, "ctx_RoundKey_q0");
    sc_trace(mVcdFile, ctx_RoundKey_ce1, "ctx_RoundKey_ce1");
    sc_trace(mVcdFile, ctx_RoundKey_we1, "ctx_RoundKey_we1");
    sc_trace(mVcdFile, ctx_RoundKey_q1, "ctx_RoundKey_q1");
    sc_trace(mVcdFile, ctx_Iv_address0, "ctx_Iv_address0");
    sc_trace(mVcdFile, ctx_Iv_ce0, "ctx_Iv_ce0");
    sc_trace(mVcdFile, ctx_Iv_we0, "ctx_Iv_we0");
    sc_trace(mVcdFile, ctx_Iv_d0, "ctx_Iv_d0");
    sc_trace(mVcdFile, ctx_Iv_q0, "ctx_Iv_q0");
    sc_trace(mVcdFile, text_address0, "text_address0");
    sc_trace(mVcdFile, text_ce0, "text_ce0");
    sc_trace(mVcdFile, text_we0, "text_we0");
    sc_trace(mVcdFile, text_d0, "text_d0");
    sc_trace(mVcdFile, text_q0, "text_q0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_198_ap_start, "grp_AES_CTR_xcrypt_buffe_fu_198_ap_start");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_198_ap_done, "grp_AES_CTR_xcrypt_buffe_fu_198_ap_done");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_198_ap_idle, "grp_AES_CTR_xcrypt_buffe_fu_198_ap_idle");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_198_ap_ready, "grp_AES_CTR_xcrypt_buffe_fu_198_ap_ready");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_address0, "grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_address0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_ce0, "grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_ce0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_address0, "grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_address0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_ce0, "grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_ce0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_we0, "grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_we0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_d0, "grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_d0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_address0, "grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_address0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_ce0, "grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_ce0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_we0, "grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_we0");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_d0, "grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_d0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_207_ap_start, "grp_KeyExpansion_fu_207_ap_start");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_207_ap_done, "grp_KeyExpansion_fu_207_ap_done");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_207_ap_idle, "grp_KeyExpansion_fu_207_ap_idle");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_207_ap_ready, "grp_KeyExpansion_fu_207_ap_ready");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_207_RoundKey_address0, "grp_KeyExpansion_fu_207_RoundKey_address0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_207_RoundKey_ce0, "grp_KeyExpansion_fu_207_RoundKey_ce0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_207_RoundKey_we0, "grp_KeyExpansion_fu_207_RoundKey_we0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_207_RoundKey_d0, "grp_KeyExpansion_fu_207_RoundKey_d0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_207_RoundKey_address1, "grp_KeyExpansion_fu_207_RoundKey_address1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_207_RoundKey_ce1, "grp_KeyExpansion_fu_207_RoundKey_ce1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_207_RoundKey_we1, "grp_KeyExpansion_fu_207_RoundKey_we1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_207_RoundKey_d1, "grp_KeyExpansion_fu_207_RoundKey_d1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_207_Key_address0, "grp_KeyExpansion_fu_207_Key_address0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_207_Key_ce0, "grp_KeyExpansion_fu_207_Key_ce0");
    sc_trace(mVcdFile, i_0_i_i_reg_154, "i_0_i_i_reg_154");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_0_i_reg_165, "i_0_i_reg_165");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_0_i1_reg_176, "i_0_i1_reg_176");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, i_0_i4_reg_187, "i_0_i4_reg_187");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg, "grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_207_ap_start_reg, "grp_KeyExpansion_fu_207_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("aes_ha.hdltvin.dat");
    mHdltvoutHandle.open("aes_ha.hdltvout.dat");
}

aes_ha::~aes_ha() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete aes_ha_slv_s_axi_U;
    delete ctx_RoundKey_U;
    delete ctx_Iv_U;
    delete text_U;
    delete grp_AES_CTR_xcrypt_buffe_fu_198;
    delete grp_KeyExpansion_fu_207;
}

void aes_ha::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void aes_ha::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
             esl_seteq<1,1,1>(icmp_ln54_fu_236_p2.read(), ap_const_lv1_1))) {
            grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AES_CTR_xcrypt_buffe_fu_198_ap_ready.read())) {
            grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_KeyExpansion_fu_207_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_KeyExpansion_fu_207_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_KeyExpansion_fu_207_ap_ready.read())) {
            grp_KeyExpansion_fu_207_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_0_i1_reg_176 = i_2_reg_326.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(grp_AES_CTR_xcrypt_buffe_fu_198_ap_done.read(), ap_const_logic_1))) {
        i_0_i1_reg_176 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(icmp_ln54_1_fu_253_p2.read(), ap_const_lv1_1))) {
        i_0_i4_reg_187 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        i_0_i4_reg_187 = i_3_reg_344.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_0_i_i_reg_154 = i_1_reg_290.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(grp_KeyExpansion_fu_207_ap_done.read(), ap_const_logic_1))) {
        i_0_i_i_reg_154 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln54_3_fu_219_p2.read(), ap_const_lv1_1))) {
        i_0_i_reg_165 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_0_i_reg_165 = i_reg_308.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_1_reg_290 = i_1_fu_225_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_2_reg_326 = i_2_fu_259_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_3_reg_344 = i_3_fu_276_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_reg_308 = i_fu_242_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln54_1_fu_253_p2.read()))) {
        zext_ln55_1_reg_331 = zext_ln55_1_fu_265_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln54_2_fu_270_p2.read()))) {
        zext_ln55_2_reg_349 = zext_ln55_2_fu_282_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln54_3_fu_219_p2.read(), ap_const_lv1_0))) {
        zext_ln55_3_reg_295 = zext_ln55_3_fu_231_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln54_fu_236_p2.read()))) {
        zext_ln55_reg_313 = zext_ln55_fu_248_p1.read();
    }
}

void aes_ha::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes_ha::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void aes_ha::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void aes_ha::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void aes_ha::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes_ha::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes_ha::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes_ha::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aes_ha::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void aes_ha::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void aes_ha::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void aes_ha::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void aes_ha::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes_ha::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes_ha::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes_ha::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void aes_ha::thread_ctx_Iv_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (zext_ln55_2_fu_282_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_Iv_address0 =  (sc_lv<4>) (zext_ln55_3_reg_295.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_Iv_address0 = grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_address0.read();
    } else {
        ctx_Iv_address0 = "XXXX";
    }
}

void aes_ha::thread_ctx_Iv_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ctx_Iv_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_Iv_ce0 = grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_ce0.read();
    } else {
        ctx_Iv_ce0 = ap_const_logic_0;
    }
}

void aes_ha::thread_ctx_Iv_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_Iv_d0 = iv_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_Iv_d0 = grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_d0.read();
    } else {
        ctx_Iv_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_ha::thread_ctx_Iv_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_Iv_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_Iv_we0 = grp_AES_CTR_xcrypt_buffe_fu_198_ctx_Iv_we0.read();
    } else {
        ctx_Iv_we0 = ap_const_logic_0;
    }
}

void aes_ha::thread_ctx_RoundKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctx_RoundKey_address0 = grp_KeyExpansion_fu_207_RoundKey_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_RoundKey_address0 = grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_address0.read();
    } else {
        ctx_RoundKey_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_ha::thread_ctx_RoundKey_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctx_RoundKey_ce0 = grp_KeyExpansion_fu_207_RoundKey_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ctx_RoundKey_ce0 = grp_AES_CTR_xcrypt_buffe_fu_198_ctx_RoundKey_ce0.read();
    } else {
        ctx_RoundKey_ce0 = ap_const_logic_0;
    }
}

void aes_ha::thread_ctx_RoundKey_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctx_RoundKey_ce1 = grp_KeyExpansion_fu_207_RoundKey_ce1.read();
    } else {
        ctx_RoundKey_ce1 = ap_const_logic_0;
    }
}

void aes_ha::thread_ctx_RoundKey_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctx_RoundKey_we0 = grp_KeyExpansion_fu_207_RoundKey_we0.read();
    } else {
        ctx_RoundKey_we0 = ap_const_logic_0;
    }
}

void aes_ha::thread_ctx_RoundKey_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ctx_RoundKey_we1 = grp_KeyExpansion_fu_207_RoundKey_we1.read();
    } else {
        ctx_RoundKey_we1 = ap_const_logic_0;
    }
}

void aes_ha::thread_grp_AES_CTR_xcrypt_buffe_fu_198_ap_start() {
    grp_AES_CTR_xcrypt_buffe_fu_198_ap_start = grp_AES_CTR_xcrypt_buffe_fu_198_ap_start_reg.read();
}

void aes_ha::thread_grp_KeyExpansion_fu_207_ap_start() {
    grp_KeyExpansion_fu_207_ap_start = grp_KeyExpansion_fu_207_ap_start_reg.read();
}

void aes_ha::thread_i_1_fu_225_p2() {
    i_1_fu_225_p2 = (!i_0_i_i_reg_154.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i_i_reg_154.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes_ha::thread_i_2_fu_259_p2() {
    i_2_fu_259_p2 = (!i_0_i1_reg_176.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i1_reg_176.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes_ha::thread_i_3_fu_276_p2() {
    i_3_fu_276_p2 = (!i_0_i4_reg_187.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i4_reg_187.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes_ha::thread_i_fu_242_p2() {
    i_fu_242_p2 = (!i_0_i_reg_165.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i_reg_165.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes_ha::thread_icmp_ln54_1_fu_253_p2() {
    icmp_ln54_1_fu_253_p2 = (!i_0_i1_reg_176.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i1_reg_176.read() == ap_const_lv5_10);
}

void aes_ha::thread_icmp_ln54_2_fu_270_p2() {
    icmp_ln54_2_fu_270_p2 = (!i_0_i4_reg_187.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i4_reg_187.read() == ap_const_lv5_10);
}

void aes_ha::thread_icmp_ln54_3_fu_219_p2() {
    icmp_ln54_3_fu_219_p2 = (!i_0_i_i_reg_154.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_i_reg_154.read() == ap_const_lv5_10);
}

void aes_ha::thread_icmp_ln54_fu_236_p2() {
    icmp_ln54_fu_236_p2 = (!i_0_i_reg_165.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_165.read() == ap_const_lv5_10);
}

void aes_ha::thread_inout_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        inout_r_address0 =  (sc_lv<4>) (zext_ln55_1_reg_331.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        inout_r_address0 =  (sc_lv<4>) (zext_ln55_fu_248_p1.read());
    } else {
        inout_r_address0 = "XXXX";
    }
}

void aes_ha::thread_inout_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        inout_r_ce0 = ap_const_logic_1;
    } else {
        inout_r_ce0 = ap_const_logic_0;
    }
}

void aes_ha::thread_inout_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        inout_r_we0 = ap_const_logic_1;
    } else {
        inout_r_we0 = ap_const_logic_0;
    }
}

void aes_ha::thread_iv_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        iv_address0 =  (sc_lv<4>) (zext_ln55_2_reg_349.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        iv_address0 =  (sc_lv<4>) (zext_ln55_3_fu_231_p1.read());
    } else {
        iv_address0 = "XXXX";
    }
}

void aes_ha::thread_iv_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        iv_ce0 = ap_const_logic_1;
    } else {
        iv_ce0 = ap_const_logic_0;
    }
}

void aes_ha::thread_iv_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        iv_we0 = ap_const_logic_1;
    } else {
        iv_we0 = ap_const_logic_0;
    }
}

void aes_ha::thread_text_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        text_address0 =  (sc_lv<4>) (zext_ln55_1_fu_265_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        text_address0 =  (sc_lv<4>) (zext_ln55_reg_313.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        text_address0 = grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_address0.read();
    } else {
        text_address0 = "XXXX";
    }
}

void aes_ha::thread_text_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        text_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        text_ce0 = grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_ce0.read();
    } else {
        text_ce0 = ap_const_logic_0;
    }
}

void aes_ha::thread_text_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        text_d0 = inout_r_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        text_d0 = grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_d0.read();
    } else {
        text_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void aes_ha::thread_text_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        text_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        text_we0 = grp_AES_CTR_xcrypt_buffe_fu_198_buf_r_we0.read();
    } else {
        text_we0 = ap_const_logic_0;
    }
}

void aes_ha::thread_zext_ln55_1_fu_265_p1() {
    zext_ln55_1_fu_265_p1 = esl_zext<64,5>(i_0_i1_reg_176.read());
}

void aes_ha::thread_zext_ln55_2_fu_282_p1() {
    zext_ln55_2_fu_282_p1 = esl_zext<64,5>(i_0_i4_reg_187.read());
}

void aes_ha::thread_zext_ln55_3_fu_231_p1() {
    zext_ln55_3_fu_231_p1 = esl_zext<64,5>(i_0_i_i_reg_154.read());
}

void aes_ha::thread_zext_ln55_fu_248_p1() {
    zext_ln55_fu_248_p1 = esl_zext<64,5>(i_0_i_reg_165.read());
}

void aes_ha::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_KeyExpansion_fu_207_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln54_3_fu_219_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln54_fu_236_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(grp_AES_CTR_xcrypt_buffe_fu_198_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(icmp_ln54_1_fu_253_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(icmp_ln54_2_fu_270_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<12>) ("XXXXXXXXXXXX");
            break;
    }
}

void aes_ha::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_AWVALID\" :  \"" << s_axi_slv_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_slv_AWREADY\" :  \"" << s_axi_slv_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_AWADDR\" :  \"" << s_axi_slv_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_WVALID\" :  \"" << s_axi_slv_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_slv_WREADY\" :  \"" << s_axi_slv_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_WDATA\" :  \"" << s_axi_slv_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_WSTRB\" :  \"" << s_axi_slv_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_ARVALID\" :  \"" << s_axi_slv_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_slv_ARREADY\" :  \"" << s_axi_slv_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_ARADDR\" :  \"" << s_axi_slv_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_slv_RVALID\" :  \"" << s_axi_slv_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_RREADY\" :  \"" << s_axi_slv_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_slv_RDATA\" :  \"" << s_axi_slv_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_slv_RRESP\" :  \"" << s_axi_slv_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_slv_BVALID\" :  \"" << s_axi_slv_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_slv_BREADY\" :  \"" << s_axi_slv_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_slv_BRESP\" :  \"" << s_axi_slv_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

