-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_CTR_xcrypt_buffe is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_RoundKey_ce0 : OUT STD_LOGIC;
    ctx_RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_Iv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ctx_Iv_ce0 : OUT STD_LOGIC;
    ctx_Iv_we0 : OUT STD_LOGIC;
    ctx_Iv_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_Iv_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_we0 : OUT STD_LOGIC;
    buf_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of AES_CTR_xcrypt_buffe is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_8_fu_274_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_8_reg_516 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln575_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln575_reg_521 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln574_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_292_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_528 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln55_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_reg_533 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln54_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln483_fu_311_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln483_reg_543 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_6_fu_321_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_551 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_331_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_556 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln483_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_addr_reg_561 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal k_fu_363_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_569 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln484_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln491_fu_387_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln491_reg_579 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_7_fu_397_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_587 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln1_fu_407_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_reg_592 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln491_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal k_1_fu_439_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_605 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln493_fu_445_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln493_reg_610 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln492_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_458_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_615 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ctx_Iv_addr_1_reg_619 : STD_LOGIC_VECTOR (3 downto 0);
    signal bi_fu_477_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln587_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_addr_reg_632 : STD_LOGIC_VECTOR (3 downto 0);
    signal bi_3_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bi_3_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_we0 : STD_LOGIC;
    signal buffer_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_ce0 : STD_LOGIC;
    signal x_we0 : STD_LOGIC;
    signal x_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_ce1 : STD_LOGIC;
    signal x_we1 : STD_LOGIC;
    signal x_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_259_ap_start : STD_LOGIC;
    signal grp_Cipher_fu_259_ap_done : STD_LOGIC;
    signal grp_Cipher_fu_259_ap_idle : STD_LOGIC;
    signal grp_Cipher_fu_259_ap_ready : STD_LOGIC;
    signal grp_Cipher_fu_259_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_259_state_ce0 : STD_LOGIC;
    signal grp_Cipher_fu_259_state_we0 : STD_LOGIC;
    signal grp_Cipher_fu_259_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_259_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Cipher_fu_259_state_ce1 : STD_LOGIC;
    signal grp_Cipher_fu_259_state_we1 : STD_LOGIC;
    signal grp_Cipher_fu_259_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_259_RoundKey_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Cipher_fu_259_RoundKey_ce0 : STD_LOGIC;
    signal i_0_reg_157 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal bi_0_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_181 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_0_i2_reg_192 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_0_i_reg_203 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_i3_reg_214 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal k_0_i5_reg_225 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal bi_1_reg_236 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_bi_2_phi_fu_251_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal bi_2_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Cipher_fu_259_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln485_2_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln485_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln493_2_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln493_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln597_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln597_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln591_fu_483_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_303_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln485_fu_327_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln485_1_fu_343_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln485_1_fu_347_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln484_fu_339_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln485_fu_369_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_379_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln493_fu_403_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln493_1_fu_419_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln493_1_fu_423_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln492_fu_415_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln585_fu_454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_condition_456 : BOOLEAN;

    component Cipher IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        RoundKey_ce0 : OUT STD_LOGIC;
        RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_CTR_xcrypt_buffe_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_CTR_xcrypt_buffe_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    buffer_U : component AES_CTR_xcrypt_buffe_buffer
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        we0 => buffer_we0,
        d0 => buffer_d0,
        q0 => buffer_q0);

    x_U : component AES_CTR_xcrypt_buffe_x
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_address0,
        ce0 => x_ce0,
        we0 => x_we0,
        d0 => x_d0,
        q0 => x_q0,
        address1 => grp_Cipher_fu_259_state_address1,
        ce1 => x_ce1,
        we1 => x_we1,
        d1 => grp_Cipher_fu_259_state_d1,
        q1 => x_q1);

    grp_Cipher_fu_259 : component Cipher
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Cipher_fu_259_ap_start,
        ap_done => grp_Cipher_fu_259_ap_done,
        ap_idle => grp_Cipher_fu_259_ap_idle,
        ap_ready => grp_Cipher_fu_259_ap_ready,
        state_address0 => grp_Cipher_fu_259_state_address0,
        state_ce0 => grp_Cipher_fu_259_state_ce0,
        state_we0 => grp_Cipher_fu_259_state_we0,
        state_d0 => grp_Cipher_fu_259_state_d0,
        state_q0 => x_q0,
        state_address1 => grp_Cipher_fu_259_state_address1,
        state_ce1 => grp_Cipher_fu_259_state_ce1,
        state_we1 => grp_Cipher_fu_259_state_we1,
        state_d1 => grp_Cipher_fu_259_state_d1,
        state_q1 => x_q1,
        RoundKey_address0 => grp_Cipher_fu_259_RoundKey_address0,
        RoundKey_ce0 => grp_Cipher_fu_259_RoundKey_ce0,
        RoundKey_q0 => ctx_RoundKey_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Cipher_fu_259_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Cipher_fu_259_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln483_fu_315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_Cipher_fu_259_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Cipher_fu_259_ap_ready = ap_const_logic_1)) then 
                    grp_Cipher_fu_259_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bi_0_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                bi_0_reg_169 <= bi_3_reg_642;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                bi_0_reg_169 <= ap_const_lv32_10;
            end if; 
        end if;
    end process;

    bi_1_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln491_fu_391_p2 = ap_const_lv1_1))) then 
                bi_1_reg_236 <= ap_const_lv5_F;
            elsif (((tmp_9_reg_615 = ap_const_lv1_0) and (icmp_ln575_reg_521 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln587_fu_471_p2 = ap_const_lv1_1))) then 
                bi_1_reg_236 <= bi_fu_477_p2;
            end if; 
        end if;
    end process;

    bi_2_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln574_fu_268_p2 = ap_const_lv1_0) and (icmp_ln575_fu_280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                bi_2_reg_248 <= bi_0_reg_169;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (((icmp_ln575_reg_521 = ap_const_lv1_1) and (tmp_9_reg_615 = ap_const_lv1_1)) or ((icmp_ln587_fu_471_p2 = ap_const_lv1_0) and (icmp_ln575_reg_521 = ap_const_lv1_1))))) then 
                bi_2_reg_248 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_i2_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i2_reg_192 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln484_fu_357_p2 = ap_const_lv1_1))) then 
                i_0_i2_reg_192 <= i_6_reg_551;
            end if; 
        end if;
    end process;

    i_0_i3_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln492_fu_433_p2 = ap_const_lv1_1))) then 
                i_0_i3_reg_214 <= i_7_reg_587;
            elsif (((grp_Cipher_fu_259_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_0_i3_reg_214 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln574_fu_268_p2 = ap_const_lv1_0) and (icmp_ln575_fu_280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_reg_181 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_i_reg_181 <= i_reg_528;
            end if; 
        end if;
    end process;

    i_0_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_0_reg_157 <= i_8_reg_516;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_157 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_0_i5_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln491_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                k_0_i5_reg_225 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                k_0_i5_reg_225 <= k_1_reg_605;
            end if; 
        end if;
    end process;

    k_0_i_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln483_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_0_i_reg_203 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                k_0_i_reg_203 <= k_reg_569;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln492_fu_433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                add_ln493_reg_610 <= add_ln493_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and ((icmp_ln575_reg_521 = ap_const_lv1_0) or ((icmp_ln587_fu_471_p2 = ap_const_lv1_0) or (tmp_9_reg_615 = ap_const_lv1_1))))) then
                bi_3_reg_642 <= bi_3_fu_500_p2;
                buf_addr_reg_632 <= zext_ln597_fu_490_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_458_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                ctx_Iv_addr_1_reg_619 <= zext_ln587_fu_466_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_6_reg_551 <= i_6_fu_321_p2;
                    zext_ln483_reg_543(4 downto 2) <= zext_ln483_fu_311_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_7_reg_587 <= i_7_fu_397_p2;
                    zext_ln491_reg_579(4 downto 2) <= zext_ln491_fu_387_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_8_reg_516 <= i_8_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_528 <= i_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln574_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln575_reg_521 <= icmp_ln575_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                k_1_reg_605 <= k_1_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_reg_569 <= k_fu_363_p2;
                x_addr_reg_561 <= zext_ln485_2_fu_352_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln491_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    shl_ln1_reg_592(3 downto 2) <= shl_ln1_fu_407_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln483_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    shl_ln_reg_556(3 downto 2) <= shl_ln_fu_331_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_9_reg_615 <= bi_1_reg_236(4 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln55_reg_533(4 downto 0) <= zext_ln55_fu_298_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln55_reg_533(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln483_reg_543(1 downto 0) <= "00";
    zext_ln483_reg_543(5) <= '0';
    shl_ln_reg_556(1 downto 0) <= "00";
    zext_ln491_reg_579(1 downto 0) <= "00";
    zext_ln491_reg_579(5) <= '0';
    shl_ln1_reg_592(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln575_fu_280_p2, icmp_ln575_reg_521, icmp_ln574_fu_268_p2, ap_CS_fsm_state3, icmp_ln54_fu_286_p2, ap_CS_fsm_state5, icmp_ln483_fu_315_p2, ap_CS_fsm_state6, icmp_ln484_fu_357_p2, ap_CS_fsm_state9, icmp_ln491_fu_391_p2, ap_CS_fsm_state10, icmp_ln492_fu_433_p2, tmp_9_reg_615, ap_CS_fsm_state13, icmp_ln587_fu_471_p2, grp_Cipher_fu_259_ap_done, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln574_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln574_fu_268_p2 = ap_const_lv1_0) and (icmp_ln575_fu_280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln54_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln483_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln484_fu_357_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((grp_Cipher_fu_259_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln491_fu_391_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln492_fu_433_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and ((icmp_ln575_reg_521 = ap_const_lv1_0) or ((icmp_ln587_fu_471_p2 = ap_const_lv1_0) or (tmp_9_reg_615 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln485_1_fu_347_p2 <= std_logic_vector(unsigned(zext_ln483_reg_543) + unsigned(zext_ln485_1_fu_343_p1));
    add_ln485_fu_369_p2 <= std_logic_vector(unsigned(zext_ln484_fu_339_p1) + unsigned(shl_ln_reg_556));
    add_ln493_1_fu_423_p2 <= std_logic_vector(unsigned(zext_ln491_reg_579) + unsigned(zext_ln493_1_fu_419_p1));
    add_ln493_fu_445_p2 <= std_logic_vector(unsigned(zext_ln492_fu_415_p1) + unsigned(shl_ln1_reg_592));
    add_ln591_fu_483_p2 <= std_logic_vector(unsigned(ctx_Iv_q0) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_condition_456_assign_proc : process(icmp_ln575_reg_521, tmp_9_reg_615, ap_CS_fsm_state13)
    begin
                ap_condition_456 <= ((tmp_9_reg_615 = ap_const_lv1_0) and (icmp_ln575_reg_521 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln574_fu_268_p2)
    begin
        if ((((icmp_ln574_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_bi_2_phi_fu_251_p4_assign_proc : process(icmp_ln575_reg_521, tmp_9_reg_615, ap_CS_fsm_state13, icmp_ln587_fu_471_p2, bi_2_reg_248)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (((icmp_ln575_reg_521 = ap_const_lv1_1) and (tmp_9_reg_615 = ap_const_lv1_1)) or ((icmp_ln587_fu_471_p2 = ap_const_lv1_0) and (icmp_ln575_reg_521 = ap_const_lv1_1))))) then 
            ap_phi_mux_bi_2_phi_fu_251_p4 <= ap_const_lv32_0;
        else 
            ap_phi_mux_bi_2_phi_fu_251_p4 <= bi_2_reg_248;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln574_fu_268_p2)
    begin
        if (((icmp_ln574_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bi_3_fu_500_p2 <= std_logic_vector(signed(ap_phi_mux_bi_2_phi_fu_251_p4) + signed(ap_const_lv32_1));
    bi_fu_477_p2 <= std_logic_vector(signed(bi_1_reg_236) + signed(ap_const_lv5_1F));

    buf_r_address0_assign_proc : process(ap_CS_fsm_state13, buf_addr_reg_632, ap_CS_fsm_state14, zext_ln597_fu_490_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buf_r_address0 <= buf_addr_reg_632;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            buf_r_address0 <= zext_ln597_fu_490_p1(4 - 1 downto 0);
        else 
            buf_r_address0 <= "XXXX";
        end if; 
    end process;


    buf_r_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_d0 <= (buffer_q0 xor buf_r_q0);

    buf_r_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buf_r_we0 <= ap_const_logic_1;
        else 
            buf_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_address0_assign_proc : process(zext_ln55_reg_533, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state4, ap_CS_fsm_state11, zext_ln485_fu_374_p1, zext_ln493_fu_450_p1, sext_ln597_fu_495_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            buffer_address0 <= sext_ln597_fu_495_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buffer_address0 <= zext_ln493_fu_450_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_address0 <= zext_ln485_fu_374_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_address0 <= zext_ln55_reg_533(4 - 1 downto 0);
        else 
            buffer_address0 <= "XXXX";
        end if; 
    end process;


    buffer_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            buffer_ce0 <= ap_const_logic_1;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_d0_assign_proc : process(ctx_Iv_q0, x_q0, ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buffer_d0 <= x_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_d0 <= ctx_Iv_q0;
        else 
            buffer_d0 <= "XXXXXXXX";
        end if; 
    end process;


    buffer_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buffer_we0 <= ap_const_logic_1;
        else 
            buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_Iv_address0_assign_proc : process(icmp_ln575_reg_521, ap_CS_fsm_state3, zext_ln55_fu_298_p1, tmp_9_reg_615, ap_CS_fsm_state12, ctx_Iv_addr_1_reg_619, ap_CS_fsm_state13, icmp_ln587_fu_471_p2, zext_ln587_fu_466_p1)
    begin
        if ((((icmp_ln587_fu_471_p2 = ap_const_lv1_0) and (tmp_9_reg_615 = ap_const_lv1_0) and (icmp_ln575_reg_521 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_9_reg_615 = ap_const_lv1_0) and (icmp_ln575_reg_521 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln587_fu_471_p2 = ap_const_lv1_1)))) then 
            ctx_Iv_address0 <= ctx_Iv_addr_1_reg_619;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ctx_Iv_address0 <= zext_ln587_fu_466_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ctx_Iv_address0 <= zext_ln55_fu_298_p1(4 - 1 downto 0);
        else 
            ctx_Iv_address0 <= "XXXX";
        end if; 
    end process;


    ctx_Iv_ce0_assign_proc : process(icmp_ln575_reg_521, ap_CS_fsm_state3, tmp_9_reg_615, ap_CS_fsm_state12, ap_CS_fsm_state13, icmp_ln587_fu_471_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln587_fu_471_p2 = ap_const_lv1_0) and (tmp_9_reg_615 = ap_const_lv1_0) and (icmp_ln575_reg_521 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_9_reg_615 = ap_const_lv1_0) and (icmp_ln575_reg_521 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln587_fu_471_p2 = ap_const_lv1_1)))) then 
            ctx_Iv_ce0 <= ap_const_logic_1;
        else 
            ctx_Iv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_Iv_d0_assign_proc : process(icmp_ln587_fu_471_p2, add_ln591_fu_483_p2, ap_condition_456)
    begin
        if ((ap_const_boolean_1 = ap_condition_456)) then
            if ((icmp_ln587_fu_471_p2 = ap_const_lv1_0)) then 
                ctx_Iv_d0 <= add_ln591_fu_483_p2;
            elsif ((icmp_ln587_fu_471_p2 = ap_const_lv1_1)) then 
                ctx_Iv_d0 <= ap_const_lv8_0;
            else 
                ctx_Iv_d0 <= "XXXXXXXX";
            end if;
        else 
            ctx_Iv_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_Iv_we0_assign_proc : process(icmp_ln575_reg_521, tmp_9_reg_615, ap_CS_fsm_state13, icmp_ln587_fu_471_p2)
    begin
        if ((((icmp_ln587_fu_471_p2 = ap_const_lv1_0) and (tmp_9_reg_615 = ap_const_lv1_0) and (icmp_ln575_reg_521 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_9_reg_615 = ap_const_lv1_0) and (icmp_ln575_reg_521 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln587_fu_471_p2 = ap_const_lv1_1)))) then 
            ctx_Iv_we0 <= ap_const_logic_1;
        else 
            ctx_Iv_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ctx_RoundKey_address0 <= grp_Cipher_fu_259_RoundKey_address0;
    ctx_RoundKey_ce0 <= grp_Cipher_fu_259_RoundKey_ce0;
    grp_Cipher_fu_259_ap_start <= grp_Cipher_fu_259_ap_start_reg;
    i_6_fu_321_p2 <= std_logic_vector(unsigned(i_0_i2_reg_192) + unsigned(ap_const_lv3_1));
    i_7_fu_397_p2 <= std_logic_vector(unsigned(i_0_i3_reg_214) + unsigned(ap_const_lv3_1));
    i_8_fu_274_p2 <= std_logic_vector(unsigned(i_0_reg_157) + unsigned(ap_const_lv5_1));
    i_fu_292_p2 <= std_logic_vector(unsigned(i_0_i_reg_181) + unsigned(ap_const_lv5_1));
    icmp_ln483_fu_315_p2 <= "1" when (i_0_i2_reg_192 = ap_const_lv3_4) else "0";
    icmp_ln484_fu_357_p2 <= "1" when (k_0_i_reg_203 = ap_const_lv3_4) else "0";
    icmp_ln491_fu_391_p2 <= "1" when (i_0_i3_reg_214 = ap_const_lv3_4) else "0";
    icmp_ln492_fu_433_p2 <= "1" when (k_0_i5_reg_225 = ap_const_lv3_4) else "0";
    icmp_ln54_fu_286_p2 <= "1" when (i_0_i_reg_181 = ap_const_lv5_10) else "0";
    icmp_ln574_fu_268_p2 <= "1" when (i_0_reg_157 = ap_const_lv5_10) else "0";
    icmp_ln575_fu_280_p2 <= "1" when (bi_0_reg_169 = ap_const_lv32_10) else "0";
    icmp_ln587_fu_471_p2 <= "1" when (ctx_Iv_q0 = ap_const_lv8_FF) else "0";
    k_1_fu_439_p2 <= std_logic_vector(unsigned(k_0_i5_reg_225) + unsigned(ap_const_lv3_1));
    k_fu_363_p2 <= std_logic_vector(unsigned(k_0_i_reg_203) + unsigned(ap_const_lv3_1));
        sext_ln585_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bi_1_reg_236),32));

        sext_ln597_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_bi_2_phi_fu_251_p4),64));

    shl_ln1_fu_407_p3 <= (trunc_ln493_fu_403_p1 & ap_const_lv2_0);
    shl_ln_fu_331_p3 <= (trunc_ln485_fu_327_p1 & ap_const_lv2_0);
    tmp_9_fu_458_p3 <= bi_1_reg_236(4 downto 4);
    tmp_fu_303_p3 <= (i_0_i2_reg_192 & ap_const_lv2_0);
    tmp_s_fu_379_p3 <= (i_0_i3_reg_214 & ap_const_lv2_0);
    trunc_ln485_fu_327_p1 <= i_0_i2_reg_192(2 - 1 downto 0);
    trunc_ln493_fu_403_p1 <= i_0_i3_reg_214(2 - 1 downto 0);

    x_address0_assign_proc : process(x_addr_reg_561, ap_CS_fsm_state10, grp_Cipher_fu_259_state_address0, ap_CS_fsm_state7, ap_CS_fsm_state8, zext_ln493_2_fu_428_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_address0 <= zext_ln493_2_fu_428_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x_address0 <= x_addr_reg_561;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_address0 <= grp_Cipher_fu_259_state_address0;
        else 
            x_address0 <= "XXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_CS_fsm_state10, grp_Cipher_fu_259_state_ce0, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            x_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_ce0 <= grp_Cipher_fu_259_state_ce0;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_ce1_assign_proc : process(grp_Cipher_fu_259_state_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_ce1 <= grp_Cipher_fu_259_state_ce1;
        else 
            x_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_d0_assign_proc : process(buffer_q0, grp_Cipher_fu_259_state_d0, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x_d0 <= buffer_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_d0 <= grp_Cipher_fu_259_state_d0;
        else 
            x_d0 <= "XXXXXXXX";
        end if; 
    end process;


    x_we0_assign_proc : process(grp_Cipher_fu_259_state_we0, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_we0 <= grp_Cipher_fu_259_state_we0;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x_we1_assign_proc : process(grp_Cipher_fu_259_state_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_we1 <= grp_Cipher_fu_259_state_we1;
        else 
            x_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln483_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_303_p3),6));
    zext_ln484_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_i_reg_203),4));
    zext_ln485_1_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_i_reg_203),6));
    zext_ln485_2_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln485_1_fu_347_p2),64));
    zext_ln485_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln485_fu_369_p2),64));
    zext_ln491_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_379_p3),6));
    zext_ln492_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_i5_reg_225),4));
    zext_ln493_1_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_i5_reg_225),6));
    zext_ln493_2_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln493_1_fu_423_p2),64));
    zext_ln493_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln493_reg_610),64));
    zext_ln55_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_181),64));
    zext_ln587_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln585_fu_454_p1),64));
    zext_ln597_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_157),64));
end behav;
